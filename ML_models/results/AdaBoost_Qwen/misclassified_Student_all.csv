ID,Code,Prompt
dbbe2c6beeefd93c68c1cf77a6130ed4323b9aa3,"public int countEvens(int[] nums)
{
    int count = 0;
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] % 2 == 0)
        {
            count++;
        }
    }
    return count;
}
",
0eefe10c954547a7675d5ee81f88d4d112cf44e9,"public boolean bobThere(String str)
{
    for (int i = 0; i < str.length() - 2; i++) {
        if (str.charAt(i) == 'b' && str.charAt(i + 2) == 'b') {
            return true;
        }
    }
    return false;
}
",
f1f0a6448bfe3ad005796a40633fc50d6ffa6023,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
0be714e6700cd5ad89ad8f1e30daf5c0dc2f6a03,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length; i++)
    {
    	if (nums[i] != val || nums[i+1] != val)
        {
        	return false;
        }

    }
	return true;
}
",
de2b521aa2c62ce8dcb54219041aa20489dda3f4,"public int loneSum(int a, int b, int c)
{
    if (a == b && b == c)
        return 0;
    if (a == b)
        return c;
    if (b == c)
        return a;
    if (a == c)
        return b;
    return a + b + c;
}
",
fa7e52a8dd82b9e07db5c24a9f6640028d267b37,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] != val && nums[i + 1] != val)
        {
            return false;
        }
    }
    return true;
}
",
8b2f2240b040ccff48ec7c89647d89e57b34ca88,"public boolean has77(int[] nums)
{
    for ( int i = 0; i < nums.length - 2; i++ ) {
        if ( nums[i] == 7 ) {
            if ( nums[i + 1] == 7 || nums[i + 2] == 7 ) {
                return true;
            }    
        }
    }
    if ( nums[nums.length - 2] == 7 && nums[nums.length - 1] == 7 )
    {
        return true;
    }
    return false;
}
",
8ce774ddf43260b9faa39499c3a67d91f71fc099,"public boolean squirrelPlay(int temp, boolean isSummer)
{
    { if (!isSummer && temp >= 60 && <= 90)
    {
        return true;
    }}
}
",
e22ce5e6a4c5b1b12e61c7366855f779f8ae64f3,"public String atFirst(String str)
{
    if (str.length() >= 2)
    {
        return (str.substring(0, 2));
    }
    else if (str.length() == 1)
    {
        return str + ""@"";
    }
    else
    {
        return ""@@"";
    }
}
",
98b41121a7f0c87d5746dc0ae2746596c4a8bb37,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
3830e31ad432afa3bd25206f3c4d647acaed3868,"public boolean twoTwo(int[] nums)
{
    int x = nums.length;
    for (int i = 0; i < x; i++)
    {
        if (nums[i] == 2)
        {
            if ((i + 1) < x && nums[i + 1] != 2)
            {
                return false;
            }
            else
            {
                i++;
            }
        }
    }
    return true;
}
",
324744e665f46a82492205626535ae0a59adced1,"public int countEvens(int[] nums)
{
    int count = 0;
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] % 2 == 0)
        {
            count++;
        }
    }
    return count;
}
",
ecef8ffff5f622c9ab6799c53c46541bd578254a,"public int sum67(int[] nums)
{
    int sum = 0;
    boolean ifSix = false;
    for (int i = 0; i < nums.length; i++)
    {
        if (ifSix)
        {
            if (nums[i] == 7)
                ifSix = false;
        }
        else if (nums[i] == 6)
        {
            ifSix = true;
        }
        //if ifSix is true, then it goes back into the for loop 
        //and the first if statement becomes true
        else
        {
            sum = sum + nums[i];
        }
        //takes the sum of the numbers when there is no linee of numbers starting
        //with a 6 and ending with a 7
    }
    return sum;
}
",
4b739892a3a01dc0f58db94873932aeb2301f0b2,"public int[] fix45(int[] nums)
{
    List<int> fourIndex = new ArrayList();
    list<int> fiveIndex = new ArrayList();
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] == 4)
        {
            fourIndex.add(i);                  
        }
        else if (nums[i] == 5)
        {
            fiveIndex.add(i);
        }
    }
    for (int i = 0; i < fourIndex.size(); i++)
    {
        int fivePos = fiveIndex(i);
        int newPos = fourIndex(i + 1);
        int number = nums[newPos];
        nums[fivePos] = number;
        nums[newPos] = 5;
    }
    return nums;
}
",
0b982a9a20853fc1fbc5d069b0a41cc50c2c1b33,"public boolean squirrelPlay(int temp, boolean isSummer)
{
    if (isSummer)
    {
        return (temp <= 100 && temp >= 60);
    }
    return (temp >= 60 && temp <= 90);
}
",
a9e28b208ebd799c89289ae125794d7301b373d2,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 1; i < nums.length() - 1; i++)
    {
        if (nums[i - 1] != val && nums[i + 1] != val)
            return false;
    }
    return true;
}
",
e352a60d0f0071b6a216e1e28616df56bccf719c,"public int countCode(String str)
{
    int code;
    int iteration = 0;
    int length = str.length() - 3;
    while (iteration > length)
    {
     	if (str.charAt(iteration) == ""c"" && str.charAt(iteration + 1) == ""o"" && str.charAt(iteration + 3) == ""e"")
        {
         	code += 1;
            iteration += 1
        }
    }
    return code;
}
",
bb95327d0292272d65dd996e6aa6f61c87319399,"public boolean endOther(String a, String b)
{
    if a.length() == ""a"" + ""b""
        return b.substring(0,1).toLowerCase();
}
",
c0dbc4d8e7248361a8572bc2edab98f5b3c74203,"public int greenTicket(int a, int b, int c)
{
    if (a != b && b != c && a != c){
        return 0;
    } 
    if (a == b && b == c){
        return 20;
    }
    if (a == b || b == c || a == c){
        return 10;
    }
}
",
1210586898611da22a06d0d9dcf9c07490875ee1,"public String atFirst(String str)
{
    if (str.length() < 2)
        return '@';
    else 
        return str.substring(0, 2)
        
}
",
9ba9d8618a99bf06f7c45d5ee796bf2c7bcc2325,"public boolean twoTwo(int[] nums)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] == 2)
        {
            if (nums[i + 1] != 2)
            {
                return false;
            }
            i++;
        }
    }
    if (nums. length >= 2 && nums[nums.length - 2] != 2 && nums[nums.length - 1] == 2)
    {
        return false;
    }
    return true;
}
",
afec4a1fda7760651e34095e9ceef8a8483018be,"public boolean sameEnds(int[] nums, int n)
{
    
    for (int i = 0; i <= n; i++)
    {
        if (nums[i] != nums[nums.length - n + i - 1])
        {
            return false;
        }
    }
    return true;
}
",
d3bbd5372c67b93d7e4c5f3425ac793bb5763980,"public int sortaSum(int a, int b)
{
    int sum = a + b;
    if (sum >= 10 && sum <= 19)
        return 20;
    return sum;
}
",
dea353e4fa8946278ebcfad2f8039a9f72b55b28,"public int sum3(int[] nums)
{
 return nums[0] + nums[1] + nums[2];   
}
",
6df6127758cd9f2ab7f4ebbed30d50f1fabcb1f1,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    int i = 0;
    if (isBirthday)
    {
        i = 5;
    }
   
    if (speed <= 60 + i)
    {
        return 0;
    }
    else if (speed >= 61 + i && speed <=80 + i )
    {
        return 1;
    }
    else
    {
        return 2;
    }
    
}
",
3a5b1294ef5b59964830e8cf8f6219db0c34b7d8,"public int blackjack(int a, int b)
{
    double remainA;
    remainA = (a % 21); //NOTE: The '%' yields the remainder!!!!
    double remainB;
    remainB =  (b % 21);
    
    // IF the remainder is large for one number, IT IS FAR AWAY from 21.
    if (a > 21 && b > 21)
    {
        return 0;
    }
    else if (a < 21 || b < 21)
    {
        if (a < 21 && b > 21)
        {
            return a;
        }
        else
        {
            return b;
        }
    }
    else
    {
        if (remainA > remainB)
        {
            return b;
        }
        else
        {
            return a;
        }
    }
}",
d3bbd5372c67b93d7e4c5f3425ac793bb5763980,"public int sortaSum(int a, int b)
{
    int sum = a + b;
    if (sum >= 10 && sum <= 19)
        return 20;
    return sum;
}
",
bb95327d0292272d65dd996e6aa6f61c87319399,"public boolean endOther(String a, String b)
{
    if a.length() == ""a"" + ""b""
        return b.substring(0,1).toLowerCase();
}
",
abf203f02a8e6355f71ebc0195c9c4f08db3dca9,"public int greenTicket(int a, int b, int c)
{ 
    if (a == b && b == c){
        return 20;
    }
    if (a == b || b == c || a == c){
        return 10;
    }
    return 0;
}
",
eee0eb76d7c982f7cdbbfb86dbf032940b49e38b,"public int luckySum(int a, int b, int c)
{
    if (a == 13) // if a is equal to 13
        return 0;
    if (b == 13) // if b is equal to 13 go to the a value
        return a;
    if (c == 13) //if c is 13, only add  and b
        return (a + b);
    return (a + b + c); //if none of the others,add all the numbers
}
",
a581a8a3d84b2ba650ac433de7fddce80ff00321,"public int redTicket(int a, int b, int c)
{
    /*if (b != a && c != a)
    {
     	return 0;   
    }
    if*/
    {
     	if (a == 2 && b == 2 && c == 2)
        {
         	return 10;   
        }
        else if (a == b && b == c && a == c)
        {
         	return 5;   
        }
        else 
        {
         	return 0;   
        }
    }
}
",
f8ebcbd79bc4f0fcf31f8870b3444075c6607618,"public boolean isEverywhere(int[] nums, int val)
{
    boolean everywhere = false;
    
    for (int i = 0; i < nums.length; i++)
    {
        for (int j = 1; i < nums.length; i++)
        {
            if (nums[i] == val || nums[j] == val)
            {
                everywhere = true;
            }
            else
            {
                everywhere = false;
                break;
            }
        }
    }
    
    return everywhere;
}
",
dc8066a4ce0e948c3507c575f5e9322070445254,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
    if (!isAsleep) {
        if (isMom || !isMorning) {
            return true;
        }
        return false;
    }
    return false;
}
",
9c1b24f0268b9d5238feaf59114da5d3b827e88f,"public boolean bobThere(String str)
{
    for (int i = 0; i < str.length() - 2; i++) 
    {
    if (str.charAt(i) == 'b' && str.charAt(i + 2) == 'b')
    {
        return true;
    }
    }
    return false;
}
",
8dbe6fb15987997ffaf0f07b86943c0bcb2846fb,"public String alarmClock(int day, boolean vacation)
{
    if (vacation)
    {
        if (day != 0 || day != 6)
        {
            return ""10:00"";
        }
        else
        {
            return ""off"";
        }
    }
	else
    {
        if (day != 0 || day != 6)
        {
            return ""7:00"";
        }
        else
        {
            return ""10:00"";
        {
    }


",
2b92c031167d3664a0be5ab4cee6d5ad678ce824,"public int sum67(int[] nums)
{
    int count = 0;
    int seven = 0;
    
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] == 6)
        {
           for (int x = i; x < nums.length; x++)
           {
               if (nums[x] != 7)
               {
                   count = count + 0;
               }
               else if (nums[x] == 7)
               {
                   count = count + 0;
                   i = i + x;
               }
           }
        
        }
        
        count = count + nums[i];
        // i'm stuck on excluding numbers up till 7.
        // okay, i'm trying to say:
        // when you reach a 6, ignore the 6.
        // then, ignore each number until you reach a 7.
        
        // so perhaps the smarter way to state this is:
        // ahhh maybe a separate int to count 7's?
        
        // i'm thinking in the way the problem is laid out for me, where
        // i'm supposed to ""ignore"" sections of numbers
        
        // maybe just fucking count them all and ignore the ones in between 6 and 7
        
       
        
    }
    
    return count;
}

",
6ccaf37a8d9757fc57014287316ecd9409820fe7,"public int sortaSum(int a, int b)
{
    int sum = a + b;
    
    if (sum >= 10 || sum <= 19)
        return 20;
    else
        return sum;
    
}
",
3d4c98b74adf52d4ca5fe21febb24b1a8f6a6120,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++) {
        if (nums[i] != val && nums[i + 1] != val) {
            return false;
        }
    }
    return true;
}
",
c5aebb4151a6c14d6fb00ca52ff6164ceb64474b,"public int noTeenSum(int a, int b, int c)
{
    return fixTeen(a) + fixTeen(b) + fixTeen(c);
}

public int fixTeen(int n)
{
    return (n &gt;= 13 &amp;&amp; n &lt; 15 || n &gt; 16 &amp;&amp; n &lt;= 19) ?
        0 : n;
}
",
e05151e763b22c6322f72dd9558578b0970a10d6,"public boolean canBalance(int[] nums)
{
    double sum = 0;
    for (int n : nums) {
        sum += n;
    }
    
    double target = sum / 2;
    sum = 0;
    
    for (int i : nums) {
        sum += i;
        if (sum == target) {
            return true;
        }
    }
    return false;
}
",
f1f0a6448bfe3ad005796a40633fc50d6ffa6023,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
ec03a0ab16a221fcf9292fec81dde347af81b619,"public String repeatEnd(String str, int n)
{
StringBuffer result = new StringBuffer();
String end = str.substring(str.length() - n);

for(int i = 0; i < n; i++)
result.append(end);

return result.toString(
}
",
d822cf12d38ea28fe825ff4fc14fdc94e6719f05,"public boolean bobThere(String str)
{
    int i = 0;
    char[] CharArray = str.toCharArray();
    for(char cha : CharArray){
    	if (cha == 'b'){
        	if (str[i + 2] == 'b'){
            	return true;
            }
        }
     	i++;
    }
    return false;
}
",
4451f56f297e641c3925f657e88b73a66a82c8d0,"public int[] tenRun(int[] nums)
{
    for (int i = 0; i < nums.length; i++){
        if (nums[i] % 10 == 0 && i != nums.length - 1){
            int storage = nums[i];
            i++;
            while (nums[i] % 10 != 0 && i != nums.length - 1){
                nums[i] = storage;
                i++;
            }
        }
    }
    return nums;
}
",
cdf42d5c2d560cf867cc0f628e892b8731b4a6c5,"public boolean twoTwo(int[] nums)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] == 2 && nums[i+1] == 2)
        {
            return true;
        }
    }
    return false;;
}
",
b03f6ee58d1c2efbc298c1b090d888a47d5425a9,"public boolean evenlySpaced(int a, int b, int c)
{
    if (b-a <= 1 && c-a >= 2 && c-b >= 2 
        || b-a >= 2 && c-a <= 1 && c-b >=2
        || b-a >=2 && c-a >= 2 && c-b <= 1)
        return true;
    return false;
}
",
93d04bbaaacbdc2e43e79af8101e3443d99f3216,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
002254c45164bdf12bfca8a0fe71d68f839bbb7a,"public boolean canBalance(int[] nums)
{
    int sum = 0;
    int other =0;
    for(int i = 0; i < nums.length; i++)
    {
        sum += nums[i];
    
    	for(int j = nums.length-1; j < i; j--)
   		{
        	other += nums[j];
    	}
    }
    if (other == sum)
        return true;
        else
            return false;
}
",
ec03a0ab16a221fcf9292fec81dde347af81b619,"public String repeatEnd(String str, int n)
{
StringBuffer result = new StringBuffer();
String end = str.substring(str.length() - n);

for(int i = 0; i < n; i++)
result.append(end);

return result.toString(
}
",
2d93e4072a980ef993907c9526395445c01a414f,"public boolean xyBalance(String str)
{
    boolean t=true;
    for (int i=0; i<str.length()-1; i++)
    {
        if (str.charAt=='y')
        {
            t=true;
        }
        if (str.charAt=='x' && !str.charAt=='y')
        {
            t=false;
        }
    }
    return t;
}
",
44486f7c1cd235e3b61ad1b1d5e4f52e3f447ead,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
    if (isMorning && isMom && isAwake)
        return true;
    if (isMorning && !isMom && !isAwake)
        return false;
    if (isMorning && isMom && !isAwake)
        return false;
    return false;    
}
",
44401b7a795caa5e1f94585e15dc8c88bdb84119,"public boolean isEverywhere(int[] nums, int val)
{	
    for (int i = 0; i < nums.length - 1; i++)
    {
        if ( nums[i] != val && nums[i+1] != val)
        {
            return false;
        }
    }
    return true;
}
",
b1734b84d9123cc28d3f62e758b480ab26ea8fb9,"public int sortaSum(int a, int b)
{
   int sum = a + b;
   if (sum >= 10 && sum <= 19)
   {
   		return 20; 
   }
   else
   {
   		return sum;
   }
}
",
324744e665f46a82492205626535ae0a59adced1,"public int countEvens(int[] nums)
{
    int count = 0;
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] % 2 == 0)
        {
            count++;
        }
    }
    return count;
}
",
9f76f502536b5caf05e00e7133cb3aa0cc6027d4,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    if (isBirthday)
     speed -=5;
    if (speed <= 60)
        return 0;
    else if (speed <= 80)
        return 1;
    else
        return 2;
    
}
",
7771b0fe7b472fa3dd018ccf138b317743bc74fc,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    if (speed <= 0)
        return 0;
    else if (speed <= 80)
        return 1;
    else
        return 2;
    if (isBirthday)
        speed -= 5;
}
",
3716e52883778fd89a65151c2b55e28aaab539b2,"public int caughtSpeeding(int speed, boolean isBirthday)
{ if (speed <= 60)
{
    return 0;
}
if (speed >= 61 && speed <= 80)
{
    return 1;
}
if (isBirthday())
{
    return 2;
}
}
",
b03f6ee58d1c2efbc298c1b090d888a47d5425a9,"public boolean evenlySpaced(int a, int b, int c)
{
    if (b-a <= 1 && c-a >= 2 && c-b >= 2 
        || b-a >= 2 && c-a <= 1 && c-b >=2
        || b-a >=2 && c-a >= 2 && c-b <= 1)
        return true;
    return false;
}
",
51cd81eddc2c0304f6f4b44ade4bf6e3c8a6aff8,"public String alarmClock(int day, boolean vacation)
{
    if (day >=1 && day <= 5)
    {
        return vacation ? ""10:00"" : ""7:00"";
    }
    
    else
    {
        return vacation ? ""off"" : ""10:00""
    }

    
}
",
0eefe10c954547a7675d5ee81f88d4d112cf44e9,"public boolean bobThere(String str)
{
    for (int i = 0; i < str.length() - 2; i++) {
        if (str.charAt(i) == 'b' && str.charAt(i + 2) == 'b') {
            return true;
        }
    }
    return false;
}
",
6d62699ce20db7e91bf9a9c10e2cc7b3850ad892,"public int[] tenRun(int[] nums)
{
    for (int i - 0; i < nums.length; i++)
    {
    	if nums[i] % 10 == 0
        {
        	for (int j = i + 1; j < nums.length &&
                 !(nums[j] % 10 == 0); j++)
        	{
        		nums[j] = nums[i];
        	}   	  
        }
        return nums;
    }
}
",
3ce009bc540eea6e8cf415b8fc53aff5c31e7b44,"public int loneSum(int a, int b, int c)
{
    if (a == b || b == c || a == c)
    {
        return false;
    }
    return a + b + c;
}
",
0ea1d83d6bffd4f7b531269f88cfadccff02bc63,"public boolean evenlySpaced(int a, int b, int c)
{
    int max = Math.max(a, Math.max(b,c));
    int min = Math.min(a, Math.min(b,c));
    int mid = a+b+c-min-max;
    
    if(max-mid == mid-min) return true;
    return false;
}
",
1a4217a42da8fb81be3f704b665bfc939b38dc68,"public String getSandwich(String str)
{
    int a = -1; //the first character
    int z = -1; //the last character
      
    for(int i = 0; i < str.length() - 5; i++) 
    {
        if(str.substring(i, i + 5).equals(""bread"")) 
        {
            a = i;
            break;
        }
    }
                                
    for(int i = str.length() - 5; i >= 0; i--) 
    {
        if(str.substring(i, i + 5).equals(""bread"")) 
        {
            z = i;
            break;
        }
    }
                                                          
    if(a != -1 && z != -1 && a != z) //determining the substring that should be returned
        return str.substring(a + 5, z);
                                                                    
    return """";
}
",
d822cf12d38ea28fe825ff4fc14fdc94e6719f05,"public boolean bobThere(String str)
{
    int i = 0;
    char[] CharArray = str.toCharArray();
    for(char cha : CharArray){
    	if (cha == 'b'){
        	if (str[i + 2] == 'b'){
            	return true;
            }
        }
     	i++;
    }
    return false;
}
",
c9864807562ce05a0e1872a9d5d2eae382cb6654,"public boolean canBalance(int[] nums)
{
    boolean result = false;
        int nums1 = 0;
    	int nums2 = 0;
        for (int i = 0; i < nums.length / 2; i++)
        {
            nums1 += nums[i];
        }
        
        for (int j = (nums.length / 2 ) + 1; j < nums.length; j++)
        {
            nums2 += nums[j];
        }
        
        if (nums1 == nums2)
        {
            result = true;
        }
    return result;
}
",
3d4c98b74adf52d4ca5fe21febb24b1a8f6a6120,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++) {
        if (nums[i] != val && nums[i + 1] != val) {
            return false;
        }
    }
    return true;
}
",
afec4a1fda7760651e34095e9ceef8a8483018be,"public boolean sameEnds(int[] nums, int n)
{
    
    for (int i = 0; i <= n; i++)
    {
        if (nums[i] != nums[nums.length - n + i - 1])
        {
            return false;
        }
    }
    return true;
}
",
de2b521aa2c62ce8dcb54219041aa20489dda3f4,"public int loneSum(int a, int b, int c)
{
    if (a == b && b == c)
        return 0;
    if (a == b)
        return c;
    if (b == c)
        return a;
    if (a == c)
        return b;
    return a + b + c;
}
",
71d268cab1e5b5629eb35d8e729c7c8880965509,"public int countEvens(int[] nums)
{
    for (int count=0; count < nums.length; count++) {
  if (nums[count] % 2 == 0)
  even++;
  }
  return even;

}
",
109f0388a3981d429a9290e5861cb47f08920b3b,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    if (speed < 60)
    {
        return 0;
    }
    else
    {
        return 1;
    }
}
",
93d04bbaaacbdc2e43e79af8101e3443d99f3216,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
0eefe10c954547a7675d5ee81f88d4d112cf44e9,"public boolean bobThere(String str)
{
    for (int i = 0; i < str.length() - 2; i++) {
        if (str.charAt(i) == 'b' && str.charAt(i + 2) == 'b') {
            return true;
        }
    }
    return false;
}
",
3ce009bc540eea6e8cf415b8fc53aff5c31e7b44,"public int loneSum(int a, int b, int c)
{
    if (a == b || b == c || a == c)
    {
        return false;
    }
    return a + b + c;
}
",
d3745baab3910b6b855000797454d3c32c533553,"public String atFirst(String str)
{
    if (str.length() < 2)
    {
        return (str.substring(0,1) + ""@"");
    }
    return (str.substring(0, 2));
}
",
948b5b2528e52a0cd157a7b353521353f3da1fef,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
     return (isMom || (!(isAsleep)));

}
",
00e965d53a2c068467dc780c163a1170b8d6a056,"public int countCode(String str)
{
    int count = 0;
    
    for (int i = 0; i < str.length() - 3; i++)
    {
        if (str.charAt(i) == 'c' && str.charAt(i + 1) == 'o' && str.charAt(i + 3) == 'e')
        {
            count++;
            i += 4;
        }
    }
    
    return count;
}
",
6d72f5b621649af66f06d05181162fe55168a76e,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    if (isBirthday == true)
    {
        speed = speed - 5;
    }
}
",
3d4c98b74adf52d4ca5fe21febb24b1a8f6a6120,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++) {
        if (nums[i] != val && nums[i + 1] != val) {
            return false;
        }
    }
    return true;
}
",
1ac085374f785c20ca501ac5939ec5977db8a972,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
    if (isAsleep)
    {
        return false;
    }
    
    if (isMorning)
    {
 		return false;   
    }
    
    return true;
}
",
96649403e3463cc1c05171bea6b6b5e9d2710fe4,"public boolean isEverywhere(int[] nums, int val)
{
//    for (int i = 0; i < nums.length; i++)
//    {
  //   	if (nums[i] != val || nums[i++] != val)
    //    {
      //      return false;
        //}
    //}
    //return true;
    
    for (int i = 0; i <=nums.length-2;i++)

{

if ( nums[i] != val && nums[i+1] != val)

result = false;

}

  return result;

}
",
a730369051672c668c3efc03eb8dcc6956e9beb3,"public int[] withoutTen(int[] nums)
{
    int[] arr = new int[nums.length];
	int p = 0;
	for(int i = 0; i < nums.length; i++)
	{
		if(nums[i] != 10)
		{
			arr[p] = nums[i];
			p++;
		}
	}
	// Java arrays are initialized to 0 so no need to set the last elements to 0
	return arr;
}
",
ba64e188a7ff94c5ca147732e34becd1b2436677,"public String atFirst(String str)
{
    String result = str.substring(0, 2);
    
    return result;
}
",
33e1684529896667b663d935101657bf9205ef10,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] != val && nums[i + 1] != val)
            return false;
    }
    return true;
}
",
afec4a1fda7760651e34095e9ceef8a8483018be,"public boolean sameEnds(int[] nums, int n)
{
    
    for (int i = 0; i <= n; i++)
    {
        if (nums[i] != nums[nums.length - n + i - 1])
        {
            return false;
        }
    }
    return true;
}
",
1246d82dc38af3da4d77890172a9d1890cc382a1,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
b02997d91fd09f8bee8d42b148052543fc339026,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    if (isBirthday)
    {
        speed = speed - 5;
    }
    
    if (speed <= 60)
    {
        return 0;
    }
}
",
2b92c031167d3664a0be5ab4cee6d5ad678ce824,"public int sum67(int[] nums)
{
    int count = 0;
    int seven = 0;
    
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] == 6)
        {
           for (int x = i; x < nums.length; x++)
           {
               if (nums[x] != 7)
               {
                   count = count + 0;
               }
               else if (nums[x] == 7)
               {
                   count = count + 0;
                   i = i + x;
               }
           }
        
        }
        
        count = count + nums[i];
        // i'm stuck on excluding numbers up till 7.
        // okay, i'm trying to say:
        // when you reach a 6, ignore the 6.
        // then, ignore each number until you reach a 7.
        
        // so perhaps the smarter way to state this is:
        // ahhh maybe a separate int to count 7's?
        
        // i'm thinking in the way the problem is laid out for me, where
        // i'm supposed to ""ignore"" sections of numbers
        
        // maybe just fucking count them all and ignore the ones in between 6 and 7
        
       
        
    }
    
    return count;
}

",
d3bbd5372c67b93d7e4c5f3425ac793bb5763980,"public int sortaSum(int a, int b)
{
    int sum = a + b;
    if (sum >= 10 && sum <= 19)
        return 20;
    return sum;
}
",
abf203f02a8e6355f71ebc0195c9c4f08db3dca9,"public int greenTicket(int a, int b, int c)
{ 
    if (a == b && b == c){
        return 20;
    }
    if (a == b || b == c || a == c){
        return 10;
    }
    return 0;
}
",
2dec94789ad2db07905f14995eddc4d0c9fb74f2,"public int makeChocolate(int small, int big, int goal)
{
    if ((small + big * 5) < goal)
    {
     	return -1;   
    }
    int smallLeftOver = goal - big * 5;
    /*if (smallLeftOver <= 0)
    {
     	return 0;   
    }*/
    if (big * 5 > goal)
    {
     	return goal % 5;   
    }
    else 
    {
     	return smallLeftOver;   
    }
}
",
7407aaf23f6102440a21d7a9618a9e989f370622,"public boolean cigarParty(int cigars, boolean isWeekend)
{
    boolean successful;
    if (cigars >= 40 && cigars <= 60 && !isWeekend)
        successful = !successful
}
",
7862665265faf85e50ada49c030c401c79b4301c,"public boolean sameEnds(int[] nums, int n)
{
    for (int i = 0; i < n; i++)
    {
        if (nums[i] != nums[nums.length - (n - i)])
        {
            return false;
        }
    }
    
    return true;
}
",
4eb6382872b95c713ee9b9ee3717c152840acf5e,"public int[] zeroMax(int[] nums)
{
    int[] numArray;
    for(int i : nums)
    {
        if (nums[i] == 0)
        {
            nums[i] = largestOdd(i, nums);
        }
    }
    return numArray;
}

public int largestOdd(int position, int[] nums2)
{
    int biggestOdd = 0
    for (int i = position; i < nums2.length; i++)
    {
        if (nums2[i] % 2 == 1 && nums2[i] > biggestOdd)
        {
            biggestOdd = nums2[i];
        }
    }
    return biggestOdd;
}",
89b773ce42f1920ae478220b9e65deebf3af5445,"public int roundSum(int a, int b, int c)
{
    return round10(a) + round10(b) + round10(c);
}

public int round10(int num)
{
    int round = num % 10;
    if (round >= 5)
    {
     	return num + 10 - round;
    }
    else
    {
    return num - round;
    }
}
",
62ce70304358abfdd932378fb6cd7769b980fdc9,"public int noTeenSum(int a, int b, int c)
{
	return fixTeen(a) + fixTeen(b) + fixTeen(c);
}

public int fixTeen(int n)
{
    if (13 <= n && n <= 19)
    {
        if (n != 15 || n != 16)
        {
            n = 0;
        }
        return n;
    }
}
",
eabf29a115776da8e379096d41db0d505c7e5795,"public int countClumps(int[] nums)
{
    int clumps = 0;
    boolean isClump = false;
    for (int i = 0; i < nums.length; i++)
    {
        if (isClump)
        {
            if (nums[i] != nums[1+i])
                isClump = false;
        }
        else if (nums[i] == nums[i+1])
        {
            isClump == true;
            clumps++
        }
    }
    return clumps;
}
",
faa6cc44696d72e0fa85cc561584a1de159a4aa5,"public int dateFashion(int you, int date)
{
    if (you <= 2 || date <= 2)
        return 0;
    if (you >= 8 || date >= 8)
        return 2;
    return 1;
}
",
8a4197cd94d2fc278a10045f02c9323393eb70ad,"public boolean sameEnds(int[] nums, int n)
{
    for (int i = 0; i < n; i++)
    {
        if (nums[i] != nums[nums.length - n + i])
            return false;
    }
    return true;
}
",
08fa5ac960d3ab8ef2af29ef9f42e5d116bda6bf,"public int sum3(int[] nums)
{
    int sum = 0;
    
    for (int number : nums)
    {
        sum = sum + number;
    }
     return sum;   
}
",
14ced47f38f6da0c3afcc08c0bcb9ed96b5c73fe,"public String getSandwich(String str)
{
    if (str.indexOf(""bread"") > 0) // if there are two peices of bread
    {
         System.out.print(str.indexOf(""bread""));
        return ""no"";
    }
    else
    {
        return """";
    }
}
",
b0b97b491d74292aebc0f4672b36a68af6758365,"public boolean canBalance(int[] nums)
{
    int sum = 0; 
    for (int num: nums)
    {
        sum = sum + num; 
    }
    int half = sum/2; 
    sum = 0; 
    int secondSum = 0; 
    for (int num: nums)
    {
         
        if (sum != half)
        {
            sum = sum + num; 
        }
        else 
        {
            secondSum = secondSum + num; 
        }
    }
    
    return secondSum == half; 
    
}
",
ecd2767c2649044a0da26903ef340674e89f1009,"public int[] fix45(int[] nums) {
  int[] result = nums;
  for(int i = 0; i < result.length; i++) {
      if(result[i] == 4 && i != result.length) {
          int index = findIndexOfValidFive(result);
           
          if(index != -1) {
              int temp = result[i + 1];
              result[i + 1] = result[index];
              result[index] = temp;
          }
      }
  }  
   
  return result;
}
 
public int findIndexOfValidFive(int[] nums) {
    for(int i = 0; i < nums.length; i++) {
        if((i == 0 && nums[i] == 5) || (nums[i] == 5 && nums[i - 1] != 4)) {
            return i;
        }
    }
     
    return -1;",
35b9707aad5f20f180ef74fcf0950fdb0f71ce29,"public int countClumps(int[] nums)
{
    int clumps = 0;
    for (int i = 0; i < nums.length - 1; i++) {
        if (nums[i] == nums[i + 1]) {
            clumps += 1;
            while (i < nums.length - 1 && nums[i] == nums[i + 1]) {
                i += 1;
            }
        }
    }
    return clumps;
}
",
1a4217a42da8fb81be3f704b665bfc939b38dc68,"public String getSandwich(String str)
{
    int a = -1; //the first character
    int z = -1; //the last character
      
    for(int i = 0; i < str.length() - 5; i++) 
    {
        if(str.substring(i, i + 5).equals(""bread"")) 
        {
            a = i;
            break;
        }
    }
                                
    for(int i = str.length() - 5; i >= 0; i--) 
    {
        if(str.substring(i, i + 5).equals(""bread"")) 
        {
            z = i;
            break;
        }
    }
                                                          
    if(a != -1 && z != -1 && a != z) //determining the substring that should be returned
        return str.substring(a + 5, z);
                                                                    
    return """";
}
",
14ced47f38f6da0c3afcc08c0bcb9ed96b5c73fe,"public String getSandwich(String str)
{
    if (str.indexOf(""bread"") > 0) // if there are two peices of bread
    {
         System.out.print(str.indexOf(""bread""));
        return ""no"";
    }
    else
    {
        return """";
    }
}
",
8a4197cd94d2fc278a10045f02c9323393eb70ad,"public boolean sameEnds(int[] nums, int n)
{
    for (int i = 0; i < n; i++)
    {
        if (nums[i] != nums[nums.length - n + i])
            return false;
    }
    return true;
}
",
2341aa02180229566878128a50f5ccba14fdcee3,"public int[] frontPiece(int[] nums)
{
    int number[] = new int[2];
    for (int numbers: nums)
    {
        number[i] = numbers;
    }
    return number;
}
",
56e4dc22fcaa600e70470c4379b993e5425d1fd5,"public boolean bobThere(String str)
{
    if (str.length() < 3)
        {
            return false;
        }
    
    for (int i = 0; i < str.length() - 2; i++)
    {
        if (str.charAt(i) == 'b' && str.charAt(i + 2) == 'b')
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    return bobThere(str);
}
",
0808dca8b4a525f8b42f6b75f66b3b1d93c3c6cc,"public int sum13(int[] nums)
{
    int sum = 0;
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] != 13 && nums[i - 1] != 13)
        {
            sum += nums[i];
        }
    }
    return sum;
}
",
3b24fd13da29cf3eaf6ecbfb5f5dfeb4cbdd236e,"public int noTicket(int 0);
private int 1;
private int 2;
public int caughtSpeeding(int speed, boolean isBirthday)
{
    0 = noTicket;
    1 = smallTicket;
    2 = bigTicket;
    if (isBirthday)
    {
        if (speed <= 65)
        {
            return ""0"";         	
       	}
        else if (speed >= 66 && speed <= 85)
        {
            return ""1"";
        }
        else
        {
			return ""2"";
        }
            
    }
    else
    {
        if (speed <= 60)
        {
            return ""0"";         	
       	}
        else if (speed >= 61 && speed <= 80)
        {
            return ""1"";
        }
        else
        {
			return ""2"";
        }
    
    }
}  
",
3a2534fb0ac1dc3651141e9a0bd5b1830ff648bb,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    if (isBirthday)
    {
        if (speed <= 65)
        {
            return ""no ticket"";         	
       	}
        else if (speed >= 66 && speed <= 85)
        {
            return ""small ticket"";
        }
        else
        {
            return ""big ticket"";
        }
            
    }
    else
    {
        if (speed <= 60)
        {
            return ""no ticket"";         	
       	}
        else if (speed >= 61 && speed <= 80)
        {
            return ""small ticket"";
        }
        else
        {
			return ""big ticket"";
        }
    
    }
}  
",
bb771f79da2e164515e0325c84eaa2dbd392e69b,"public int centeredAverage(int[] nums)
{
    int min = nums[0];
    int max = 0;
    int sum = 0;
    
    for (int i = 0; i < nums.length; i++) 
    {
    	max = Math.max(max, nums[i]);
        min = Math.min(min, nums[i]);
        sum += nums[i];
    }
    
    return (sum - max - min) / (nums.length - 2);
}",
b1ffd079f8c4294a66e06ad7d2fb2a7a8fbe7344,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
9c1b24f0268b9d5238feaf59114da5d3b827e88f,"public boolean bobThere(String str)
{
    for (int i = 0; i < str.length() - 2; i++) 
    {
    if (str.charAt(i) == 'b' && str.charAt(i + 2) == 'b')
    {
        return true;
    }
    }
    return false;
}
",
56ac97e6ac311645870c594b750311820db92f19,"public int noTeenSum(int a, int b, int c)
{
    return fixTeen(a) + fixTeen(b) + fixTeen(c);
}

public int fixTeen(int n)
{
    if (n >= 13 && n <= 19 && n != 15 && n != 16)
    {
        n = 0;
}
",
e9a643c862a4712528df227bd0c86412692f6215,"public String zipZap(String str)
{
	String result = """";

	for (int i = 0; i < str.length() - 2; i++)
    {
		if (i == 0 || i % 3 == 0) 
        {
			result += str.substring(i + 1, i + 3);
			result += str.charAt(i);
		}
	}
return result;
}
",
dbbe2c6beeefd93c68c1cf77a6130ed4323b9aa3,"public int countEvens(int[] nums)
{
    int count = 0;
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] % 2 == 0)
        {
            count++;
        }
    }
    return count;
}
",
faa6cc44696d72e0fa85cc561584a1de159a4aa5,"public int dateFashion(int you, int date)
{
    if (you <= 2 || date <= 2)
        return 0;
    if (you >= 8 || date >= 8)
        return 2;
    return 1;
}
",
d65fe8a4b30c8f6a448cc740f49fa2cc87076dda,"public String atFirst(String str)
{
    if (str.length() >= 2) {
        return str.substring(0, 2);
    }
    else if (str.length() == 1) {
        return str;
    }
    else if (str.length() == 0) {
        return ""@@"";
    }
return str;}
",
0cbcdcccb97a84929ef84adcbae98515edde8dfa,"public int roundSum(int a, int b, int c)
{
    return round10(a) + round10(b) + round10(c);
}

public int round10(int num)
{
    
   int d = num %10;
    if (d >= 5)
        return num + 10 -d;
    return num -d;
}
",
b4b80ec23db8730d3a13b7f18055050c22aa3b95,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    if (isBirthday == true)
    {
        if (speed <= 60)
        {
            return 0;
        }
        if (speed <= 80 && speed >= 61)
        {
            return 1;
        }
        else
        {
            return 2;
        }
    }
    else
    {
        if (speed <= 65)
        {
            return 0;
        }
        if (speed <= 85 && speed >= 66)
        {
            return 1;
        }
        if (speed >= 86)
        {
            return 2;
        }
    }
}
}",
98b41121a7f0c87d5746dc0ae2746596c4a8bb37,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
37483792e65efa307aab5d74a47b4a1dbe36e195,"public boolean bobThere(String str)
{
    //int firstB = str.indexOf(""b"");
   // int secondB = str.lastIndexOf(""b"");
    //if (secondB == firstB + 2)
    //    return true;
   // return false;
    for (int n == 0; n < str.length(); n++)
    {
        if ((str.charAt(n) == str.indexOf(""b"") && (str.charAt(n + 2) == str.indexOf(""b"", n))
        {
            return true;
        }
                
    }//end for loop
    return false;
}
",
1ac085374f785c20ca501ac5939ec5977db8a972,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
    if (isAsleep)
    {
        return false;
    }
    
    if (isMorning)
    {
 		return false;   
    }
    
    return true;
}
",
b18357d08d239c3169eb42bdabc04d80a3bba5bf,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
    if (isAsleep) 
    {
        return false;
    }
    if (isMorning && !isMom) 
    {
        return false;
    }
    return true;
}
",
433d8d82491f06595b4a7fd44c977dbfb917d6b7,"public boolean has77(int[] nums)
{
    for (int i = 0; i < nums.length - 1; i ++)
    {
        if (nums[i] != 7 && nums[i+1] != 7)
        {
          return false;
        }
    }
    return true;
    
}
",
863743fea61e06d673131ef705425d4b67d43542,"public int loneSum(int a, int b, int c)
{
    if (a == b)
        return b + c;
    if (b == c)
        return a + c;
    if (a == c)
		return b + c;        
}
",
2b92c031167d3664a0be5ab4cee6d5ad678ce824,"public int sum67(int[] nums)
{
    int count = 0;
    int seven = 0;
    
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] == 6)
        {
           for (int x = i; x < nums.length; x++)
           {
               if (nums[x] != 7)
               {
                   count = count + 0;
               }
               else if (nums[x] == 7)
               {
                   count = count + 0;
                   i = i + x;
               }
           }
        
        }
        
        count = count + nums[i];
        // i'm stuck on excluding numbers up till 7.
        // okay, i'm trying to say:
        // when you reach a 6, ignore the 6.
        // then, ignore each number until you reach a 7.
        
        // so perhaps the smarter way to state this is:
        // ahhh maybe a separate int to count 7's?
        
        // i'm thinking in the way the problem is laid out for me, where
        // i'm supposed to ""ignore"" sections of numbers
        
        // maybe just fucking count them all and ignore the ones in between 6 and 7
        
       
        
    }
    
    return count;
}

",
dfffcbe4f68182cb544f94125537be19361aefa9,"public int[] fix45(int[] nums)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] == 4)
            nums[i + 1] = 5;
    }
    return nums
}
",
7a76d1abad81a69b50456192d50af23131339fe6,"public int[] shiftLeft(int[] nums)
{
    if (nums.length == 0)
    {
        return nums;
    }
    int first = nums[0];
    int last = nums[nums.length - 1];
    for (int i = 0; i < nums.length - 1; i++)
    {
        nums[i] = nums[i + 1];
    }
    nums[nums.length - 1] = first;
    return nums;
}
",
948b5b2528e52a0cd157a7b353521353f3da1fef,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
     return (isMom || (!(isAsleep)));

}
",
afec4a1fda7760651e34095e9ceef8a8483018be,"public boolean sameEnds(int[] nums, int n)
{
    
    for (int i = 0; i <= n; i++)
    {
        if (nums[i] != nums[nums.length - n + i - 1])
        {
            return false;
        }
    }
    return true;
}
",
462c32a961f9e37900f45d8ce5b1817ecd8a2c74,"public int noTicket(0);
private int 1;
private int 2;
public int caughtSpeeding(int speed, boolean isBirthday)
{
    0 = noTicket;
    1 = smallTicket;
    2 = bigTicket;
    if (isBirthday)
    {
        if (speed <= 65)
        {
            return ""0"";         	
       	}
        else if (speed >= 66 && speed <= 85)
        {
            return ""1"";
        }
        else
        {
			return ""2"";
        }
            
    }
    else
    {
        if (speed <= 60)
        {
            return ""0"";         	
       	}
        else if (speed >= 61 && speed <= 80)
        {
            return ""1"";
        }
        else
        {
			return ""2"";
        }
    
    }
}  
",
eee0eb76d7c982f7cdbbfb86dbf032940b49e38b,"public int luckySum(int a, int b, int c)
{
    if (a == 13) // if a is equal to 13
        return 0;
    if (b == 13) // if b is equal to 13 go to the a value
        return a;
    if (c == 13) //if c is 13, only add  and b
        return (a + b);
    return (a + b + c); //if none of the others,add all the numbers
}
",
708073e053068889622d8588b7bec2ceea644404,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
6ccaf37a8d9757fc57014287316ecd9409820fe7,"public int sortaSum(int a, int b)
{
    int sum = a + b;
    
    if (sum >= 10 || sum <= 19)
        return 20;
    else
        return sum;
    
}
",
a3cfe4acc0878f7a98ccbc168df9dff28266dbd7,"public int[] frontPiece(int[] nums)
{
    int [] grid = new int[2];
    
    // establish logi for checking nums.
    // add the proper elements of nums into a new array 
    if (nums.length == 1)
    {
        return grid[0] = nums[0];
    }
    else if (nums.length == 0)
    {
        return grid;
    }
    else
    {
        return grid[nums[0], nums[1]];
    }
}
",
8f6dbd26c957f489904930b7ed0aa2950cd254af,"public String repeatEnd(String str, int n)
{
    String repeat = str.substring(str.length() - n);
    for (int i = 1; i < n; i++)
        //starts with the first letter of the string
    {
        repeat = repeat + str.substring(str.length() - n);
        //gets the part of the word that needs to be returned
    }
    return repeat;
    //returns the string made out of the n repetitions
}
",
db19ea5f1cabdb8d39c12a6acfc593bd85bf4f95,"public int[] tenRun(int[] nums)
{
    for (int i = 0; i < nums.length; i++)
    {
    	if (nums[i] % 10 == 0)
    	{
     	   for (int j = i + 1; j < nums.length && nums[j] % 10 != 0; j++)
           {
            	nums[j] = nums[i];   
           }
    	}
    }
    return nums;
}
",
6f2aa07dfa0846986037573e3e24e0a01ef729f0,"public int[] seriesUp(int n)
{
    int[] nums = new int[n * (n + 1) / 2];
    int index = 0;
    for (int i = 1; i <= n; i++)
    {
        for (int j = 0; j < i + 1; j++)
        {
            nums[index] = j + 1;
            index++;
        }
    }
    return nums;
}
",
cd727adb54733c5b0e8ec8f90e3a20c4ce931c92,"public int makeChocolate(int small, int big, int goal)
{
    if goal >= 5 * big:
        remainder = goal - 5 * big
    else:
        remainder = goal % 5
        
    if remainder <= small:
    {
        return remainder;
    }
        
    return - 1;
}
",
2b92c031167d3664a0be5ab4cee6d5ad678ce824,"public int sum67(int[] nums)
{
    int count = 0;
    int seven = 0;
    
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] == 6)
        {
           for (int x = i; x < nums.length; x++)
           {
               if (nums[x] != 7)
               {
                   count = count + 0;
               }
               else if (nums[x] == 7)
               {
                   count = count + 0;
                   i = i + x;
               }
           }
        
        }
        
        count = count + nums[i];
        // i'm stuck on excluding numbers up till 7.
        // okay, i'm trying to say:
        // when you reach a 6, ignore the 6.
        // then, ignore each number until you reach a 7.
        
        // so perhaps the smarter way to state this is:
        // ahhh maybe a separate int to count 7's?
        
        // i'm thinking in the way the problem is laid out for me, where
        // i'm supposed to ""ignore"" sections of numbers
        
        // maybe just fucking count them all and ignore the ones in between 6 and 7
        
       
        
    }
    
    return count;
}

",
56cccc5e57b71638ae0f36747e6ae090dc81fe2d,"public int sum67(int[] nums)
{
    int count = 0;
    int seven = 0;
    
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] == 6)
        {
           for (int x = i + 1; x < nums.length; x++)
           {
               if (nums[x] != 7)
               {
                   count = count + 0;
               }
               else if (nums[x] == 7)
               {
                   count = count + 0;
                   i = i + x;
               }
           }
        
        }
        else
        {
        count = count + nums[i];
        }
        // i'm stuck on excluding numbers up till 7.
        // okay, i'm trying to say:
        // when you reach a 6, ignore the 6.
        // then, ignore each number until you reach a 7.
        
        // so perhaps the smarter way to state this is:
        // ahhh maybe a separate int to count 7's?
        
        // i'm thinking in the way the problem is laid out for me, where
        // i'm supposed to ""ignore"" sections of numbers
        
        // maybe just fucking count them all and ignore the ones in between 6 and 7
        
       
        
    }
    
    return count;
}

",
9a762998ef3f0abdaeaa9e34d97d58d792cb6be4,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
    if (isAsleep)
        return false;
    if (isMom)
        return true;
    return (!isMorning);
}
",
b1ffd079f8c4294a66e06ad7d2fb2a7a8fbe7344,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
b582494b7566fd2e40e9699094879d12819c2f07,"public int sum67(int[] nums)
{
    int sum = 0;
    boolean lastSix = false;
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] == 6)
        {
            lastSix = true;
        }
        else if (nums[i] == 7)
        {
            lastSix = false;
        }
        if (lastSix == false)
        {
            sum += nums[i];
        }
    }
    return sum;
}
",
f0965dc5b01333c0db74c3b81e48129583709ad9,"public int sortaSum(int a, int b)
{
    int sum = (a + b);
    if (10 <= sum && sum <= 19)
    {
        return 20;
    }
    return sum;
}
",
b1734b84d9123cc28d3f62e758b480ab26ea8fb9,"public int sortaSum(int a, int b)
{
   int sum = a + b;
   if (sum >= 10 && sum <= 19)
   {
   		return 20; 
   }
   else
   {
   		return sum;
   }
}
",
353250dbb0f7d8b1345775c3b7683b3a5c68b0d5,"public int makeChocolate(int small, int big, int goal)
{
    // small = 1 kilo each
    // big = 5 kilos each
    int numBig = 0;
    int numSmall = 0;
    numBig = goal / 5;
    numSmall = goal % 5;
    int sum = 5 * numBig + numSmall;
    
    if (numSmall > small)
    {
    	return -1;
    }
    else if (sum == goal)
    {
        return numSmall;
    }
    else
    {
        while (sum < goal && numSmall < small)
        {
            sum++;
            numSmall++;
        }
        
        if (goal == sum)
        {
            return numSmall;
        }
        else
        {
            return -1;
        }
            
    }
}
",
c4cd9fb76f3a67d4e774521d2a07bd1fe7cd0b11,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
b05268e4079f92fa8c479a385b128576976d16c9,"public String atFirst(String str)
{
    String result = str.substring(0, 2);
    
    String value = '@';
    
    if (result.length() == 0)
    {
        result.charAt(0) = '@';
        result(1) = '@';
    }
    else if (result.length() == 1)
    {
        result(1) = '@';
    }
    else
    {
        result = result;
    }
    
    return result;
}
",
56cccc5e57b71638ae0f36747e6ae090dc81fe2d,"public int sum67(int[] nums)
{
    int count = 0;
    int seven = 0;
    
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] == 6)
        {
           for (int x = i + 1; x < nums.length; x++)
           {
               if (nums[x] != 7)
               {
                   count = count + 0;
               }
               else if (nums[x] == 7)
               {
                   count = count + 0;
                   i = i + x;
               }
           }
        
        }
        else
        {
        count = count + nums[i];
        }
        // i'm stuck on excluding numbers up till 7.
        // okay, i'm trying to say:
        // when you reach a 6, ignore the 6.
        // then, ignore each number until you reach a 7.
        
        // so perhaps the smarter way to state this is:
        // ahhh maybe a separate int to count 7's?
        
        // i'm thinking in the way the problem is laid out for me, where
        // i'm supposed to ""ignore"" sections of numbers
        
        // maybe just fucking count them all and ignore the ones in between 6 and 7
        
       
        
    }
    
    return count;
}

",
dbbe2c6beeefd93c68c1cf77a6130ed4323b9aa3,"public int countEvens(int[] nums)
{
    int count = 0;
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] % 2 == 0)
        {
            count++;
        }
    }
    return count;
}
",
bbf414c607917bae018f323952576cc4855d0403,"public int[] fix45(int[] nums)
{
    int[] fours = new int [3];
    int[] fives = new int[3];
    int index4=0;
    int index5 = 0;
    for (int i=0; i<nums.length;i++)
    {
        if (nums[i] == 4)
        {
            fours[index4] = i;
            index4++;
        }
        else if (nums[i] == 5)
        {
            fives[index5] = i;
            index5++;
        }
    }
    for (int i = index5-1; i>=0;i--)
    {
        if (nums[fours[i]+1]!=5)
        {
        	nums[fives[i]] = nums[fours[i]+1];
        	nums[fours[i]+1] = 5;
        }
    }
    
    
    
    
    //int start = 0;
    //int skip = -1;
    //for (int i=0; i<nums.length;i++)
    //{
    //    if (nums[i] == 4)
    //    {
    //        for (int j=start; j<nums.length;j++)
   	//		{
    //            if (j!=skip && nums[j]==5)
    //            {
    //                nums[j]=nums[i+1];
    //                nums[i+1]=5;
    //                skip = i+1;
    //                break;
    //            }
    //        }
    //    }
    //}
    return nums;
}
",
3d4c98b74adf52d4ca5fe21febb24b1a8f6a6120,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++) {
        if (nums[i] != val && nums[i + 1] != val) {
            return false;
        }
    }
    return true;
}
",
14ced47f38f6da0c3afcc08c0bcb9ed96b5c73fe,"public String getSandwich(String str)
{
    if (str.indexOf(""bread"") > 0) // if there are two peices of bread
    {
         System.out.print(str.indexOf(""bread""));
        return ""no"";
    }
    else
    {
        return """";
    }
}
",
d3bbd5372c67b93d7e4c5f3425ac793bb5763980,"public int sortaSum(int a, int b)
{
    int sum = a + b;
    if (sum >= 10 && sum <= 19)
        return 20;
    return sum;
}
",
2b92c031167d3664a0be5ab4cee6d5ad678ce824,"public int sum67(int[] nums)
{
    int count = 0;
    int seven = 0;
    
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] == 6)
        {
           for (int x = i; x < nums.length; x++)
           {
               if (nums[x] != 7)
               {
                   count = count + 0;
               }
               else if (nums[x] == 7)
               {
                   count = count + 0;
                   i = i + x;
               }
           }
        
        }
        
        count = count + nums[i];
        // i'm stuck on excluding numbers up till 7.
        // okay, i'm trying to say:
        // when you reach a 6, ignore the 6.
        // then, ignore each number until you reach a 7.
        
        // so perhaps the smarter way to state this is:
        // ahhh maybe a separate int to count 7's?
        
        // i'm thinking in the way the problem is laid out for me, where
        // i'm supposed to ""ignore"" sections of numbers
        
        // maybe just fucking count them all and ignore the ones in between 6 and 7
        
       
        
    }
    
    return count;
}

",
e7b6e4f287f8c6938b8b88652157d73da80ecef9,"public int countClumps(int[] nums)
{
    int count = 0;
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] == nums[i+1])
        {
            count++;
            for (int j = 2; j == nums[i]; j++)
            {
            	i++;
            }
        }
    }
    return count;
}
",
372645503350c2f98b54e8893d8beaf699d30377,"public int greenTicket(int a, int b, int c)
{
 if (a == b || b ==c )
 {
     return 20;
 }
    else if (a == b || a == c || b == c)
    {
        return 10;
        
    }
    else 
    {
        return 0;
    }
}
",
6b538f7d9eac6f8c54cd2c59a699ca73280e0930,"public class FizzArray {

//fizzArray is a method which takes input n and prepares fizzArray

public static int[] fizzArray(int n) {

//initializing integer array with size n

int[] result = new int[n];

for (int i = 0; i < n; i++){

result[i] = i;

}

return result;

}
",
d3ef0716ecf4a8ef9e4bec34fa89d1f94ed95074,"public boolean endOther(String a, String b)
{
    return a.toLowerCase().equals(b.toLowerCase()
}
",
eee0eb76d7c982f7cdbbfb86dbf032940b49e38b,"public int luckySum(int a, int b, int c)
{
    if (a == 13) // if a is equal to 13
        return 0;
    if (b == 13) // if b is equal to 13 go to the a value
        return a;
    if (c == 13) //if c is 13, only add  and b
        return (a + b);
    return (a + b + c); //if none of the others,add all the numbers
}
",
47bcbb118b9820ce001397912cd55ec9c5521a9b,"public int loneSum(int a, int b, int c)
{
    if (a == b)
    {
        if (a == c)
            return 0;
        return c;
    }
    if (a == c)
        return b;
    if (b == c)
        return a;
    return (a + b + c);
}
",
6b9f55c88028fdb9f9e0adbb7f59b28fb9564c5a,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] != val)
        {
            if (i < nums.length - 1)
            {
                if (nums[i + 1] != val)
                {
                    return false;
                }
            }
        }
        
    }
    return true;
}
",
f9d8c1646ba82ba2c6fd76e741d03f0b2865d6b3,"public int[] tenRun(int[] nums)
{
    int target = -1000000;
    for(int i = 0; i < nums.length; i++)
    {
     	if (nums[i] % 10) == 0)
        {
            target = nums[i];
        }
        else 
        {
            if (target != -1000000)
            {
                nums[i] = target;
            }
        }
    }
    return nums;
}
",
dfebf4d3ccb1c45c713e88e11542556ee4a55d1e,"public int[] seriesUp(int n)
{
    int[] result = new int[n * (n + 1)/2];
    int k = 0;
	for(int i = 1; i <= n; i++)
	{
		for(int j = 1; j <= i; j++)
        {
			result[k] = j;
            k++;
        }
	}
    return result;
}
",
21d997dbc1d180fc37f71fb0247cb0ffaa4b9e21,"public String getSandwich(String str)
{
    int first = str.indexOf(""bread"");
    int last = str.lastIndexOf(""bread"");
    if (first == last)
        return """";
    return str.substring(first + 5, last);
}
",
f0965dc5b01333c0db74c3b81e48129583709ad9,"public int sortaSum(int a, int b)
{
    int sum = (a + b);
    if (10 <= sum && sum <= 19)
    {
        return 20;
    }
    return sum;
}
",
ec0734122f4add509acf5c24dba4d8ba253e0c85,"public int roundSum(int a, int b, int c)
{
    a = this.round10(a);
    b = this.round10(b);
    c = this.round10(c);
    
    int sum = a + b + c;
    
    return sum;
}

public int round10(int num)
{
    int remainder = num % 10;
    
    if (remainder >= 5)
    {
        // round up
        num = num + (10 - remainder);
    }
    else
    {
        // round down
        num = num - remainder;
    }
    
    return num;
}
",
b03f6ee58d1c2efbc298c1b090d888a47d5425a9,"public boolean evenlySpaced(int a, int b, int c)
{
    if (b-a <= 1 && c-a >= 2 && c-b >= 2 
        || b-a >= 2 && c-a <= 1 && c-b >=2
        || b-a >=2 && c-a >= 2 && c-b <= 1)
        return true;
    return false;
}
",
c1fdbe3e9fca73de72f1831d00c35304cb29463e,"public int[] fizzArray(int n)
{
    int[] result = new int[n];
    for (int i = 0; i < n; i++)
    {
        result[i] = i;
    }
    return result;
}
",
c1078c51f22bc78bd01e7db2804f323868e76600,"public boolean cigarParty(int cigars, boolean isWeekend)
{
    boolean successful;
    if (cigars >= 40 && cigars <= 60 && !isWeekend)
    {
        return true;
    }
}
",
a641c5efbb7e5f53f92580571992aa0a53d6cdf6,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
948b5b2528e52a0cd157a7b353521353f3da1fef,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
     return (isMom || (!(isAsleep)));

}
",
6bb0ee0ad18b7740337fbdd1e749d82571043674,"public String atFirst(String str)
{
    if (str.length() >= 2)
    {
        return (str.substring(0, 2));
    }
    else if (str.length() == 1)
    {
        return ""@"";
    }
    else
    {
        return ""@@"";
    }
}
",
b7d5d5590bde31e23ee41e67ec8ade069279409e,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    if (isBirthday) speed >= 5;
    if (speed <= 60) return 0;
    return (speed > 60 && speed <= 80) ? 1 : 2;
}
",
44401b7a795caa5e1f94585e15dc8c88bdb84119,"public boolean isEverywhere(int[] nums, int val)
{	
    for (int i = 0; i < nums.length - 1; i++)
    {
        if ( nums[i] != val && nums[i+1] != val)
        {
            return false;
        }
    }
    return true;
}
",
0eefe10c954547a7675d5ee81f88d4d112cf44e9,"public boolean bobThere(String str)
{
    for (int i = 0; i < str.length() - 2; i++) {
        if (str.charAt(i) == 'b' && str.charAt(i + 2) == 'b') {
            return true;
        }
    }
    return false;
}
",
8607bf69df97e865fbab7f3aedd1367fc5b36f34,"public int countCode(String str)
{
	int count = 0;
    for (int i = 0; i < str.length; i++)
    {
        if (str.charAt(i) == ""c"" && str.charAt(i + 1) == ""o"" && str.charAt(i + 3) == ""e"")
        {
            count++;
        }
    }
    return count;
}
",
d3ef0716ecf4a8ef9e4bec34fa89d1f94ed95074,"public boolean endOther(String a, String b)
{
    return a.toLowerCase().equals(b.toLowerCase()
}
",
afec4a1fda7760651e34095e9ceef8a8483018be,"public boolean sameEnds(int[] nums, int n)
{
    
    for (int i = 0; i <= n; i++)
    {
        if (nums[i] != nums[nums.length - n + i - 1])
        {
            return false;
        }
    }
    return true;
}
",
f7613e1314baffe2be7c9164f5586a14e6e82fd6,"public int countCode(String str)
{
    int count = 0;
    for (int i = 0; i < str.length() - 4; i++) {
        if (str.substring(i, i + 1).equals(""co"") && str.charAt(i + 3) == 'e') {
            count++;
        }
    }
    return count;
}
",
556a51f5587711febfedd4c384ada96658e6c8b2,"public boolean in1To10(int n, boolean outsideMode)
{
    int n 
        
    if (n == 1 || n == 2 || n == 3 || n == 4 || n == 5 || n == 6 || n == 7 || n === 8 || n == 9 || n == 10)
    {
        return false;
    }
    if (n <= 1 || n >= 10)
    {
        return true;
    }
}
",
3a8055576f5859b599d0044c3fbabfdaadf99b67,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
    if (isMorning && isMom)
            return true;
    else 
        return false;
}
",
56ac97e6ac311645870c594b750311820db92f19,"public int noTeenSum(int a, int b, int c)
{
    return fixTeen(a) + fixTeen(b) + fixTeen(c);
}

public int fixTeen(int n)
{
    if (n >= 13 && n <= 19 && n != 15 && n != 16)
    {
        n = 0;
}
",
95bc23f4a1f6b717433734c1ec1d9db84c09782c,"public int countEvens(int[] nums)
{
    int i = 0;
    for (int number: nums)
    {
        if (number % 2 == 0)
        {
            i++;
        }
    }
    return i;
}
",
8f6dbd26c957f489904930b7ed0aa2950cd254af,"public String repeatEnd(String str, int n)
{
    String repeat = str.substring(str.length() - n);
    for (int i = 1; i < n; i++)
        //starts with the first letter of the string
    {
        repeat = repeat + str.substring(str.length() - n);
        //gets the part of the word that needs to be returned
    }
    return repeat;
    //returns the string made out of the n repetitions
}
",
dea353e4fa8946278ebcfad2f8039a9f72b55b28,"public int sum3(int[] nums)
{
 return nums[0] + nums[1] + nums[2];   
}
",
d3bbd5372c67b93d7e4c5f3425ac793bb5763980,"public int sortaSum(int a, int b)
{
    int sum = a + b;
    if (sum >= 10 && sum <= 19)
        return 20;
    return sum;
}
",
f5233a608146cd5a8e90ba5efd302bc9caf3f6cd,"public int[] zeroMax(int[] nums)
{
    for (int i = 0; i < nums.length; i ++)
    {
        if (nums[i] == 0)
        {
            nums[i] = this.findMax(nums);
        }
    }
    return nums;

}

public int findMax(int[] nums)
{
    int max = 0;
    for (int i = 0; i < nums.length; i++) 
    {
        if (nums[i] % 2 != 0 && nums[i] > max)
        {
            max = nums[i];
        }
    }
    return max;
}
",
62ce70304358abfdd932378fb6cd7769b980fdc9,"public int noTeenSum(int a, int b, int c)
{
	return fixTeen(a) + fixTeen(b) + fixTeen(c);
}

public int fixTeen(int n)
{
    if (13 <= n && n <= 19)
    {
        if (n != 15 || n != 16)
        {
            n = 0;
        }
        return n;
    }
}
",
c97661988164da1f8f5aa8c8e8227ec76c134a55,"public int greenTicket(int a, int b, int c)
{
    if(a == b)
	{
		if(b == c)
        {
			return 20;
        }
		return 10;
	}
	if(a == c || b == c)
    {
		return 10;
    }
	return 0;
}
",
b25bb0be3214d6ebfc03874ccb1735f374a8c287,"public boolean twoTwo(int[] nums)
{
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] == 2)
        {
            if (nums[i + 1] != 2)
            {
                i++;
                return false;
                
            }
        }
    }
    return true;
}
",
15ffe5d66430bb800dc58952a48cf389ffc1fa85,"public String without2(String str) 
{
    int num = str.length();
    if (num >= 2 && str.substring(0,1).equals(str.substring((num-2), str.substring(num)))
        return str.substring(2,str.length());
    return str;
}
",
372645503350c2f98b54e8893d8beaf699d30377,"public int greenTicket(int a, int b, int c)
{
 if (a == b || b ==c )
 {
     return 20;
 }
    else if (a == b || a == c || b == c)
    {
        return 10;
        
    }
    else 
    {
        return 0;
    }
}
",
dc8066a4ce0e948c3507c575f5e9322070445254,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
    if (!isAsleep) {
        if (isMom || !isMorning) {
            return true;
        }
        return false;
    }
    return false;
}
",
353250dbb0f7d8b1345775c3b7683b3a5c68b0d5,"public int makeChocolate(int small, int big, int goal)
{
    // small = 1 kilo each
    // big = 5 kilos each
    int numBig = 0;
    int numSmall = 0;
    numBig = goal / 5;
    numSmall = goal % 5;
    int sum = 5 * numBig + numSmall;
    
    if (numSmall > small)
    {
    	return -1;
    }
    else if (sum == goal)
    {
        return numSmall;
    }
    else
    {
        while (sum < goal && numSmall < small)
        {
            sum++;
            numSmall++;
        }
        
        if (goal == sum)
        {
            return numSmall;
        }
        else
        {
            return -1;
        }
            
    }
}
",
4791aba74c22070c77e8993946904460afcc092f,"public int luckySum(int a, int b, int c)
{
    int sum = a + b + c;
    if (a = 13)
        sum = 0;
    	return sum;
    if (b = 13)
        sum = a;
    	return sum;
    if (c = 13)
        sum = a + b;
    	return sum;
}
",
e782e855c718d5d72eb1c47b31cc0c9050d6b269,"public String without2(String str) 
{
    // Given a string, if a length 2 substring appears at both its beginning and end,
// return a string without the substring at the beginning, so ""HelloHe"" yields ""lloHe"".
// The substring may overlap with itself, so ""Hi"" yields """". Otherwise, return the original string unchanged.
public String without2(String str)
{
	int len = str.length();
	if(len >= 2)
	{
		if(str.substring(0,2).equals(str.substring(len-2, len)))
			return str.substring(2);
		else
			return str;
	}
	else
		return str;
}
}
",
eee0eb76d7c982f7cdbbfb86dbf032940b49e38b,"public int luckySum(int a, int b, int c)
{
    if (a == 13) // if a is equal to 13
        return 0;
    if (b == 13) // if b is equal to 13 go to the a value
        return a;
    if (c == 13) //if c is 13, only add  and b
        return (a + b);
    return (a + b + c); //if none of the others,add all the numbers
}
",
a2ef5d82ffeb0d2c874c95de31b9ca6d0e3da825,"public String repeatEnd(String str, int n)
{ 	
    String res=str.substring(str.length()-n);//n = 0 return null or exception?
    for(int i=1;i<n;i++)
    {		// String res?
            res=res+str.substring(str.length()-n);
    return res;
    }
}
",
71d268cab1e5b5629eb35d8e729c7c8880965509,"public int countEvens(int[] nums)
{
    for (int count=0; count < nums.length; count++) {
  if (nums[count] % 2 == 0)
  even++;
  }
  return even;

}
",
e9e6ae885d3fb08ed2cdefd2d01fd8f4727bab1b,"public String without2(String str) 
{
    int num = str.length();
    if (num >= 2 && str.substring(0,1) .equals (str.substring(num-2), str.substring(num)))
        return str.substring(2,str.length());
    return str;
}
",
c5aebb4151a6c14d6fb00ca52ff6164ceb64474b,"public int noTeenSum(int a, int b, int c)
{
    return fixTeen(a) + fixTeen(b) + fixTeen(c);
}

public int fixTeen(int n)
{
    return (n &gt;= 13 &amp;&amp; n &lt; 15 || n &gt; 16 &amp;&amp; n &lt;= 19) ?
        0 : n;
}
",
54f16f3c5196c9d23444381409e354f9fae465c0,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
d822cf12d38ea28fe825ff4fc14fdc94e6719f05,"public boolean bobThere(String str)
{
    int i = 0;
    char[] CharArray = str.toCharArray();
    for(char cha : CharArray){
    	if (cha == 'b'){
        	if (str[i + 2] == 'b'){
            	return true;
            }
        }
     	i++;
    }
    return false;
}
",
98b41121a7f0c87d5746dc0ae2746596c4a8bb37,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
ba64e188a7ff94c5ca147732e34becd1b2436677,"public String atFirst(String str)
{
    String result = str.substring(0, 2);
    
    return result;
}
",
3d4c98b74adf52d4ca5fe21febb24b1a8f6a6120,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++) {
        if (nums[i] != val && nums[i + 1] != val) {
            return false;
        }
    }
    return true;
}
",
8f6dbd26c957f489904930b7ed0aa2950cd254af,"public String repeatEnd(String str, int n)
{
    String repeat = str.substring(str.length() - n);
    for (int i = 1; i < n; i++)
        //starts with the first letter of the string
    {
        repeat = repeat + str.substring(str.length() - n);
        //gets the part of the word that needs to be returned
    }
    return repeat;
    //returns the string made out of the n repetitions
}
",
cf50e456db1821c67d784b4596db0e3038f70941,"public boolean isEverywhere(int[] nums, int val)
{
//    for (int i = 0; i < nums.length; i++)
//    {
  //   	if (nums[i] != val || nums[i++] != val)
    //    {
      //      return false;
        //}
    //}
    //return true;
boolean result = true;
for (int i = 0; i <=nums.length-2;i++)
{
	if ( nums[i] != val && nums[i+1] != val)
	result = false;
}
return result;
}
",
3da6d13c5e129585a85f09cc153cb57358bb6316,"public String without2(String str) 
{
    if (str.length() >= 2)
    {
        if (str.substring(0,2).equals(str.substring(str.length() - 2)))
        {
            return str.substring(2);
            // if the two letters at the beginning of the word and at the end of the word are equal to each other, the string will returned with these two letters
        }
        else
        {
            return str;
            // if the two letters are not equal to each other, then the original string will be returned
        }
    }
    else
    {
        return str;
        //if the word is only two letters or less, it will return the original string 
    }
}
",
dbbe2c6beeefd93c68c1cf77a6130ed4323b9aa3,"public int countEvens(int[] nums)
{
    int count = 0;
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] % 2 == 0)
        {
            count++;
        }
    }
    return count;
}
",
6d62699ce20db7e91bf9a9c10e2cc7b3850ad892,"public int[] tenRun(int[] nums)
{
    for (int i - 0; i < nums.length; i++)
    {
    	if nums[i] % 10 == 0
        {
        	for (int j = i + 1; j < nums.length &&
                 !(nums[j] % 10 == 0); j++)
        	{
        		nums[j] = nums[i];
        	}   	  
        }
        return nums;
    }
}
",
d3bbd5372c67b93d7e4c5f3425ac793bb5763980,"public int sortaSum(int a, int b)
{
    int sum = a + b;
    if (sum >= 10 && sum <= 19)
        return 20;
    return sum;
}
",
44401b7a795caa5e1f94585e15dc8c88bdb84119,"public boolean isEverywhere(int[] nums, int val)
{	
    for (int i = 0; i < nums.length - 1; i++)
    {
        if ( nums[i] != val && nums[i+1] != val)
        {
            return false;
        }
    }
    return true;
}
",
4465ac2e7e70f3ac5ddbd490bd262cc0c4f6249d,"public int[] frontPiece(int[] nums)
{
    int [] grid = new int[2];
    
    // establish logi for checking nums.
    // add the proper elements of nums into a new array 
    if (nums.length == 1)
    {
        return grid[0] = nums[0];
    }
    else if (nums.length == 0)
    {
        return grid;
    }
    else
    {
        grid[0] = nums[0];
        grid[1] = nums[1];
        return grid[];
    }
}
",
4951e3e93960ed4399945d8a349ac025dd9fc00d,"public int sortaSum(int a, int b)
{
    int sum = a + b;
    if (sum >= 10 && sum<= 19)
    {
     	sum = 20;   
    }
    return sum;
}
",
63bc9b6a7e3b8866c3ea0d84d282e25f9716e838,"public String mixString(String a, String b)
{
    String result = """"; 
    int index = 0;
    
    if (a.length() >= b.length()) {
        index = b.length(); 
    }
    if (a.length() <= b.length()) {
        index = a.length(); 
    }
    for (int i = 0; i < index; i++) {
        result += a.substring(i, i + 1) + b.substring(i, i + 1);
    }
    if (a.length() < b.length()) {
        result += b.substring(a.length(), b.length()); 
    }
    if (a.length() > b.length()) {
        result += a.substring(b.length(), a.length()); 
    }
    return result; 
}
",
e05151e763b22c6322f72dd9558578b0970a10d6,"public boolean canBalance(int[] nums)
{
    double sum = 0;
    for (int n : nums) {
        sum += n;
    }
    
    double target = sum / 2;
    sum = 0;
    
    for (int i : nums) {
        sum += i;
        if (sum == target) {
            return true;
        }
    }
    return false;
}
",
948b5b2528e52a0cd157a7b353521353f3da1fef,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
     return (isMom || (!(isAsleep)));

}
",
eb9d1e97323f6c0c1410dd8ae35aa261280fc389,"public boolean endOther(String a, String b)
{
    a = a.toLowerCase();
    b = a.toLowerCase();
    return(a.endsWith(b) || b.endsWith(a));
    
    
}
",
f0965dc5b01333c0db74c3b81e48129583709ad9,"public int sortaSum(int a, int b)
{
    int sum = (a + b);
    if (10 <= sum && sum <= 19)
    {
        return 20;
    }
    return sum;
}
",
e1377201338b35fe171b9444b54cc7c825b47de7,"public int greenTicket(int a, int b, int c)
{
    if (a == b && b == c) //if two numbers are the same
        return 20;
    if (a == b || a == c || b == c) //if all the numbers are the same
        return 10;
    else //none of the numbers are the same
        return 0;
}
",
0808dca8b4a525f8b42f6b75f66b3b1d93c3c6cc,"public int sum13(int[] nums)
{
    int sum = 0;
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] != 13 && nums[i - 1] != 13)
        {
            sum += nums[i];
        }
    }
    return sum;
}
",
a3cfe4acc0878f7a98ccbc168df9dff28266dbd7,"public int[] frontPiece(int[] nums)
{
    int [] grid = new int[2];
    
    // establish logi for checking nums.
    // add the proper elements of nums into a new array 
    if (nums.length == 1)
    {
        return grid[0] = nums[0];
    }
    else if (nums.length == 0)
    {
        return grid;
    }
    else
    {
        return grid[nums[0], nums[1]];
    }
}
",
f1f0a6448bfe3ad005796a40633fc50d6ffa6023,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
d3bbd5372c67b93d7e4c5f3425ac793bb5763980,"public int sortaSum(int a, int b)
{
    int sum = a + b;
    if (sum >= 10 && sum <= 19)
        return 20;
    return sum;
}
",
8fb500466613a34013f0592cc334f444d8a2780d,"public int countClumps(int[] nums)
{
    int num = 0;
    int clumps = 0;
    Boolean clump = false;
    for (int i = 0; i < nums.length; i++)
    {
        num = nums[i];
        while (nums[i] == nums[i + 1])
        {
            i++
        }
        if (clump == true)
        {
            clumps++;
            clump = false;
        i--;
    }
}
",
c4cd9fb76f3a67d4e774521d2a07bd1fe7cd0b11,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
3d89f76d27956de3a51e53f7ba12c5aa1fc7e352,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
    if (isMorning && isMom && isAsleep)
        return true;
    if (isMorning && !isMom && !isAsleep)
        return false;
    if (isMorning && isMom && !isAsleep)
        return false;
    return false;    
}
",
d3745baab3910b6b855000797454d3c32c533553,"public String atFirst(String str)
{
    if (str.length() < 2)
    {
        return (str.substring(0,1) + ""@"");
    }
    return (str.substring(0, 2));
}
",
1246d82dc38af3da4d77890172a9d1890cc382a1,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
faa6cc44696d72e0fa85cc561584a1de159a4aa5,"public int dateFashion(int you, int date)
{
    if (you <= 2 || date <= 2)
        return 0;
    if (you >= 8 || date >= 8)
        return 2;
    return 1;
}
",
b25bb0be3214d6ebfc03874ccb1735f374a8c287,"public boolean twoTwo(int[] nums)
{
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] == 2)
        {
            if (nums[i + 1] != 2)
            {
                i++;
                return false;
                
            }
        }
    }
    return true;
}
",
98b41121a7f0c87d5746dc0ae2746596c4a8bb37,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
bbe06fdc5184357ca1c3d215ff4af4bf9eb1cc28,"public int countCode(String str)
{
    int number = 0;
    for (int i = 0; i < str.length() - 3; i++)
    {
        if (str.charAt(i) == 'c' && str.charAt(i + 1) == 'o' && str.charAt(i + 3) == 'e') //first 2 letters are 'co' and the last letter is 'e'
        {
            number++;
        }
    }
    return number;
}
",
b02997d91fd09f8bee8d42b148052543fc339026,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    if (isBirthday)
    {
        speed = speed - 5;
    }
    
    if (speed <= 60)
    {
        return 0;
    }
}
",
8320e574f1b2963b87989be8f9ea952fbd5ed290,"public int sortaSum(int a, int b)
{
    int sum;
    if (sum >= 10 && sum <= 20)
    {
     	return 20;   
    }
    else
    {
     	return sum;   
    }
}
",
a948531c5f36b52d18c23067a3df3f2438fc7b3c,"public int[] frontPiece(int[] nums)
{
    int[] first2;
    for (int i=0; i < 2 && i < nums.length; i++)
    {
        first2.add(nums.get(i));
    }
    return first2;
}
",
e05151e763b22c6322f72dd9558578b0970a10d6,"public boolean canBalance(int[] nums)
{
    double sum = 0;
    for (int n : nums) {
        sum += n;
    }
    
    double target = sum / 2;
    sum = 0;
    
    for (int i : nums) {
        sum += i;
        if (sum == target) {
            return true;
        }
    }
    return false;
}
",
d2c95cc934b9c8ce35e6b24839b253627b9a7c8c,"public int[] shiftLeft(int[] nums)
{
    if (nums.length >= 2)
    {
        int shift = num[0];
        for (int i = 0; i < nums.length - 1; i++)
        {
            nums[i] = nums[i + 1];
        }
        nums[nums.length - 1] = shift;
    }
    return nums;
}
",
324744e665f46a82492205626535ae0a59adced1,"public int countEvens(int[] nums)
{
    int count = 0;
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] % 2 == 0)
        {
            count++;
        }
    }
    return count;
}
",
54f16f3c5196c9d23444381409e354f9fae465c0,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
4eb6382872b95c713ee9b9ee3717c152840acf5e,"public int[] zeroMax(int[] nums)
{
    int[] numArray;
    for(int i : nums)
    {
        if (nums[i] == 0)
        {
            nums[i] = largestOdd(i, nums);
        }
    }
    return numArray;
}

public int largestOdd(int position, int[] nums2)
{
    int biggestOdd = 0
    for (int i = position; i < nums2.length; i++)
    {
        if (nums2[i] % 2 == 1 && nums2[i] > biggestOdd)
        {
            biggestOdd = nums2[i];
        }
    }
    return biggestOdd;
}",
c5b678ff310e1ddb50d0866291cc960abdb63560,"public int[] fix45(int[] nums)
{
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] == 4)
        {
            for (int j = 1; j <= nums.length; j++)
            {
                if (i + j < nums.length)
                {
                    if (nums[i + j] == 5)
                    {
                        nums[i + j] = nums[i + 1];
                        nums[i + 1] = 5;
                        break;
                    }                  
 
                }
                if (i - j >= 0)
                {
                    if (nums[i - j] == 5)
                    {
                        nums[i - j] = nums[i + 2];
                        nums[i + 1] = 5;
                        break;
                    }  
                }
            }
        }
    }
    return nums;
}
",
c80cbf206a19a4ae8b3792d3f4b4c3252c0e3b34,"public int[] fizzArray(int n) {

    int[] result = new int[n];

    for (int i = 0; i < n; i++)

        result[i] = i;

    return result;

}
",
ec0734122f4add509acf5c24dba4d8ba253e0c85,"public int roundSum(int a, int b, int c)
{
    a = this.round10(a);
    b = this.round10(b);
    c = this.round10(c);
    
    int sum = a + b + c;
    
    return sum;
}

public int round10(int num)
{
    int remainder = num % 10;
    
    if (remainder >= 5)
    {
        // round up
        num = num + (10 - remainder);
    }
    else
    {
        // round down
        num = num - remainder;
    }
    
    return num;
}
",
37483792e65efa307aab5d74a47b4a1dbe36e195,"public boolean bobThere(String str)
{
    //int firstB = str.indexOf(""b"");
   // int secondB = str.lastIndexOf(""b"");
    //if (secondB == firstB + 2)
    //    return true;
   // return false;
    for (int n == 0; n < str.length(); n++)
    {
        if ((str.charAt(n) == str.indexOf(""b"") && (str.charAt(n + 2) == str.indexOf(""b"", n))
        {
            return true;
        }
                
    }//end for loop
    return false;
}
",
e7b6e4f287f8c6938b8b88652157d73da80ecef9,"public int countClumps(int[] nums)
{
    int count = 0;
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] == nums[i+1])
        {
            count++;
            for (int j = 2; j == nums[i]; j++)
            {
            	i++;
            }
        }
    }
    return count;
}
",
9c1b24f0268b9d5238feaf59114da5d3b827e88f,"public boolean bobThere(String str)
{
    for (int i = 0; i < str.length() - 2; i++) 
    {
    if (str.charAt(i) == 'b' && str.charAt(i + 2) == 'b')
    {
        return true;
    }
    }
    return false;
}
",
14ced47f38f6da0c3afcc08c0bcb9ed96b5c73fe,"public String getSandwich(String str)
{
    if (str.indexOf(""bread"") > 0) // if there are two peices of bread
    {
         System.out.print(str.indexOf(""bread""));
        return ""no"";
    }
    else
    {
        return """";
    }
}
",
8b2f2240b040ccff48ec7c89647d89e57b34ca88,"public boolean has77(int[] nums)
{
    for ( int i = 0; i < nums.length - 2; i++ ) {
        if ( nums[i] == 7 ) {
            if ( nums[i + 1] == 7 || nums[i + 2] == 7 ) {
                return true;
            }    
        }
    }
    if ( nums[nums.length - 2] == 7 && nums[nums.length - 1] == 7 )
    {
        return true;
    }
    return false;
}
",
bb95327d0292272d65dd996e6aa6f61c87319399,"public boolean endOther(String a, String b)
{
    if a.length() == ""a"" + ""b""
        return b.substring(0,1).toLowerCase();
}
",
cfc6cb87b23f11a2f4bbbf92a708643e8012b8fb,"public int countEvens(int[] nums)
{	
    int count = 0;
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] % 2 == 0))
        {
            count++;
        }
    }
    return count;
}
",
3d4c98b74adf52d4ca5fe21febb24b1a8f6a6120,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++) {
        if (nums[i] != val && nums[i + 1] != val) {
            return false;
        }
    }
    return true;
}
",
CodeStateID,Code,
9f76f502536b5caf05e00e7133cb3aa0cc6027d4,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    if (isBirthday)
     speed -=5;
    if (speed <= 60)
        return 0;
    else if (speed <= 80)
        return 1;
    else
        return 2;
    
}
",
3775e7869a17ff36825273ea16d9832eedb6471a,"public int dateFashion(int you, int date)
{
   if (you >= 8 && date >= 8)
   {
       return 2;
   }
    

    
   else if (you <= 2 || date <= 2)
   {
       return 0;
   }
    
    return 1;
}
",
f0c481a9e07c60bea12e78a5079713f14b24c2a9,"public int blackjack(int a, int b)
{
    if(b > 21 && a < 21)
        return a;
    if(a>21 && b < 21)
        return b;
    if(a > b)
        return a;
    if (b > a)
        return a;
    return 0;
}
",
6ccaf37a8d9757fc57014287316ecd9409820fe7,"public int sortaSum(int a, int b)
{
    int sum = a + b;
    
    if (sum >= 10 || sum <= 19)
        return 20;
    else
        return sum;
    
}
",
e444710aa658e2dde4799f8965284cd20bc98f6a,"public int countEvens(int[] nums)
{
    for (int count=0; count < nums.length; count++) {
        int even = 0;
  if (nums[count] % 2 == 0)
  even++;
  }
  return even;
}
",
cc77cf7675005a0bdbc9fe76c75879f1ad156087,"public int redTicket(int a, int b, int c)
{
    if (a == 2 & b == 2 & c == 2) 
        return 10;
    else if (a == b && b == c)
        return 5;
    else if (b == c)
        return 1;
    return 0;
    
}
",
08fa5ac960d3ab8ef2af29ef9f42e5d116bda6bf,"public int sum3(int[] nums)
{
    int sum = 0;
    
    for (int number : nums)
    {
        sum = sum + number;
    }
     return sum;   
}
",
4f020dcb2ebec419aa94d431533df15542e537ec,"public boolean in1To10(int n, boolean outsideMode)
{
    if (outsideMode)
    {
    	if (n == 1 || n == 2 || n == 3 || n == 4 || n == 5 || n == 6 || n == 7 || n == 8 || n == 9 || n == 10)
    {
        return false;
    }
    if (n <= 1 || n >= 10)
    {
        return true;
    }  
    }
    if (n == 1 || n == 2 || n == 3 || n == 4 || n == 5 || n == 6 || n == 7 || n == 8 || n == 9 || n == 10)
    {
        return true;
    }
    if (n <= 1 || n >= 10)
    {
        return false;
    }  
    return false;
}
",
db19ea5f1cabdb8d39c12a6acfc593bd85bf4f95,"public int[] tenRun(int[] nums)
{
    for (int i = 0; i < nums.length; i++)
    {
    	if (nums[i] % 10 == 0)
    	{
     	   for (int j = i + 1; j < nums.length && nums[j] % 10 != 0; j++)
           {
            	nums[j] = nums[i];   
           }
    	}
    }
    return nums;
}
",
7ee540611323a35160a97c8f3d841b30ffcc0e49,"public int sum3(int[] nums)
{
    int sumOfArray = 0;
    for (int i : nums)
    {
        sumOfArray += i;
    }
    return sumOfArray;
}
",
556a51f5587711febfedd4c384ada96658e6c8b2,"public boolean in1To10(int n, boolean outsideMode)
{
    int n 
        
    if (n == 1 || n == 2 || n == 3 || n == 4 || n == 5 || n == 6 || n == 7 || n === 8 || n == 9 || n == 10)
    {
        return false;
    }
    if (n <= 1 || n >= 10)
    {
        return true;
    }
}
",
c32e8df18759f85c9ca9cc1ff3051aa396bf5a33,"public boolean evenlySpaced(int a, int b, int c)
{
    int[3] arrInOrder;
    arrInOrder[0] = a;
    arrInOrder[1] = b;
    arrInOrder[2] = c;
    
    int small;
    int med, big;
   /**
    if ((a > b) && (a > c)) // if a is the biggest
   {
		if (b > c)
        {
            big = a;
            med = b;
            small = c;
        }
       else
       {
           
       }
       
   }
   */
}
",
4ab93bf88b80fa76f8c7c6f5499d40a451e7e897,"public boolean great; 

public boolean love6(int a, int b)
{
    Math.abs(a, b);
}
",
b02997d91fd09f8bee8d42b148052543fc339026,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    if (isBirthday)
    {
        speed = speed - 5;
    }
    
    if (speed <= 60)
    {
        return 0;
    }
}
",
58f8f141073ae3a1ee18e35d8cdf6ef297f50f94,"public int redTicket(int a, int b, int c)
{
    if (a == b && b == c && a == 2)
    {
        return 10;
    }
    else if (a == b && b == c)
    {
        return 5;
    }
    else if (b == c)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}
",
bb95327d0292272d65dd996e6aa6f61c87319399,"public boolean endOther(String a, String b)
{
    if a.length() == ""a"" + ""b""
        return b.substring(0,1).toLowerCase();
}
",
3d4c1103cc1b9f1262e0e2e77865c91089068160,"public boolean canBalance(int[] nums)
{
    int sum1 = 0;
    for (int = 0; i < nums.length / 2; i++)
    {
        sum1 = sum1 + nums[i];
    }
    int sum2 = 0;
    for (int j = nums.length / 2; j < nums.length; j++)
    {
        sum2 = sum2 + nums[j]
    }
	return sum1 = sum2;
}",
4ba46181a66bb2f3cf45d38876db8736b1ebda46,"public boolean in1To10(int n, boolean outsideMode)
{
    return ((n >= 1 && n<=10 && !outsideMode) || (n > 10 || n < 1 && outsideMode));
}
",
b716d157ac664292fc299cd0d52fb5af40deb1e6,"public String atFirst(String str)
{
    if (str.length() == 1)
    {
        return str + ""@"";
    }
    if (str.length() == 0)
    {
        return ""@@"";
    }
    else
    {
        return str.substring(0, 2);
    }
        
}
",
e2468a1fbac0f816c4df8538f0af6626551638b0,"public int redTicket(int a, int b, int c)
{
    if (a == 2 & b == 2 & c == 2) 
        return 10;
    else if (a == b && b == c)
        return 5;
    else if (b == c)
        return 1;
    return 0;
    
}
",
b18357d08d239c3169eb42bdabc04d80a3bba5bf,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
    if (isAsleep) 
    {
        return false;
    }
    if (isMorning && !isMom) 
    {
        return false;
    }
    return true;
}
",
dea353e4fa8946278ebcfad2f8039a9f72b55b28,"public int sum3(int[] nums)
{
 return nums[0] + nums[1] + nums[2];   
}
",
217727d1f14f216248eece014e54d93c9ec2a75d,"public int[] zeroMax(int[] nums)
{
    int largestOdd = 0;
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] % 2 != 0)
        {
            largestOdd = nums[i];            
        }
    }
    
    boolean foundNumberRight = false;
    for (int i = nums.length; i <= 0; i++)
    {
        if (nums[i] == largestOdd)
        {
            foundNumberRight = true;
        }
        
        if (foundNumberRight && nums[i] == 0)
        {
            nums[i] = largestOdd;
        }
    }
    
    return nums;

}

",
ba64e188a7ff94c5ca147732e34becd1b2436677,"public String atFirst(String str)
{
    String result = str.substring(0, 2);
    
    return result;
}
",
8fb500466613a34013f0592cc334f444d8a2780d,"public int countClumps(int[] nums)
{
    int num = 0;
    int clumps = 0;
    Boolean clump = false;
    for (int i = 0; i < nums.length; i++)
    {
        num = nums[i];
        while (nums[i] == nums[i + 1])
        {
            i++
        }
        if (clump == true)
        {
            clumps++;
            clump = false;
        i--;
    }
}
",
fd19ee70b6ed78dc3c5cf345b006e41ad230749d,"public int redTicket(int a, int b, int c)
{
    if (a == 2 & b == 2 & c == 2) 
        return 10;
    else if (a == b && b == c)
        return 5;
    else if (b == c)
        return 1;
    return 0;
    
}
",
bbf414c607917bae018f323952576cc4855d0403,"public int[] fix45(int[] nums)
{
    int[] fours = new int [3];
    int[] fives = new int[3];
    int index4=0;
    int index5 = 0;
    for (int i=0; i<nums.length;i++)
    {
        if (nums[i] == 4)
        {
            fours[index4] = i;
            index4++;
        }
        else if (nums[i] == 5)
        {
            fives[index5] = i;
            index5++;
        }
    }
    for (int i = index5-1; i>=0;i--)
    {
        if (nums[fours[i]+1]!=5)
        {
        	nums[fives[i]] = nums[fours[i]+1];
        	nums[fours[i]+1] = 5;
        }
    }
    
    
    
    
    //int start = 0;
    //int skip = -1;
    //for (int i=0; i<nums.length;i++)
    //{
    //    if (nums[i] == 4)
    //    {
    //        for (int j=start; j<nums.length;j++)
   	//		{
    //            if (j!=skip && nums[j]==5)
    //            {
    //                nums[j]=nums[i+1];
    //                nums[i+1]=5;
    //                skip = i+1;
    //                break;
    //            }
    //        }
    //    }
    //}
    return nums;
}
",
71d268cab1e5b5629eb35d8e729c7c8880965509,"public int countEvens(int[] nums)
{
    for (int count=0; count < nums.length; count++) {
  if (nums[count] % 2 == 0)
  even++;
  }
  return even;

}
",
6d72f5b621649af66f06d05181162fe55168a76e,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    if (isBirthday == true)
    {
        speed = speed - 5;
    }
}
",
d3bbd5372c67b93d7e4c5f3425ac793bb5763980,"public int sortaSum(int a, int b)
{
    int sum = a + b;
    if (sum >= 10 && sum <= 19)
        return 20;
    return sum;
}
",
1129ef37162a6b236aba63fdc6b01dbc55e8c4c0,"public String getSandwich(String str)
{
    int startBread = str.indexOf(""bread"");
    int endBread = str.lastIndexOf(""bread"");
	boolean firstBread = str.startsWith(""bread"", startBread);
    boolean lastBread = str.startsWith(""bread"", endBread);
    if (firstBread == true && lastBread == true)
    {
        return str.substring(startBread, endBread);
    }
    else 
    {
        return """";
    }
}
",
33e1684529896667b663d935101657bf9205ef10,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] != val && nums[i + 1] != val)
            return false;
    }
    return true;
}
",
faa6cc44696d72e0fa85cc561584a1de159a4aa5,"public int dateFashion(int you, int date)
{
    if (you <= 2 || date <= 2)
        return 0;
    if (you >= 8 || date >= 8)
        return 2;
    return 1;
}
",
2dec94789ad2db07905f14995eddc4d0c9fb74f2,"public int makeChocolate(int small, int big, int goal)
{
    if ((small + big * 5) < goal)
    {
     	return -1;   
    }
    int smallLeftOver = goal - big * 5;
    /*if (smallLeftOver <= 0)
    {
     	return 0;   
    }*/
    if (big * 5 > goal)
    {
     	return goal % 5;   
    }
    else 
    {
     	return smallLeftOver;   
    }
}
",
0be714e6700cd5ad89ad8f1e30daf5c0dc2f6a03,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length; i++)
    {
    	if (nums[i] != val || nums[i+1] != val)
        {
        	return false;
        }

    }
	return true;
}
",
a730369051672c668c3efc03eb8dcc6956e9beb3,"public int[] withoutTen(int[] nums)
{
    int[] arr = new int[nums.length];
	int p = 0;
	for(int i = 0; i < nums.length; i++)
	{
		if(nums[i] != 10)
		{
			arr[p] = nums[i];
			p++;
		}
	}
	// Java arrays are initialized to 0 so no need to set the last elements to 0
	return arr;
}
",
fdd9c7578eae0199293f5c67050555c877e59579,"public int centeredAverage(int[] nums)
{
    int max = nums[0];
    int min = nums[0];
    int sum = 0;
    for(int i = 0; i < nums.length; i++)
    {
        sum += nums[i];
        max = Math.max(max, nums[i]);
        min = Math.min(min, nums[i]);
    }
                           
    return (sum - max - min) / (nums.length - 2);
}
",
3e3f92b5255a315bea19b9efbd3c14567e082ae2,"public String atFirst(String str)
{
    if (length(str) == 0)
    {
        return ""@@"";
    }
    if (str.length(str) == 1)
    {
        return str + ""@"";
    }
    else
    {
        return str.substring(0,2);
    }
    
}
",
fa7e52a8dd82b9e07db5c24a9f6640028d267b37,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] != val && nums[i + 1] != val)
        {
            return false;
        }
    }
    return true;
}
",
96649403e3463cc1c05171bea6b6b5e9d2710fe4,"public boolean isEverywhere(int[] nums, int val)
{
//    for (int i = 0; i < nums.length; i++)
//    {
  //   	if (nums[i] != val || nums[i++] != val)
    //    {
      //      return false;
        //}
    //}
    //return true;
    
    for (int i = 0; i <=nums.length-2;i++)

{

if ( nums[i] != val && nums[i+1] != val)

result = false;

}

  return result;

}
",
7ad991a24edd45eac9dde28ce5f6b6a462d3b44f,"public String without2(String str) 
{
    String endLetters;
    endLetters = str.substring(str.length() - 1, str.length()); // I don't know how many letters there are!!
    // ^ use a method that gets the length of a string. Use "".getLength - 1"" and ""- 2?""
    String startLetters;
    startLetters = str.substring(0, 1);
    
    String middleLetters;
    middleLetters = str.substring(2, str.length() - 3);
        
    if (endLetters == startLetters)
    {
        return middleLetters;
    }
    else 
    {
        return str;
    }
}
",
7862665265faf85e50ada49c030c401c79b4301c,"public boolean sameEnds(int[] nums, int n)
{
    for (int i = 0; i < n; i++)
    {
        if (nums[i] != nums[nums.length - (n - i)])
        {
            return false;
        }
    }
    
    return true;
}
",
b1ffd079f8c4294a66e06ad7d2fb2a7a8fbe7344,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
afec4a1fda7760651e34095e9ceef8a8483018be,"public boolean sameEnds(int[] nums, int n)
{
    
    for (int i = 0; i <= n; i++)
    {
        if (nums[i] != nums[nums.length - n + i - 1])
        {
            return false;
        }
    }
    return true;
}
",
c5aebb4151a6c14d6fb00ca52ff6164ceb64474b,"public int noTeenSum(int a, int b, int c)
{
    return fixTeen(a) + fixTeen(b) + fixTeen(c);
}

public int fixTeen(int n)
{
    return (n &gt;= 13 &amp;&amp; n &lt; 15 || n &gt; 16 &amp;&amp; n &lt;= 19) ?
        0 : n;
}
",
3e52e3a1544f71192d5ae9883005f6c91861bff1,"public int noTeenSum(int a, int b, int c)
{
    return fixTeen(a) + fixTeen(b) + fixTeen(c);
}

public int fixTeen(int n)
{
    switch (n) {
        case 13:
        case 14:
        case 17:
        case 18:
        case 19:
            return 0;
            break;
        default:
            return n;
            break;
    }
    
}
",
21f49c70a5574e177ee0e928d52f7656fb37a03a,"public boolean canBalance(int[] nums)
{
    int same = 0;
    int sum = 0;
    for (int i=0;i<nums.length;i++)
    {
        sum += nums[i];
    }
   
    for (int i=0;i<=nums.length-2;i++)
    {
        same += nums[i];
        sum -= nums[i];
    
    if (same == sum)
    {
        return true;
    }
    }
    return false;
}",
14ced47f38f6da0c3afcc08c0bcb9ed96b5c73fe,"public String getSandwich(String str)
{
    if (str.indexOf(""bread"") > 0) // if there are two peices of bread
    {
         System.out.print(str.indexOf(""bread""));
        return ""no"";
    }
    else
    {
        return """";
    }
}
",
948b5b2528e52a0cd157a7b353521353f3da1fef,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
     return (isMom || (!(isAsleep)));

}
",
b7a794971b30c770d5570accb374dac5104bef0e,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
    if (isMorning && isAsleep)
    {
        return false;
    }
    if (isMom && (!isAsleep) && isMorning)
    {
        return true;
    }
}
",
dea353e4fa8946278ebcfad2f8039a9f72b55b28,"public int sum3(int[] nums)
{
 return nums[0] + nums[1] + nums[2];   
}
",
f1f0a6448bfe3ad005796a40633fc50d6ffa6023,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
f720cc450f616d826f746ce4609c79ab1860b68a,"public int[] fizzArray(int n)
{
    int[] result = new int[n];
        for (int i = 0; i<n.length;i++)
        {
            result[i-1] = i;
        }
    return result;
}
",
3da6d13c5e129585a85f09cc153cb57358bb6316,"public String without2(String str) 
{
    if (str.length() >= 2)
    {
        if (str.substring(0,2).equals(str.substring(str.length() - 2)))
        {
            return str.substring(2);
            // if the two letters at the beginning of the word and at the end of the word are equal to each other, the string will returned with these two letters
        }
        else
        {
            return str;
            // if the two letters are not equal to each other, then the original string will be returned
        }
    }
    else
    {
        return str;
        //if the word is only two letters or less, it will return the original string 
    }
}
",
e87542225324deb36fc5891405e6401d53aab2a3,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    if (isBirthday)
    {
        speed -= 5;
    }
    if (speed=<60)
    {
        return 0;
    }
    if (speed>=61 && speed<= 80)
    {
        return 1;
    }
    if (speed>=81)
    {
        return 2;
    }
}
",
e05151e763b22c6322f72dd9558578b0970a10d6,"public boolean canBalance(int[] nums)
{
    double sum = 0;
    for (int n : nums) {
        sum += n;
    }
    
    double target = sum / 2;
    sum = 0;
    
    for (int i : nums) {
        sum += i;
        if (sum == target) {
            return true;
        }
    }
    return false;
}
",
4ba46181a66bb2f3cf45d38876db8736b1ebda46,"public boolean in1To10(int n, boolean outsideMode)
{
    return ((n >= 1 && n<=10 && !outsideMode) || (n > 10 || n < 1 && outsideMode));
}
",
745f12119fb1eefe0979dda6203e5cf8a5febee0,"public String getSandwich(String str)
{
    int firstBread = str.indexOf(""bread"");
    int lastBread = str.lastIndexOf(""bread"");
    if (firstBread > -1 && lastBread > -1)
        return str.substring(firstBread, lastBread);
    else
        return """"
}
",
44401b7a795caa5e1f94585e15dc8c88bdb84119,"public boolean isEverywhere(int[] nums, int val)
{	
    for (int i = 0; i < nums.length - 1; i++)
    {
        if ( nums[i] != val && nums[i+1] != val)
        {
            return false;
        }
    }
    return true;
}
",
bbe06fdc5184357ca1c3d215ff4af4bf9eb1cc28,"public int countCode(String str)
{
    int number = 0;
    for (int i = 0; i < str.length() - 3; i++)
    {
        if (str.charAt(i) == 'c' && str.charAt(i + 1) == 'o' && str.charAt(i + 3) == 'e') //first 2 letters are 'co' and the last letter is 'e'
        {
            number++;
        }
    }
    return number;
}
",
1f6201b823d05481c7b79d4542ad1f25dffb18c5,"public int centeredAverage(int[] nums)
{
    int sum = 0;
    int min = nums[0];
    int max = nums[0];
         
    for(int i = 0; i < nums.length; i++) {
        sum += nums[i];
        min = Math.min(min, nums[i]);
        max = Math.max(max, nums[i]);
    }
                           
    return (sum - min - max) / (nums.length - 2);
}
",
eb9d1e97323f6c0c1410dd8ae35aa261280fc389,"public boolean endOther(String a, String b)
{
    a = a.toLowerCase();
    b = a.toLowerCase();
    return(a.endsWith(b) || b.endsWith(a));
    
    
}
",
33e1684529896667b663d935101657bf9205ef10,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] != val && nums[i + 1] != val)
            return false;
    }
    return true;
}
",
1ac085374f785c20ca501ac5939ec5977db8a972,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
    if (isAsleep)
    {
        return false;
    }
    
    if (isMorning)
    {
 		return false;   
    }
    
    return true;
}
",
d3745baab3910b6b855000797454d3c32c533553,"public String atFirst(String str)
{
    if (str.length() < 2)
    {
        return (str.substring(0,1) + ""@"");
    }
    return (str.substring(0, 2));
}
",
987f265fb4f09a7db40586aa6a321d7c612fa526,"public boolean has77(int[] nums)
{
    int count = 0;
    
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] == 7 && nums[i+1] == 7)
        {
            count = 1;
        }
        else if (nums[i] == 7 && nums[i+2] == 7 && i < nums.length - 3)
        {
            count = 1;
        }
    }
    // okay, another approach is to check if there are two 7's.
    // if there are, store their [] as variables
    // if the difference between them is greater than 2, then false
    
    return (count == 1);
}
",
9a762998ef3f0abdaeaa9e34d97d58d792cb6be4,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
    if (isAsleep)
        return false;
    if (isMom)
        return true;
    return (!isMorning);
}
",
863743fea61e06d673131ef705425d4b67d43542,"public int loneSum(int a, int b, int c)
{
    if (a == b)
        return b + c;
    if (b == c)
        return a + c;
    if (a == c)
		return b + c;        
}
",
51cd81eddc2c0304f6f4b44ade4bf6e3c8a6aff8,"public String alarmClock(int day, boolean vacation)
{
    if (day >=1 && day <= 5)
    {
        return vacation ? ""10:00"" : ""7:00"";
    }
    
    else
    {
        return vacation ? ""off"" : ""10:00""
    }

    
}
",
7862665265faf85e50ada49c030c401c79b4301c,"public boolean sameEnds(int[] nums, int n)
{
    for (int i = 0; i < n; i++)
    {
        if (nums[i] != nums[nums.length - (n - i)])
        {
            return false;
        }
    }
    
    return true;
}
",
6ccaf37a8d9757fc57014287316ecd9409820fe7,"public int sortaSum(int a, int b)
{
    int sum = a + b;
    
    if (sum >= 10 || sum <= 19)
        return 20;
    else
        return sum;
    
}
",
b1734b84d9123cc28d3f62e758b480ab26ea8fb9,"public int sortaSum(int a, int b)
{
   int sum = a + b;
   if (sum >= 10 && sum <= 19)
   {
   		return 20; 
   }
   else
   {
   		return sum;
   }
}
",
b18357d08d239c3169eb42bdabc04d80a3bba5bf,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
    if (isAsleep) 
    {
        return false;
    }
    if (isMorning && !isMom) 
    {
        return false;
    }
    return true;
}
",
21e89b678cc68f8c7a4233261dc10576fa87b0ae,"public int[] seriesUp(int n)
{
    int[] result = new int[n * (n + 1)/2];
    if (n == 0)
    {
        return result;
    }
    for	(int i = 1;i <= n; i++)
    {
        for (int a = 1; a <= i; a++)
        {
            result[i + a - 2] = a;
        }
    }
    return result;
}
",
3eb765355b81909fe2778872f22843054944d21a,"public int[] tenRun(int[] nums)
{
    if (nums.length<1)
    {
        return nums;
    }
    int tenn = nums[0];
    for (int i = o: i < nums.length; i++)
    {
        if (tenn % 10 !=0)
        {
            tenn = nums[i];
        }
        if (nums[i] % 10 == 0)
        {
            tenn = nums[i];
        }
        nums[i] = tenn;
    }
    return nums;
}
",
d3bbd5372c67b93d7e4c5f3425ac793bb5763980,"public int sortaSum(int a, int b)
{
    int sum = a + b;
    if (sum >= 10 && sum <= 19)
        return 20;
    return sum;
}
",
f720cc450f616d826f746ce4609c79ab1860b68a,"public int[] fizzArray(int n)
{
    int[] result = new int[n];
        for (int i = 0; i<n.length;i++)
        {
            result[i-1] = i;
        }
    return result;
}
",
c95c93f8d1fa224a7fbbc0fb3c04049e5934f3d4,"public boolean has77(int[] nums)
{
    for (int i = 0; i < nums.length - 1; i ++)
    {
        if (nums[i] == 7 && nums[i+1] == 7)
        {
            return true;
        }
    }
    return false;
    
}
",
c5aebb4151a6c14d6fb00ca52ff6164ceb64474b,"public int noTeenSum(int a, int b, int c)
{
    return fixTeen(a) + fixTeen(b) + fixTeen(c);
}

public int fixTeen(int n)
{
    return (n &gt;= 13 &amp;&amp; n &lt; 15 || n &gt; 16 &amp;&amp; n &lt;= 19) ?
        0 : n;
}
",
56e4dc22fcaa600e70470c4379b993e5425d1fd5,"public boolean bobThere(String str)
{
    if (str.length() < 3)
        {
            return false;
        }
    
    for (int i = 0; i < str.length() - 2; i++)
    {
        if (str.charAt(i) == 'b' && str.charAt(i + 2) == 'b')
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    return bobThere(str);
}
",
eee0eb76d7c982f7cdbbfb86dbf032940b49e38b,"public int luckySum(int a, int b, int c)
{
    if (a == 13) // if a is equal to 13
        return 0;
    if (b == 13) // if b is equal to 13 go to the a value
        return a;
    if (c == 13) //if c is 13, only add  and b
        return (a + b);
    return (a + b + c); //if none of the others,add all the numbers
}
",
b7a794971b30c770d5570accb374dac5104bef0e,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
    if (isMorning && isAsleep)
    {
        return false;
    }
    if (isMom && (!isAsleep) && isMorning)
    {
        return true;
    }
}
",
37483792e65efa307aab5d74a47b4a1dbe36e195,"public boolean bobThere(String str)
{
    //int firstB = str.indexOf(""b"");
   // int secondB = str.lastIndexOf(""b"");
    //if (secondB == firstB + 2)
    //    return true;
   // return false;
    for (int n == 0; n < str.length(); n++)
    {
        if ((str.charAt(n) == str.indexOf(""b"") && (str.charAt(n + 2) == str.indexOf(""b"", n))
        {
            return true;
        }
                
    }//end for loop
    return false;
}
",
2dec94789ad2db07905f14995eddc4d0c9fb74f2,"public int makeChocolate(int small, int big, int goal)
{
    if ((small + big * 5) < goal)
    {
     	return -1;   
    }
    int smallLeftOver = goal - big * 5;
    /*if (smallLeftOver <= 0)
    {
     	return 0;   
    }*/
    if (big * 5 > goal)
    {
     	return goal % 5;   
    }
    else 
    {
     	return smallLeftOver;   
    }
}
",
b02997d91fd09f8bee8d42b148052543fc339026,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    if (isBirthday)
    {
        speed = speed - 5;
    }
    
    if (speed <= 60)
    {
        return 0;
    }
}
",
8dbe6fb15987997ffaf0f07b86943c0bcb2846fb,"public String alarmClock(int day, boolean vacation)
{
    if (vacation)
    {
        if (day != 0 || day != 6)
        {
            return ""10:00"";
        }
        else
        {
            return ""off"";
        }
    }
	else
    {
        if (day != 0 || day != 6)
        {
            return ""7:00"";
        }
        else
        {
            return ""10:00"";
        {
    }


",
bbe06fdc5184357ca1c3d215ff4af4bf9eb1cc28,"public int countCode(String str)
{
    int number = 0;
    for (int i = 0; i < str.length() - 3; i++)
    {
        if (str.charAt(i) == 'c' && str.charAt(i + 1) == 'o' && str.charAt(i + 3) == 'e') //first 2 letters are 'co' and the last letter is 'e'
        {
            number++;
        }
    }
    return number;
}
",
51cd81eddc2c0304f6f4b44ade4bf6e3c8a6aff8,"public String alarmClock(int day, boolean vacation)
{
    if (day >=1 && day <= 5)
    {
        return vacation ? ""10:00"" : ""7:00"";
    }
    
    else
    {
        return vacation ? ""off"" : ""10:00""
    }

    
}
",
c5aebb4151a6c14d6fb00ca52ff6164ceb64474b,"public int noTeenSum(int a, int b, int c)
{
    return fixTeen(a) + fixTeen(b) + fixTeen(c);
}

public int fixTeen(int n)
{
    return (n &gt;= 13 &amp;&amp; n &lt; 15 || n &gt; 16 &amp;&amp; n &lt;= 19) ?
        0 : n;
}
",
e449000228690301ed3d3de32e7ccd3ba51bef53,"public String alarmClock(int day, boolean vacation)
{
    if (vacation)
    {
        if (day >= 1 && day <= 5)
        {
            return alarmClock;
        }
    }
}
",
eb9d1e97323f6c0c1410dd8ae35aa261280fc389,"public boolean endOther(String a, String b)
{
    a = a.toLowerCase();
    b = a.toLowerCase();
    return(a.endsWith(b) || b.endsWith(a));
    
    
}
",
21e89b678cc68f8c7a4233261dc10576fa87b0ae,"public int[] seriesUp(int n)
{
    int[] result = new int[n * (n + 1)/2];
    if (n == 0)
    {
        return result;
    }
    for	(int i = 1;i <= n; i++)
    {
        for (int a = 1; a <= i; a++)
        {
            result[i + a - 2] = a;
        }
    }
    return result;
}
",
3c7fcd8b79f482dfed60c826a914d6e742c28ac2,"public int noTeenSum(int a, int b, int c)
{
	return fixTeen(a) + fixTeen(b) + fixTeen(c);
}

public int fixTeen(int n)
{
    if (n >= 13 && n <= 19 && n != 15 && n != 16)
        return 0;
}
",
6a200d12723f9e254906a4c4d6061927e68dbe5d,"public int caughtSpeeding(int speed, boolean isBirthday)
{
	int value = 0; 
  
	if (isBirthday) {
    	speed += 5;
 	}
  	if ( speed <= 60 ) {
    	return 0;
  	}
  	if (speed >= 61 && speed <= 80) {
    	return 1;
  	}
  	if (speed >= 81) { 
    	return 2;
  	} 
  	return value;
}
",
a00102f735624bf1544acb79ff4e5af5281fc96e,"public int centeredAverage(int[] nums)
{
    int min = nums[0];
    int max = nums[0];
    int total = nums[0];
    for (int i = 1; i < nums.length; i++)
    {
        if (nums[i] > max)
        {
            max = nums[i];
        }
        else if (nums[i] < min)
        {
            min = nums[i];
        }
        total = total + nums[i];
    }
    return (sum - max - min) / (nums.length - 2);
}",
a8f0f9a7d841d4b00d443cf76626fdc127814835,"public int sortaSum(int a, int b)
{
    if (a >= 10 && b <= 19)
        return 20;
}
",
d07d2f1b40602638d4c357809540b7e2870f1eb1,"public boolean cigarParty(int cigars, boolean isWeekend)
{
    if (isWeekend) 
        return cigar >=40;
    else 
        return cigar >= 40 && <= 60;
        
}
",
557026f064a89be4df627a611b8a898f7a2fc2f3,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length; i++)
    {
        if ((nums[i] != val) || (nums[i + 1] != val))
        {
            return flase;
        }          
        
    }
     return false;
}
",
203f9c47a0738c4f7deb3aa08f1ac17b6d91cac6,"public int[] withoutTen(int[] nums)
{
    int[] array = new int[nums.length];
    
    int index = 0;
    
    for (int i : nums)
    {
        if (i != 10)
        {
            array[index] = i;
            index++;
        }
    }
    
   return array;
}
",
532a012b0ec202d27262b383dc13089aef7e1e3b,"public int dateFashion(int you, int date)
{
   if ((you >= 2 && date >= 2) && (you >= 8 || date >= 8))
       return 2;
   if ((you >= 2 && date >= 2) && !(you >= 8 || date >= 8))
       return 1;
   return 0;
}
",
8b2f2240b040ccff48ec7c89647d89e57b34ca88,"public boolean has77(int[] nums)
{
    for ( int i = 0; i < nums.length - 2; i++ ) {
        if ( nums[i] == 7 ) {
            if ( nums[i + 1] == 7 || nums[i + 2] == 7 ) {
                return true;
            }    
        }
    }
    if ( nums[nums.length - 2] == 7 && nums[nums.length - 1] == 7 )
    {
        return true;
    }
    return false;
}
",
54f16f3c5196c9d23444381409e354f9fae465c0,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
b8c119c667e36132f25df0fd31ba102f94d1c6df,"public boolean evenlySpaced(int a, int b, int c)
{
    if (a != b && a != c && b != c)
    {
         return (Math.abs(b - a) == Math.abs(c - b) 
         || Math.abs(b - a) == Math.abs(c - a)
         || Math.abs(a - b) == Math.abs(c - b)
         || Math.abs(c - a) == Math.abs(b - c) 
         || a == b && b == c);
    }
    return false;
}
",
83a239f0521cd38117ddbaaf228f8523a019cc40,"public boolean endOther(String a, String b)
{
    return a.toLowerCase().endsWith(b.toLowerCase()) || b.toLowerCase().endsWith(a.toLowerCase());
}
",
e73e062870f1d171b59cd904b257c0d67d7c10f8,"public int[] seriesUp(int n)
{
    int[] result = new int[n * (n + 1)/2];
    if (n == 0)
    {
        return result;
    }
    for	(int i = 1;i <= n; i++)
    {
        for (int a = 1; a <= i; a++)
        {
            result[i + a - 1] = a;
        }
    }
    return result;
}
",
b03f6ee58d1c2efbc298c1b090d888a47d5425a9,"public boolean evenlySpaced(int a, int b, int c)
{
    if (b-a <= 1 && c-a >= 2 && c-b >= 2 
        || b-a >= 2 && c-a <= 1 && c-b >=2
        || b-a >=2 && c-a >= 2 && c-b <= 1)
        return true;
    return false;
}
",
6ccaf37a8d9757fc57014287316ecd9409820fe7,"public int sortaSum(int a, int b)
{
    int sum = a + b;
    
    if (sum >= 10 || sum <= 19)
        return 20;
    else
        return sum;
    
}
",
c1fdbe3e9fca73de72f1831d00c35304cb29463e,"public int[] fizzArray(int n)
{
    int[] result = new int[n];
    for (int i = 0; i < n; i++)
    {
        result[i] = i;
    }
    return result;
}
",
e449000228690301ed3d3de32e7ccd3ba51bef53,"public String alarmClock(int day, boolean vacation)
{
    if (vacation)
    {
        if (day >= 1 && day <= 5)
        {
            return alarmClock;
        }
    }
}
",
0808dca8b4a525f8b42f6b75f66b3b1d93c3c6cc,"public int sum13(int[] nums)
{
    int sum = 0;
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] != 13 && nums[i - 1] != 13)
        {
            sum += nums[i];
        }
    }
    return sum;
}
",
9ecf844f1f204bb4033d9d6a0027d8c4a1d17f71,"public int[] zeroMax(int[] nums)
{
    
    
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] == 0)
        {
            nums[i].findMaxOdd(i, nums);
        }
    }
    return nums;
}





public int findMaxOdd(int i, int[] nums)
{
    int maxOdd;
    maxOdd = 0;
    
    for (int b = i; b < nums.length - 1; b++)
    {
        if (nums[b] % 2 != 0 && nums[b] > maxOdd)
        {
            maxOdd = nums[b];
            nums[i] = nums[b];
        }
    }
    return maxOdd;
}

",
b6c8be2f5f7309923ebb19a0553979d7cc50dce9,"public String zipZap(String str)
{
    for (int i = 0; i < str.length() - 2; i++) 
    {
    if (str.charAt(i) == 'z' && str.charAt(i + 2) == 'p')
    {
        str.replace(str.substring(i + 1), """");
    }
    }
    return str;
}
",
f1f0a6448bfe3ad005796a40633fc50d6ffa6023,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
c32e8df18759f85c9ca9cc1ff3051aa396bf5a33,"public boolean evenlySpaced(int a, int b, int c)
{
    int[3] arrInOrder;
    arrInOrder[0] = a;
    arrInOrder[1] = b;
    arrInOrder[2] = c;
    
    int small;
    int med, big;
   /**
    if ((a > b) && (a > c)) // if a is the biggest
   {
		if (b > c)
        {
            big = a;
            med = b;
            small = c;
        }
       else
       {
           
       }
       
   }
   */
}
",
1246d82dc38af3da4d77890172a9d1890cc382a1,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
dea353e4fa8946278ebcfad2f8039a9f72b55b28,"public int sum3(int[] nums)
{
 return nums[0] + nums[1] + nums[2];   
}
",
9e81d1a2a7638c14b721846f5090b36ad07ab308,"public int[] seriesUp(int n)
{
    int[] result = new int[(n * (n + 1)) / 2];
    int count = 1;
    int index = 0;
    for (int i = 0; i < result.length; i++)
    {
        for (int j = 0; j < count; j++)
        {
            result[index] = j;
        	index++;
        }
        count++;
    }
}
",
45bb0c43390b2898deab9a359cdda85e43e43e39,"public int[] shiftLeft(int[] nums)
{
    int[] result = new int[nums.length];
    for (int i = 0; i< nums.length - 1; i++)
    {
		result[i] = nums[i+1];
    }
    result[nums.length - 1] = nums[0];
    
    return result;
}
",
afec4a1fda7760651e34095e9ceef8a8483018be,"public boolean sameEnds(int[] nums, int n)
{
    
    for (int i = 0; i <= n; i++)
    {
        if (nums[i] != nums[nums.length - n + i - 1])
        {
            return false;
        }
    }
    return true;
}
",
852b3e14a19fa6d9cd555e092d1e015cb6087fa2,"public int sum13(int[] nums)
{
    int sum = 0;
    if (num.length != 0)
    {
        for (int num: nums)
        {
            if (num != 13)
            {
                sum = sum + num;
            }
        }
    }
    return sum;
}
",
ecd2767c2649044a0da26903ef340674e89f1009,"public int[] fix45(int[] nums) {
  int[] result = nums;
  for(int i = 0; i < result.length; i++) {
      if(result[i] == 4 && i != result.length) {
          int index = findIndexOfValidFive(result);
           
          if(index != -1) {
              int temp = result[i + 1];
              result[i + 1] = result[index];
              result[index] = temp;
          }
      }
  }  
   
  return result;
}
 
public int findIndexOfValidFive(int[] nums) {
    for(int i = 0; i < nums.length; i++) {
        if((i == 0 && nums[i] == 5) || (nums[i] == 5 && nums[i - 1] != 4)) {
            return i;
        }
    }
     
    return -1;",
56e4dc22fcaa600e70470c4379b993e5425d1fd5,"public boolean bobThere(String str)
{
    if (str.length() < 3)
        {
            return false;
        }
    
    for (int i = 0; i < str.length() - 2; i++)
    {
        if (str.charAt(i) == 'b' && str.charAt(i + 2) == 'b')
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    return bobThere(str);
}
",
faa6cc44696d72e0fa85cc561584a1de159a4aa5,"public int dateFashion(int you, int date)
{
    if (you <= 2 || date <= 2)
        return 0;
    if (you >= 8 || date >= 8)
        return 2;
    return 1;
}
",
c0dbc4d8e7248361a8572bc2edab98f5b3c74203,"public int greenTicket(int a, int b, int c)
{
    if (a != b && b != c && a != c){
        return 0;
    } 
    if (a == b && b == c){
        return 20;
    }
    if (a == b || b == c || a == c){
        return 10;
    }
}
",
609cc3f20dd1f3529a02ebbed8384395c8400b2b,"public int countEvens(int[] nums)
{
    int evens = 0;
    for (int number: countEvens)
    {
        if (number % 2 == 0)
        {
            evens = evens + 1;
        }
    }
    return evens;
}
",
3421e294ef663dea5cc4a12c48942aa3987b86e6,"public int makeChocolate(int small, int big, int goal)
{
    if (small + big*5 < goal)  return -1;

    int smallNeeded = goal - big * 5;

    if(smallNeeded <= 0) return 0;

    return smallNeeded;
    
            
    
}
",
dd09babe580586f1680177c5f9004d2f1f2011bf,"public boolean has77(int[] nums)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] == 7 && nums[i + 1] == 7)
            return true;
        if (nums[i] < nums.length - 2 && nums[i] == 7 && nums[i + 2] == 7)
            return true;
    }
    return false;
}
",
abf203f02a8e6355f71ebc0195c9c4f08db3dca9,"public int greenTicket(int a, int b, int c)
{ 
    if (a == b && b == c){
        return 20;
    }
    if (a == b || b == c || a == c){
        return 10;
    }
    return 0;
}
",
1ac085374f785c20ca501ac5939ec5977db8a972,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
    if (isAsleep)
    {
        return false;
    }
    
    if (isMorning)
    {
 		return false;   
    }
    
    return true;
}
",
37483792e65efa307aab5d74a47b4a1dbe36e195,"public boolean bobThere(String str)
{
    //int firstB = str.indexOf(""b"");
   // int secondB = str.lastIndexOf(""b"");
    //if (secondB == firstB + 2)
    //    return true;
   // return false;
    for (int n == 0; n < str.length(); n++)
    {
        if ((str.charAt(n) == str.indexOf(""b"") && (str.charAt(n + 2) == str.indexOf(""b"", n))
        {
            return true;
        }
                
    }//end for loop
    return false;
}
",
100f26d18ee4e0e1619542ed10f1e83b537d6b04,"public int sum3(int[] nums)
{
    sum = sum3[0];
    sum+=sum3[1];
    sum+=sum3[2];
    return sum;
}
",
cdf42d5c2d560cf867cc0f628e892b8731b4a6c5,"public boolean twoTwo(int[] nums)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] == 2 && nums[i+1] == 2)
        {
            return true;
        }
    }
    return false;;
}
",
bbf414c607917bae018f323952576cc4855d0403,"public int[] fix45(int[] nums)
{
    int[] fours = new int [3];
    int[] fives = new int[3];
    int index4=0;
    int index5 = 0;
    for (int i=0; i<nums.length;i++)
    {
        if (nums[i] == 4)
        {
            fours[index4] = i;
            index4++;
        }
        else if (nums[i] == 5)
        {
            fives[index5] = i;
            index5++;
        }
    }
    for (int i = index5-1; i>=0;i--)
    {
        if (nums[fours[i]+1]!=5)
        {
        	nums[fives[i]] = nums[fours[i]+1];
        	nums[fours[i]+1] = 5;
        }
    }
    
    
    
    
    //int start = 0;
    //int skip = -1;
    //for (int i=0; i<nums.length;i++)
    //{
    //    if (nums[i] == 4)
    //    {
    //        for (int j=start; j<nums.length;j++)
   	//		{
    //            if (j!=skip && nums[j]==5)
    //            {
    //                nums[j]=nums[i+1];
    //                nums[i+1]=5;
    //                skip = i+1;
    //                break;
    //            }
    //        }
    //    }
    //}
    return nums;
}
",
948b5b2528e52a0cd157a7b353521353f3da1fef,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
     return (isMom || (!(isAsleep)));

}
",
658cc87d5ac403faedaaa331874ee4b4c3043e4f,"public boolean isEverywhere(int[] nums, int val)
{
    for(int i = 0; i < nums.length; i++)
    {
     	if (nums[i] 1= val && nums[i + 1] != val)
        {
            return false;
        }
    }
    
    return true;
}
",
2b64a0277763a3e3aeb7d462893bb8e9e84266a5,"public int centeredAverage(int[] nums)
{
    int max = nums[0];
    int min = nums[0];
        
        for (int i = 0; i < nums.length; i++)
        {
            sum += nums[i];
            if (nums[i] < min)
            {
                min = nums[i];
            }
            else if (nums[i] > max)
            {
                max = nums[i];                
            }
        }
    int average = (sum - min - max) / (nums.length - 2);
    
    return average;
}
",
12eb90cd21edfa3b84b353939a235a5e8fca23c3,"public int makeChocolate(int small, int big, int goal)
{
    int amountOfSmallBars = goal % 5;
    
    if (small + (big * 5) < goal)
    { 
        return -1;
    }
    
    else if (amountOfSmallBars <= small && goal - (big * 5) > 4)
    {
        return amountOfSmallBars + 5; 
    }
    
    else if (amountOfSmallBars <= small)
    {
    	return amountOfSmallBars;
    }
    
    else 
    {
        return -1; 
    }
    
}
",
bbe06fdc5184357ca1c3d215ff4af4bf9eb1cc28,"public int countCode(String str)
{
    int number = 0;
    for (int i = 0; i < str.length() - 3; i++)
    {
        if (str.charAt(i) == 'c' && str.charAt(i + 1) == 'o' && str.charAt(i + 3) == 'e') //first 2 letters are 'co' and the last letter is 'e'
        {
            number++;
        }
    }
    return number;
}
",
8b2f2240b040ccff48ec7c89647d89e57b34ca88,"public boolean has77(int[] nums)
{
    for ( int i = 0; i < nums.length - 2; i++ ) {
        if ( nums[i] == 7 ) {
            if ( nums[i + 1] == 7 || nums[i + 2] == 7 ) {
                return true;
            }    
        }
    }
    if ( nums[nums.length - 2] == 7 && nums[nums.length - 1] == 7 )
    {
        return true;
    }
    return false;
}
",
d3bbd5372c67b93d7e4c5f3425ac793bb5763980,"public int sortaSum(int a, int b)
{
    int sum = a + b;
    if (sum >= 10 && sum <= 19)
        return 20;
    return sum;
}
",
9050b974ad390bfb7881add0a55419bac94d1aff,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 1; i < nums.length - 1; i++)
    {
    	if (nums[i -1] == val || nums[i + 1] == val)
        {
        	return true;
        }
    }
}
",
739598df6f10e1b41997fbbce33f2e2bf0fd995e,"public boolean has77(int[] nums)
{
    int x = nums.length;
    for (int i = 0; i < x; i++)
    {
        if (i < x - 1 && nums.[i] == 7 && nums.[i + 1] == 7)
        {
            return true;
        }
        if (i < x - 2 && nums.[i] == 7 && nums.[i + 2] == 7)
        {
            return true;
        }
    }
    return false;
}
",
b8c119c667e36132f25df0fd31ba102f94d1c6df,"public boolean evenlySpaced(int a, int b, int c)
{
    if (a != b && a != c && b != c)
    {
         return (Math.abs(b - a) == Math.abs(c - b) 
         || Math.abs(b - a) == Math.abs(c - a)
         || Math.abs(a - b) == Math.abs(c - b)
         || Math.abs(c - a) == Math.abs(b - c) 
         || a == b && b == c);
    }
    return false;
}
",
b02997d91fd09f8bee8d42b148052543fc339026,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    if (isBirthday)
    {
        speed = speed - 5;
    }
    
    if (speed <= 60)
    {
        return 0;
    }
}
",
b1734b84d9123cc28d3f62e758b480ab26ea8fb9,"public int sortaSum(int a, int b)
{
   int sum = a + b;
   if (sum >= 10 && sum <= 19)
   {
   		return 20; 
   }
   else
   {
   		return sum;
   }
}
",
3da6d13c5e129585a85f09cc153cb57358bb6316,"public String without2(String str) 
{
    if (str.length() >= 2)
    {
        if (str.substring(0,2).equals(str.substring(str.length() - 2)))
        {
            return str.substring(2);
            // if the two letters at the beginning of the word and at the end of the word are equal to each other, the string will returned with these two letters
        }
        else
        {
            return str;
            // if the two letters are not equal to each other, then the original string will be returned
        }
    }
    else
    {
        return str;
        //if the word is only two letters or less, it will return the original string 
    }
}
",
6991b94e4cd03b4b472c84e5d1acc6568be2c36a,"public int[] withoutTen(int[] nums)
{
    int[] nnum;
    for (int i = 0; i < nums.length; i++)
    {
     	if (nums[i] != 10)
        {
        	Integer temp = nums[i];
            nnum.add(temp);
        }
    }
}
",
56cccc5e57b71638ae0f36747e6ae090dc81fe2d,"public int sum67(int[] nums)
{
    int count = 0;
    int seven = 0;
    
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] == 6)
        {
           for (int x = i + 1; x < nums.length; x++)
           {
               if (nums[x] != 7)
               {
                   count = count + 0;
               }
               else if (nums[x] == 7)
               {
                   count = count + 0;
                   i = i + x;
               }
           }
        
        }
        else
        {
        count = count + nums[i];
        }
        // i'm stuck on excluding numbers up till 7.
        // okay, i'm trying to say:
        // when you reach a 6, ignore the 6.
        // then, ignore each number until you reach a 7.
        
        // so perhaps the smarter way to state this is:
        // ahhh maybe a separate int to count 7's?
        
        // i'm thinking in the way the problem is laid out for me, where
        // i'm supposed to ""ignore"" sections of numbers
        
        // maybe just fucking count them all and ignore the ones in between 6 and 7
        
       
        
    }
    
    return count;
}

",
95db80d206a39185b23dca2957512dcc44d5a3a1,"public int countEvens(int[] nums)
{
    int count = 0;
    for (int i = 0; i < nums.length; i +=1) {
        if (nums[i] % 2 == 0) {
            count +=1;
        }
    }
    return count;
}
",
c4cd9fb76f3a67d4e774521d2a07bd1fe7cd0b11,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
56e4dc22fcaa600e70470c4379b993e5425d1fd5,"public boolean bobThere(String str)
{
    if (str.length() < 3)
        {
            return false;
        }
    
    for (int i = 0; i < str.length() - 2; i++)
    {
        if (str.charAt(i) == 'b' && str.charAt(i + 2) == 'b')
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    return bobThere(str);
}
",
2341aa02180229566878128a50f5ccba14fdcee3,"public int[] frontPiece(int[] nums)
{
    int number[] = new int[2];
    for (int numbers: nums)
    {
        number[i] = numbers;
    }
    return number;
}
",
852b3e14a19fa6d9cd555e092d1e015cb6087fa2,"public int sum13(int[] nums)
{
    int sum = 0;
    if (num.length != 0)
    {
        for (int num: nums)
        {
            if (num != 13)
            {
                sum = sum + num;
            }
        }
    }
    return sum;
}
",
50e38ea828c8b0ad18791c7c955b37bad6c9d4bc,"public boolean xyzThere(String str)
{
    int a = str.indexOf(""xyz"");
    int b = str.lastIndexOf(""xyz"");
    return ( a != -1 || b != -1);
}
",
51cd81eddc2c0304f6f4b44ade4bf6e3c8a6aff8,"public String alarmClock(int day, boolean vacation)
{
    if (day >=1 && day <= 5)
    {
        return vacation ? ""10:00"" : ""7:00"";
    }
    
    else
    {
        return vacation ? ""off"" : ""10:00""
    }

    
}
",
7e8ebbb04f1a1a60590f6fb959bda51fa984b852,"public int countEvens(int[] nums)
{
    int count = 0;
    for (int i = 0; i < nums.length; i++)
    {
        if (nums.get(i)%2 == 0)
        {
            count++;
        }
    }
    return count;
}
",
8dbe6fb15987997ffaf0f07b86943c0bcb2846fb,"public String alarmClock(int day, boolean vacation)
{
    if (vacation)
    {
        if (day != 0 || day != 6)
        {
            return ""10:00"";
        }
        else
        {
            return ""off"";
        }
    }
	else
    {
        if (day != 0 || day != 6)
        {
            return ""7:00"";
        }
        else
        {
            return ""10:00"";
        {
    }


",
106e3d5e1b22ac3e35e7f965dd8b8298da752b7e,"public boolean xyzThere(String str)
{
    for(int i = 0; i < str.length() - 3; i++)
    {
        if (str.substring(i, i + 3).equals(""xyz"") && str.charAt(i-1) != '.')
        {
            return true;
        }
    }
    return false;
}
",
2b92c031167d3664a0be5ab4cee6d5ad678ce824,"public int sum67(int[] nums)
{
    int count = 0;
    int seven = 0;
    
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] == 6)
        {
           for (int x = i; x < nums.length; x++)
           {
               if (nums[x] != 7)
               {
                   count = count + 0;
               }
               else if (nums[x] == 7)
               {
                   count = count + 0;
                   i = i + x;
               }
           }
        
        }
        
        count = count + nums[i];
        // i'm stuck on excluding numbers up till 7.
        // okay, i'm trying to say:
        // when you reach a 6, ignore the 6.
        // then, ignore each number until you reach a 7.
        
        // so perhaps the smarter way to state this is:
        // ahhh maybe a separate int to count 7's?
        
        // i'm thinking in the way the problem is laid out for me, where
        // i'm supposed to ""ignore"" sections of numbers
        
        // maybe just fucking count them all and ignore the ones in between 6 and 7
        
       
        
    }
    
    return count;
}

",
a00102f735624bf1544acb79ff4e5af5281fc96e,"public int centeredAverage(int[] nums)
{
    int min = nums[0];
    int max = nums[0];
    int total = nums[0];
    for (int i = 1; i < nums.length; i++)
    {
        if (nums[i] > max)
        {
            max = nums[i];
        }
        else if (nums[i] < min)
        {
            min = nums[i];
        }
        total = total + nums[i];
    }
    return (sum - max - min) / (nums.length - 2);
}",
b7d5d5590bde31e23ee41e67ec8ade069279409e,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    if (isBirthday) speed >= 5;
    if (speed <= 60) return 0;
    return (speed > 60 && speed <= 80) ? 1 : 2;
}
",
e05151e763b22c6322f72dd9558578b0970a10d6,"public boolean canBalance(int[] nums)
{
    double sum = 0;
    for (int n : nums) {
        sum += n;
    }
    
    double target = sum / 2;
    sum = 0;
    
    for (int i : nums) {
        sum += i;
        if (sum == target) {
            return true;
        }
    }
    return false;
}
",
f90f4209c0769229c85ac2c0392970d7920341e4,"public String alarmClock(int day, boolean vacation)
{
        alarmClock(0, true) -> ""off"";
        alarmClock(6, true) -> ""off""   
        alarmClock(1, true) -> ""10:00""
        alarmClock(2, true) -> ""10:00""
        alarmClock(3, true) -> ""10:00""
        alarmClock(4, true) -> ""10:00""
        alarmClock(5, true) -> ""10:00"" 
}
",
353250dbb0f7d8b1345775c3b7683b3a5c68b0d5,"public int makeChocolate(int small, int big, int goal)
{
    // small = 1 kilo each
    // big = 5 kilos each
    int numBig = 0;
    int numSmall = 0;
    numBig = goal / 5;
    numSmall = goal % 5;
    int sum = 5 * numBig + numSmall;
    
    if (numSmall > small)
    {
    	return -1;
    }
    else if (sum == goal)
    {
        return numSmall;
    }
    else
    {
        while (sum < goal && numSmall < small)
        {
            sum++;
            numSmall++;
        }
        
        if (goal == sum)
        {
            return numSmall;
        }
        else
        {
            return -1;
        }
            
    }
}
",
de2b521aa2c62ce8dcb54219041aa20489dda3f4,"public int loneSum(int a, int b, int c)
{
    if (a == b && b == c)
        return 0;
    if (a == b)
        return c;
    if (b == c)
        return a;
    if (a == c)
        return b;
    return a + b + c;
}
",
0808dca8b4a525f8b42f6b75f66b3b1d93c3c6cc,"public int sum13(int[] nums)
{
    int sum = 0;
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] != 13 && nums[i - 1] != 13)
        {
            sum += nums[i];
        }
    }
    return sum;
}
",
9f76f502536b5caf05e00e7133cb3aa0cc6027d4,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    if (isBirthday)
     speed -=5;
    if (speed <= 60)
        return 0;
    else if (speed <= 80)
        return 1;
    else
        return 2;
    
}
",
94c122a021a2cf0d8bce563a59aea25bbb53928a,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++) {
        if (val != nums[i] && val!= nums[i+1]) {
            return false;
        }
    }
    return true;
}
",
b1ffd079f8c4294a66e06ad7d2fb2a7a8fbe7344,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
86cb31ccd85e2cce6656636a5b1817a50876a726,"public int[] withoutTen(int[] nums)
{
	int[] newNums = new int[nums.length];
    int newI;
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] != 10)
        {
            newNums[newI] = nums[i];
        }
    }
    return newNums;
}",
35aba5f59d8333186e6c14dca33d6a77b87aecb5,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] == val && nums[i-1] == val)
        {
            return true;
        }
    }
    return false;
}
",
37483792e65efa307aab5d74a47b4a1dbe36e195,"public boolean bobThere(String str)
{
    //int firstB = str.indexOf(""b"");
   // int secondB = str.lastIndexOf(""b"");
    //if (secondB == firstB + 2)
    //    return true;
   // return false;
    for (int n == 0; n < str.length(); n++)
    {
        if ((str.charAt(n) == str.indexOf(""b"") && (str.charAt(n + 2) == str.indexOf(""b"", n))
        {
            return true;
        }
                
    }//end for loop
    return false;
}
",
c5aebb4151a6c14d6fb00ca52ff6164ceb64474b,"public int noTeenSum(int a, int b, int c)
{
    return fixTeen(a) + fixTeen(b) + fixTeen(c);
}

public int fixTeen(int n)
{
    return (n &gt;= 13 &amp;&amp; n &lt; 15 || n &gt; 16 &amp;&amp; n &lt;= 19) ?
        0 : n;
}
",
d07d2f1b40602638d4c357809540b7e2870f1eb1,"public boolean cigarParty(int cigars, boolean isWeekend)
{
    if (isWeekend) 
        return cigar >=40;
    else 
        return cigar >= 40 && <= 60;
        
}
",
21f49c70a5574e177ee0e928d52f7656fb37a03a,"public boolean canBalance(int[] nums)
{
    int same = 0;
    int sum = 0;
    for (int i=0;i<nums.length;i++)
    {
        sum += nums[i];
    }
   
    for (int i=0;i<=nums.length-2;i++)
    {
        same += nums[i];
        sum -= nums[i];
    
    if (same == sum)
    {
        return true;
    }
    }
    return false;
}",
1246d82dc38af3da4d77890172a9d1890cc382a1,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
db19ea5f1cabdb8d39c12a6acfc593bd85bf4f95,"public int[] tenRun(int[] nums)
{
    for (int i = 0; i < nums.length; i++)
    {
    	if (nums[i] % 10 == 0)
    	{
     	   for (int j = i + 1; j < nums.length && nums[j] % 10 != 0; j++)
           {
            	nums[j] = nums[i];   
           }
    	}
    }
    return nums;
}
",
dd09babe580586f1680177c5f9004d2f1f2011bf,"public boolean has77(int[] nums)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] == 7 && nums[i + 1] == 7)
            return true;
        if (nums[i] < nums.length - 2 && nums[i] == 7 && nums[i + 2] == 7)
            return true;
    }
    return false;
}
",
54f16f3c5196c9d23444381409e354f9fae465c0,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
dbbe2c6beeefd93c68c1cf77a6130ed4323b9aa3,"public int countEvens(int[] nums)
{
    int count = 0;
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] % 2 == 0)
        {
            count++;
        }
    }
    return count;
}
",
948b5b2528e52a0cd157a7b353521353f3da1fef,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
     return (isMom || (!(isAsleep)));

}
",
f1f0a6448bfe3ad005796a40633fc50d6ffa6023,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
96649403e3463cc1c05171bea6b6b5e9d2710fe4,"public boolean isEverywhere(int[] nums, int val)
{
//    for (int i = 0; i < nums.length; i++)
//    {
  //   	if (nums[i] != val || nums[i++] != val)
    //    {
      //      return false;
        //}
    //}
    //return true;
    
    for (int i = 0; i <=nums.length-2;i++)

{

if ( nums[i] != val && nums[i+1] != val)

result = false;

}

  return result;

}
",
353250dbb0f7d8b1345775c3b7683b3a5c68b0d5,"public int makeChocolate(int small, int big, int goal)
{
    // small = 1 kilo each
    // big = 5 kilos each
    int numBig = 0;
    int numSmall = 0;
    numBig = goal / 5;
    numSmall = goal % 5;
    int sum = 5 * numBig + numSmall;
    
    if (numSmall > small)
    {
    	return -1;
    }
    else if (sum == goal)
    {
        return numSmall;
    }
    else
    {
        while (sum < goal && numSmall < small)
        {
            sum++;
            numSmall++;
        }
        
        if (goal == sum)
        {
            return numSmall;
        }
        else
        {
            return -1;
        }
            
    }
}
",
dc8066a4ce0e948c3507c575f5e9322070445254,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
    if (!isAsleep) {
        if (isMom || !isMorning) {
            return true;
        }
        return false;
    }
    return false;
}
",
faa6cc44696d72e0fa85cc561584a1de159a4aa5,"public int dateFashion(int you, int date)
{
    if (you <= 2 || date <= 2)
        return 0;
    if (you >= 8 || date >= 8)
        return 2;
    return 1;
}
",
eb9d1e97323f6c0c1410dd8ae35aa261280fc389,"public boolean endOther(String a, String b)
{
    a = a.toLowerCase();
    b = a.toLowerCase();
    return(a.endsWith(b) || b.endsWith(a));
    
    
}
",
6d62699ce20db7e91bf9a9c10e2cc7b3850ad892,"public int[] tenRun(int[] nums)
{
    for (int i - 0; i < nums.length; i++)
    {
    	if nums[i] % 10 == 0
        {
        	for (int j = i + 1; j < nums.length &&
                 !(nums[j] % 10 == 0); j++)
        	{
        		nums[j] = nums[i];
        	}   	  
        }
        return nums;
    }
}
",
14ced47f38f6da0c3afcc08c0bcb9ed96b5c73fe,"public String getSandwich(String str)
{
    if (str.indexOf(""bread"") > 0) // if there are two peices of bread
    {
         System.out.print(str.indexOf(""bread""));
        return ""no"";
    }
    else
    {
        return """";
    }
}
",
7ee540611323a35160a97c8f3d841b30ffcc0e49,"public int sum3(int[] nums)
{
    int sumOfArray = 0;
    for (int i : nums)
    {
        sumOfArray += i;
    }
    return sumOfArray;
}
",
c5aebb4151a6c14d6fb00ca52ff6164ceb64474b,"public int noTeenSum(int a, int b, int c)
{
    return fixTeen(a) + fixTeen(b) + fixTeen(c);
}

public int fixTeen(int n)
{
    return (n &gt;= 13 &amp;&amp; n &lt; 15 || n &gt; 16 &amp;&amp; n &lt;= 19) ?
        0 : n;
}
",
987f265fb4f09a7db40586aa6a321d7c612fa526,"public boolean has77(int[] nums)
{
    int count = 0;
    
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] == 7 && nums[i+1] == 7)
        {
            count = 1;
        }
        else if (nums[i] == 7 && nums[i+2] == 7 && i < nums.length - 3)
        {
            count = 1;
        }
    }
    // okay, another approach is to check if there are two 7's.
    // if there are, store their [] as variables
    // if the difference between them is greater than 2, then false
    
    return (count == 1);
}
",
6ccaf37a8d9757fc57014287316ecd9409820fe7,"public int sortaSum(int a, int b)
{
    int sum = a + b;
    
    if (sum >= 10 || sum <= 19)
        return 20;
    else
        return sum;
    
}
",
cdf42d5c2d560cf867cc0f628e892b8731b4a6c5,"public boolean twoTwo(int[] nums)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] == 2 && nums[i+1] == 2)
        {
            return true;
        }
    }
    return false;;
}
",
3da6d13c5e129585a85f09cc153cb57358bb6316,"public String without2(String str) 
{
    if (str.length() >= 2)
    {
        if (str.substring(0,2).equals(str.substring(str.length() - 2)))
        {
            return str.substring(2);
            // if the two letters at the beginning of the word and at the end of the word are equal to each other, the string will returned with these two letters
        }
        else
        {
            return str;
            // if the two letters are not equal to each other, then the original string will be returned
        }
    }
    else
    {
        return str;
        //if the word is only two letters or less, it will return the original string 
    }
}
",
e05151e763b22c6322f72dd9558578b0970a10d6,"public boolean canBalance(int[] nums)
{
    double sum = 0;
    for (int n : nums) {
        sum += n;
    }
    
    double target = sum / 2;
    sum = 0;
    
    for (int i : nums) {
        sum += i;
        if (sum == target) {
            return true;
        }
    }
    return false;
}
",
3d89f76d27956de3a51e53f7ba12c5aa1fc7e352,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
    if (isMorning && isMom && isAsleep)
        return true;
    if (isMorning && !isMom && !isAsleep)
        return false;
    if (isMorning && isMom && !isAsleep)
        return false;
    return false;    
}
",
b582494b7566fd2e40e9699094879d12819c2f07,"public int sum67(int[] nums)
{
    int sum = 0;
    boolean lastSix = false;
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] == 6)
        {
            lastSix = true;
        }
        else if (nums[i] == 7)
        {
            lastSix = false;
        }
        if (lastSix == false)
        {
            sum += nums[i];
        }
    }
    return sum;
}
",
529d313f0a353b81e3a1ca5e020890023e995836,"public String without2(String str) 
{
     if (str.length() >= 2 && str.substring(0, 2).equals(str.substring(str.length() - 2))) {
           return str.substring(2, str.length());
       }
       return str;
}
",
dbbe2c6beeefd93c68c1cf77a6130ed4323b9aa3,"public int countEvens(int[] nums)
{
    int count = 0;
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] % 2 == 0)
        {
            count++;
        }
    }
    return count;
}
",
b7a794971b30c770d5570accb374dac5104bef0e,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
    if (isMorning && isAsleep)
    {
        return false;
    }
    if (isMom && (!isAsleep) && isMorning)
    {
        return true;
    }
}
",
a43f9daaa9b5cc98acfe197b9157d9de345febf6,"public int[] frontPiece(int[] nums)
{
    for (int numbers: nums; int i = 0; i < 2; i++)
    {
        int number[i] = numbers;
    }
    return number;
}
",
3716e52883778fd89a65151c2b55e28aaab539b2,"public int caughtSpeeding(int speed, boolean isBirthday)
{ if (speed <= 60)
{
    return 0;
}
if (speed >= 61 && speed <= 80)
{
    return 1;
}
if (isBirthday())
{
    return 2;
}
}
",
b1734b84d9123cc28d3f62e758b480ab26ea8fb9,"public int sortaSum(int a, int b)
{
   int sum = a + b;
   if (sum >= 10 && sum <= 19)
   {
   		return 20; 
   }
   else
   {
   		return sum;
   }
}
",
3d4c98b74adf52d4ca5fe21febb24b1a8f6a6120,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++) {
        if (nums[i] != val && nums[i + 1] != val) {
            return false;
        }
    }
    return true;
}
",
e449000228690301ed3d3de32e7ccd3ba51bef53,"public String alarmClock(int day, boolean vacation)
{
    if (vacation)
    {
        if (day >= 1 && day <= 5)
        {
            return alarmClock;
        }
    }
}
",
c33b44f557fd7c2a3238818722cd845a74e96b85,"public int countClumps(int[] nums)
{
    boolean match = false;
    int count = 0;
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] == nums[i + 1] && !match)
        {
            match = true;
            count++
        }
        else if (nums[i] != nums[i + 1])
        {
            match = false;
        }
    }
    return count;
}
",
94c122a021a2cf0d8bce563a59aea25bbb53928a,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++) {
        if (val != nums[i] && val!= nums[i+1]) {
            return false;
        }
    }
    return true;
}
",
351839745bc2cdccbb945ecd1391b63bfee8a94a,"public boolean twoTwo(int[] nums)
{
    for (int i = 1; i < nums.length -1; i++){
        if (i ==2 && (i-1!=2 || i+1!= 2)){
                return false;
        }
    }
    return true;
}
",
faa6cc44696d72e0fa85cc561584a1de159a4aa5,"public int dateFashion(int you, int date)
{
    if (you <= 2 || date <= 2)
        return 0;
    if (you >= 8 || date >= 8)
        return 2;
    return 1;
}
",
ab6e01ad587cf8cc30f23754b8c8c9d3566dc7a4,"public int blackjack(int a, int b)
{
    if (a > 21)
    {
        return 0;
    }
    if (b > 21)
    {
        return 0;
    }
    if (a > 21 && b > 21)
    {
        return 0;
    }

}
",
9e81d1a2a7638c14b721846f5090b36ad07ab308,"public int[] seriesUp(int n)
{
    int[] result = new int[(n * (n + 1)) / 2];
    int count = 1;
    int index = 0;
    for (int i = 0; i < result.length; i++)
    {
        for (int j = 0; j < count; j++)
        {
            result[index] = j;
        	index++;
        }
        count++;
    }
}
",
aa4d8b44bff62be088c0c94a7829aa410ffa133b,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    if (isBirthday)
    {
        if (speed <= 60)
        {
            return 0;
        }
        if (speed <= 80 && speed >= 61)
        {
            return 1;
        }
        if (speed >= 81)
        {
            return 2;
        }
    }
    if (!isBirthday)
    {
        if (speed <= 65)
        {
            return 0;
        }
        if (speed <= 85 && speed >= 66)
        {
            return 1;
        }
        if (speed >= 86)
        {
            return 2;
        }
    }
}",
ec0734122f4add509acf5c24dba4d8ba253e0c85,"public int roundSum(int a, int b, int c)
{
    a = this.round10(a);
    b = this.round10(b);
    c = this.round10(c);
    
    int sum = a + b + c;
    
    return sum;
}

public int round10(int num)
{
    int remainder = num % 10;
    
    if (remainder >= 5)
    {
        // round up
        num = num + (10 - remainder);
    }
    else
    {
        // round down
        num = num - remainder;
    }
    
    return num;
}
",
0cbcdcccb97a84929ef84adcbae98515edde8dfa,"public int roundSum(int a, int b, int c)
{
    return round10(a) + round10(b) + round10(c);
}

public int round10(int num)
{
    
   int d = num %10;
    if (d >= 5)
        return num + 10 -d;
    return num -d;
}
",
dbbe2c6beeefd93c68c1cf77a6130ed4323b9aa3,"public int countEvens(int[] nums)
{
    int count = 0;
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] % 2 == 0)
        {
            count++;
        }
    }
    return count;
}
",
ecef8ffff5f622c9ab6799c53c46541bd578254a,"public int sum67(int[] nums)
{
    int sum = 0;
    boolean ifSix = false;
    for (int i = 0; i < nums.length; i++)
    {
        if (ifSix)
        {
            if (nums[i] == 7)
                ifSix = false;
        }
        else if (nums[i] == 6)
        {
            ifSix = true;
        }
        //if ifSix is true, then it goes back into the for loop 
        //and the first if statement becomes true
        else
        {
            sum = sum + nums[i];
        }
        //takes the sum of the numbers when there is no linee of numbers starting
        //with a 6 and ending with a 7
    }
    return sum;
}
",
f1f0a6448bfe3ad005796a40633fc50d6ffa6023,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
6b9f55c88028fdb9f9e0adbb7f59b28fb9564c5a,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] != val)
        {
            if (i < nums.length - 1)
            {
                if (nums[i + 1] != val)
                {
                    return false;
                }
            }
        }
        
    }
    return true;
}
",
f0965dc5b01333c0db74c3b81e48129583709ad9,"public int sortaSum(int a, int b)
{
    int sum = (a + b);
    if (10 <= sum && sum <= 19)
    {
        return 20;
    }
    return sum;
}
",
7862665265faf85e50ada49c030c401c79b4301c,"public boolean sameEnds(int[] nums, int n)
{
    for (int i = 0; i < n; i++)
    {
        if (nums[i] != nums[nums.length - (n - i)])
        {
            return false;
        }
    }
    
    return true;
}
",
dea353e4fa8946278ebcfad2f8039a9f72b55b28,"public int sum3(int[] nums)
{
 return nums[0] + nums[1] + nums[2];   
}
",
bbf414c607917bae018f323952576cc4855d0403,"public int[] fix45(int[] nums)
{
    int[] fours = new int [3];
    int[] fives = new int[3];
    int index4=0;
    int index5 = 0;
    for (int i=0; i<nums.length;i++)
    {
        if (nums[i] == 4)
        {
            fours[index4] = i;
            index4++;
        }
        else if (nums[i] == 5)
        {
            fives[index5] = i;
            index5++;
        }
    }
    for (int i = index5-1; i>=0;i--)
    {
        if (nums[fours[i]+1]!=5)
        {
        	nums[fives[i]] = nums[fours[i]+1];
        	nums[fours[i]+1] = 5;
        }
    }
    
    
    
    
    //int start = 0;
    //int skip = -1;
    //for (int i=0; i<nums.length;i++)
    //{
    //    if (nums[i] == 4)
    //    {
    //        for (int j=start; j<nums.length;j++)
   	//		{
    //            if (j!=skip && nums[j]==5)
    //            {
    //                nums[j]=nums[i+1];
    //                nums[i+1]=5;
    //                skip = i+1;
    //                break;
    //            }
    //        }
    //    }
    //}
    return nums;
}
",
324744e665f46a82492205626535ae0a59adced1,"public int countEvens(int[] nums)
{
    int count = 0;
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] % 2 == 0)
        {
            count++;
        }
    }
    return count;
}
",
6d62699ce20db7e91bf9a9c10e2cc7b3850ad892,"public int[] tenRun(int[] nums)
{
    for (int i - 0; i < nums.length; i++)
    {
    	if nums[i] % 10 == 0
        {
        	for (int j = i + 1; j < nums.length &&
                 !(nums[j] % 10 == 0); j++)
        	{
        		nums[j] = nums[i];
        	}   	  
        }
        return nums;
    }
}
",
eb40012d4b37cf5da376cf00035ed5e704fcbffc,"public int[] tenRun(int[] nums)
{
    for (int i = -1; i < nums.length; i++)
    {
        if (nums[i] % 10 == 0)
        {
            i++
        }
        else
        {
            nums[i] = 10;
        }
    }
    return nums;
}",
e352a60d0f0071b6a216e1e28616df56bccf719c,"public int countCode(String str)
{
    int code;
    int iteration = 0;
    int length = str.length() - 3;
    while (iteration > length)
    {
     	if (str.charAt(iteration) == ""c"" && str.charAt(iteration + 1) == ""o"" && str.charAt(iteration + 3) == ""e"")
        {
         	code += 1;
            iteration += 1
        }
    }
    return code;
}
",
ecd2767c2649044a0da26903ef340674e89f1009,"public int[] fix45(int[] nums) {
  int[] result = nums;
  for(int i = 0; i < result.length; i++) {
      if(result[i] == 4 && i != result.length) {
          int index = findIndexOfValidFive(result);
           
          if(index != -1) {
              int temp = result[i + 1];
              result[i + 1] = result[index];
              result[index] = temp;
          }
      }
  }  
   
  return result;
}
 
public int findIndexOfValidFive(int[] nums) {
    for(int i = 0; i < nums.length; i++) {
        if((i == 0 && nums[i] == 5) || (nums[i] == 5 && nums[i - 1] != 4)) {
            return i;
        }
    }
     
    return -1;",
353250dbb0f7d8b1345775c3b7683b3a5c68b0d5,"public int makeChocolate(int small, int big, int goal)
{
    // small = 1 kilo each
    // big = 5 kilos each
    int numBig = 0;
    int numSmall = 0;
    numBig = goal / 5;
    numSmall = goal % 5;
    int sum = 5 * numBig + numSmall;
    
    if (numSmall > small)
    {
    	return -1;
    }
    else if (sum == goal)
    {
        return numSmall;
    }
    else
    {
        while (sum < goal && numSmall < small)
        {
            sum++;
            numSmall++;
        }
        
        if (goal == sum)
        {
            return numSmall;
        }
        else
        {
            return -1;
        }
            
    }
}
",
1246d82dc38af3da4d77890172a9d1890cc382a1,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
dea353e4fa8946278ebcfad2f8039a9f72b55b28,"public int sum3(int[] nums)
{
 return nums[0] + nums[1] + nums[2];   
}
",
100f26d18ee4e0e1619542ed10f1e83b537d6b04,"public int sum3(int[] nums)
{
    sum = sum3[0];
    sum+=sum3[1];
    sum+=sum3[2];
    return sum;
}
",
3d4c98b74adf52d4ca5fe21febb24b1a8f6a6120,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++) {
        if (nums[i] != val && nums[i + 1] != val) {
            return false;
        }
    }
    return true;
}
",
0be714e6700cd5ad89ad8f1e30daf5c0dc2f6a03,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length; i++)
    {
    	if (nums[i] != val || nums[i+1] != val)
        {
        	return false;
        }

    }
	return true;
}
",
c1fdbe3e9fca73de72f1831d00c35304cb29463e,"public int[] fizzArray(int n)
{
    int[] result = new int[n];
    for (int i = 0; i < n; i++)
    {
        result[i] = i;
    }
    return result;
}
",
bf382bc1d92127f137bb550a9abdea9839167f1f,"public int[] shiftLeft(int[] nums)
{
    int shift = nums[0];
    if (nums.length >= 2)
    {
        //int shift = num[0];
        for (int i = 0; i < nums.length - 1; i++)
        {
            nums[i] = nums[i + 1];
        }
        nums[nums.length - 1] = shift;
    }
    return nums;
}
",
0eefe10c954547a7675d5ee81f88d4d112cf44e9,"public boolean bobThere(String str)
{
    for (int i = 0; i < str.length() - 2; i++) {
        if (str.charAt(i) == 'b' && str.charAt(i + 2) == 'b') {
            return true;
        }
    }
    return false;
}
",
a3cfe4acc0878f7a98ccbc168df9dff28266dbd7,"public int[] frontPiece(int[] nums)
{
    int [] grid = new int[2];
    
    // establish logi for checking nums.
    // add the proper elements of nums into a new array 
    if (nums.length == 1)
    {
        return grid[0] = nums[0];
    }
    else if (nums.length == 0)
    {
        return grid;
    }
    else
    {
        return grid[nums[0], nums[1]];
    }
}
",
dd62800fd575243e19f14d265c244ec566ba4e58,"public boolean sameEnds(int[] nums, int n)
{
    for(int i = 0; i < len; i++) {
        if(nums[i] != nums[nums.length - len + i])
            return false;
    }
                
    return true;
}
",
94c122a021a2cf0d8bce563a59aea25bbb53928a,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++) {
        if (val != nums[i] && val!= nums[i+1]) {
            return false;
        }
    }
    return true;
}
",
3a5b1294ef5b59964830e8cf8f6219db0c34b7d8,"public int blackjack(int a, int b)
{
    double remainA;
    remainA = (a % 21); //NOTE: The '%' yields the remainder!!!!
    double remainB;
    remainB =  (b % 21);
    
    // IF the remainder is large for one number, IT IS FAR AWAY from 21.
    if (a > 21 && b > 21)
    {
        return 0;
    }
    else if (a < 21 || b < 21)
    {
        if (a < 21 && b > 21)
        {
            return a;
        }
        else
        {
            return b;
        }
    }
    else
    {
        if (remainA > remainB)
        {
            return b;
        }
        else
        {
            return a;
        }
    }
}",
4eb6382872b95c713ee9b9ee3717c152840acf5e,"public int[] zeroMax(int[] nums)
{
    int[] numArray;
    for(int i : nums)
    {
        if (nums[i] == 0)
        {
            nums[i] = largestOdd(i, nums);
        }
    }
    return numArray;
}

public int largestOdd(int position, int[] nums2)
{
    int biggestOdd = 0
    for (int i = position; i < nums2.length; i++)
    {
        if (nums2[i] % 2 == 1 && nums2[i] > biggestOdd)
        {
            biggestOdd = nums2[i];
        }
    }
    return biggestOdd;
}",
4b739892a3a01dc0f58db94873932aeb2301f0b2,"public int[] fix45(int[] nums)
{
    List<int> fourIndex = new ArrayList();
    list<int> fiveIndex = new ArrayList();
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] == 4)
        {
            fourIndex.add(i);                  
        }
        else if (nums[i] == 5)
        {
            fiveIndex.add(i);
        }
    }
    for (int i = 0; i < fourIndex.size(); i++)
    {
        int fivePos = fiveIndex(i);
        int newPos = fourIndex(i + 1);
        int number = nums[newPos];
        nums[fivePos] = number;
        nums[newPos] = 5;
    }
    return nums;
}
",
07e5044ee85fdfbd00a05896e4320766869d1163,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
f7613e1314baffe2be7c9164f5586a14e6e82fd6,"public int countCode(String str)
{
    int count = 0;
    for (int i = 0; i < str.length() - 4; i++) {
        if (str.substring(i, i + 1).equals(""co"") && str.charAt(i + 3) == 'e') {
            count++;
        }
    }
    return count;
}
",
b05268e4079f92fa8c479a385b128576976d16c9,"public String atFirst(String str)
{
    String result = str.substring(0, 2);
    
    String value = '@';
    
    if (result.length() == 0)
    {
        result.charAt(0) = '@';
        result(1) = '@';
    }
    else if (result.length() == 1)
    {
        result(1) = '@';
    }
    else
    {
        result = result;
    }
    
    return result;
}
",
ca863c47543ac1f35d0bc3c729489508906d8ec5,"public boolean xyBalance(String str)
{
    for (int i=str.length(); i>0, i--)
    {
        if (str.substring(i-3, i-2).equals(""x"") && (str.substring(i-2, 
                   i-1).equals(""y""))
            {
                return true;
             }
                                                    
    }
            return false;
    
}
",
83e67904551bc1bb1045d11486fc9d857011e519,"public int redTicket(int a, int b, int c)
{
    if (a == 2 && b == 2 && c == 2)
    {
     	return 10;   
    }
    else if (a == b && b == c)
    {
     	return 5;   
    }
    else if (a != b && a != c)
    {
     	return 1;   
    }
    else
    {
        return 0;
    }
        
}
",
98b41121a7f0c87d5746dc0ae2746596c4a8bb37,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
eee0eb76d7c982f7cdbbfb86dbf032940b49e38b,"public int luckySum(int a, int b, int c)
{
    if (a == 13) // if a is equal to 13
        return 0;
    if (b == 13) // if b is equal to 13 go to the a value
        return a;
    if (c == 13) //if c is 13, only add  and b
        return (a + b);
    return (a + b + c); //if none of the others,add all the numbers
}
",
987f265fb4f09a7db40586aa6a321d7c612fa526,"public boolean has77(int[] nums)
{
    int count = 0;
    
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] == 7 && nums[i+1] == 7)
        {
            count = 1;
        }
        else if (nums[i] == 7 && nums[i+2] == 7 && i < nums.length - 3)
        {
            count = 1;
        }
    }
    // okay, another approach is to check if there are two 7's.
    // if there are, store their [] as variables
    // if the difference between them is greater than 2, then false
    
    return (count == 1);
}
",
3716e52883778fd89a65151c2b55e28aaab539b2,"public int caughtSpeeding(int speed, boolean isBirthday)
{ if (speed <= 60)
{
    return 0;
}
if (speed >= 61 && speed <= 80)
{
    return 1;
}
if (isBirthday())
{
    return 2;
}
}
",
324744e665f46a82492205626535ae0a59adced1,"public int countEvens(int[] nums)
{
    int count = 0;
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] % 2 == 0)
        {
            count++;
        }
    }
    return count;
}
",
4465ac2e7e70f3ac5ddbd490bd262cc0c4f6249d,"public int[] frontPiece(int[] nums)
{
    int [] grid = new int[2];
    
    // establish logi for checking nums.
    // add the proper elements of nums into a new array 
    if (nums.length == 1)
    {
        return grid[0] = nums[0];
    }
    else if (nums.length == 0)
    {
        return grid;
    }
    else
    {
        grid[0] = nums[0];
        grid[1] = nums[1];
        return grid[];
    }
}
",
06d8c76abed0f952e57d7cac3ed1759a9584d990,"public String getSandwich(String str)
{
    int length = str.length();
    int breadStart = str.indexOf(""bread"");
    int breadEnd = str.lastIndexOf(""bread"");
    if (breadStart != breadEnd && breadEnd > 5)
    {
        return (str.substring(breadStart + 5, breadEnd)  );
    }
    else
    {
        return """";
    }
    
}
",
8c963fd43ebd7f0640a20658e78434e55bda7b05,"public boolean isEverywhere(int[] nums, int val)
{
    for(int i =0; i < nums.length - 1; i++)
    {
        if(nums[i] != val && nums[i + 1] != val)
            return false;
    }
    return true;
}
",
4451f56f297e641c3925f657e88b73a66a82c8d0,"public int[] tenRun(int[] nums)
{
    for (int i = 0; i < nums.length; i++){
        if (nums[i] % 10 == 0 && i != nums.length - 1){
            int storage = nums[i];
            i++;
            while (nums[i] % 10 != 0 && i != nums.length - 1){
                nums[i] = storage;
                i++;
            }
        }
    }
    return nums;
}
",
2b92c031167d3664a0be5ab4cee6d5ad678ce824,"public int sum67(int[] nums)
{
    int count = 0;
    int seven = 0;
    
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] == 6)
        {
           for (int x = i; x < nums.length; x++)
           {
               if (nums[x] != 7)
               {
                   count = count + 0;
               }
               else if (nums[x] == 7)
               {
                   count = count + 0;
                   i = i + x;
               }
           }
        
        }
        
        count = count + nums[i];
        // i'm stuck on excluding numbers up till 7.
        // okay, i'm trying to say:
        // when you reach a 6, ignore the 6.
        // then, ignore each number until you reach a 7.
        
        // so perhaps the smarter way to state this is:
        // ahhh maybe a separate int to count 7's?
        
        // i'm thinking in the way the problem is laid out for me, where
        // i'm supposed to ""ignore"" sections of numbers
        
        // maybe just fucking count them all and ignore the ones in between 6 and 7
        
       
        
    }
    
    return count;
}

",
2341aa02180229566878128a50f5ccba14fdcee3,"public int[] frontPiece(int[] nums)
{
    int number[] = new int[2];
    for (int numbers: nums)
    {
        number[i] = numbers;
    }
    return number;
}
",
3c7fcd8b79f482dfed60c826a914d6e742c28ac2,"public int noTeenSum(int a, int b, int c)
{
	return fixTeen(a) + fixTeen(b) + fixTeen(c);
}

public int fixTeen(int n)
{
    if (n >= 13 && n <= 19 && n != 15 && n != 16)
        return 0;
}
",
b1ffd079f8c4294a66e06ad7d2fb2a7a8fbe7344,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
3d4c98b74adf52d4ca5fe21febb24b1a8f6a6120,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++) {
        if (nums[i] != val && nums[i + 1] != val) {
            return false;
        }
    }
    return true;
}
",
45bb0c43390b2898deab9a359cdda85e43e43e39,"public int[] shiftLeft(int[] nums)
{
    int[] result = new int[nums.length];
    for (int i = 0; i< nums.length - 1; i++)
    {
		result[i] = nums[i+1];
    }
    result[nums.length - 1] = nums[0];
    
    return result;
}
",
44401b7a795caa5e1f94585e15dc8c88bdb84119,"public boolean isEverywhere(int[] nums, int val)
{	
    for (int i = 0; i < nums.length - 1; i++)
    {
        if ( nums[i] != val && nums[i+1] != val)
        {
            return false;
        }
    }
    return true;
}
",
44a9f4ec3b4a6a2ecc39a8beb8b7668b4b148e2f,"public boolean bobThere(String str)
{
    int l = str.length() - 2;
    
    for (int i = 0; i < l; i++)
    {
        if (str.charAt(i) == 'b' && str.charAt(i + 2) == 'b')
        {
            return true;
        }
    }
    return false;
}
",
62ce70304358abfdd932378fb6cd7769b980fdc9,"public int noTeenSum(int a, int b, int c)
{
	return fixTeen(a) + fixTeen(b) + fixTeen(c);
}

public int fixTeen(int n)
{
    if (13 <= n && n <= 19)
    {
        if (n != 15 || n != 16)
        {
            n = 0;
        }
        return n;
    }
}
",
f0965dc5b01333c0db74c3b81e48129583709ad9,"public int sortaSum(int a, int b)
{
    int sum = (a + b);
    if (10 <= sum && sum <= 19)
    {
        return 20;
    }
    return sum;
}
",
0808dca8b4a525f8b42f6b75f66b3b1d93c3c6cc,"public int sum13(int[] nums)
{
    int sum = 0;
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] != 13 && nums[i - 1] != 13)
        {
            sum += nums[i];
        }
    }
    return sum;
}
",
33e1684529896667b663d935101657bf9205ef10,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] != val && nums[i + 1] != val)
            return false;
    }
    return true;
}
",
2b92c031167d3664a0be5ab4cee6d5ad678ce824,"public int sum67(int[] nums)
{
    int count = 0;
    int seven = 0;
    
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] == 6)
        {
           for (int x = i; x < nums.length; x++)
           {
               if (nums[x] != 7)
               {
                   count = count + 0;
               }
               else if (nums[x] == 7)
               {
                   count = count + 0;
                   i = i + x;
               }
           }
        
        }
        
        count = count + nums[i];
        // i'm stuck on excluding numbers up till 7.
        // okay, i'm trying to say:
        // when you reach a 6, ignore the 6.
        // then, ignore each number until you reach a 7.
        
        // so perhaps the smarter way to state this is:
        // ahhh maybe a separate int to count 7's?
        
        // i'm thinking in the way the problem is laid out for me, where
        // i'm supposed to ""ignore"" sections of numbers
        
        // maybe just fucking count them all and ignore the ones in between 6 and 7
        
       
        
    }
    
    return count;
}

",
b03f6ee58d1c2efbc298c1b090d888a47d5425a9,"public boolean evenlySpaced(int a, int b, int c)
{
    if (b-a <= 1 && c-a >= 2 && c-b >= 2 
        || b-a >= 2 && c-a <= 1 && c-b >=2
        || b-a >=2 && c-a >= 2 && c-b <= 1)
        return true;
    return false;
}
",
e7b6e4f287f8c6938b8b88652157d73da80ecef9,"public int countClumps(int[] nums)
{
    int count = 0;
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] == nums[i+1])
        {
            count++;
            for (int j = 2; j == nums[i]; j++)
            {
            	i++;
            }
        }
    }
    return count;
}
",
a43f9daaa9b5cc98acfe197b9157d9de345febf6,"public int[] frontPiece(int[] nums)
{
    for (int numbers: nums; int i = 0; i < 2; i++)
    {
        int number[i] = numbers;
    }
    return number;
}
",
f1f0a6448bfe3ad005796a40633fc50d6ffa6023,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
7e7c66de43f3403869e2a5e32affc77e3e798f68,"public int sum13(int[] nums)
{
    boolean before = false;
    int sum = 0;
    for (int i = 0; i < nums.length; i++)
    {
        if (before == true)
        {
            continue;
        }
        
        if (nums[i] != 13)
        {
        	sum = sum + nums[i];
            before = flase;
        }
        else
        {
            before = true;
        }
            
    }
    return sum;
}
",
3716e52883778fd89a65151c2b55e28aaab539b2,"public int caughtSpeeding(int speed, boolean isBirthday)
{ if (speed <= 60)
{
    return 0;
}
if (speed >= 61 && speed <= 80)
{
    return 1;
}
if (isBirthday())
{
    return 2;
}
}
",
3eb765355b81909fe2778872f22843054944d21a,"public int[] tenRun(int[] nums)
{
    if (nums.length<1)
    {
        return nums;
    }
    int tenn = nums[0];
    for (int i = o: i < nums.length; i++)
    {
        if (tenn % 10 !=0)
        {
            tenn = nums[i];
        }
        if (nums[i] % 10 == 0)
        {
            tenn = nums[i];
        }
        nums[i] = tenn;
    }
    return nums;
}
",
6d62699ce20db7e91bf9a9c10e2cc7b3850ad892,"public int[] tenRun(int[] nums)
{
    for (int i - 0; i < nums.length; i++)
    {
    	if nums[i] % 10 == 0
        {
        	for (int j = i + 1; j < nums.length &&
                 !(nums[j] % 10 == 0); j++)
        	{
        		nums[j] = nums[i];
        	}   	  
        }
        return nums;
    }
}
",
f720cc450f616d826f746ce4609c79ab1860b68a,"public int[] fizzArray(int n)
{
    int[] result = new int[n];
        for (int i = 0; i<n.length;i++)
        {
            result[i-1] = i;
        }
    return result;
}
",
c5aebb4151a6c14d6fb00ca52ff6164ceb64474b,"public int noTeenSum(int a, int b, int c)
{
    return fixTeen(a) + fixTeen(b) + fixTeen(c);
}

public int fixTeen(int n)
{
    return (n &gt;= 13 &amp;&amp; n &lt; 15 || n &gt; 16 &amp;&amp; n &lt;= 19) ?
        0 : n;
}
",
06be09e2d8d4ddfe4333697a3feaadf8e8dc3077,"public int countClumps(int[] nums)
{
    int num = 0;
    boolean still = false;
    boolean clump = false;
    for (int i = 1; i < nums.length - 1; i++)
    {
        if (nums[i] == nums[i - 1])
        {
            clump = true;
        }
        else if (nums[i] == nums[i + 1])
        {
            still = true;
            continue;
        }
        else
        {
            num++;
        }
    }
}
",
a9e28b208ebd799c89289ae125794d7301b373d2,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 1; i < nums.length() - 1; i++)
    {
        if (nums[i - 1] != val && nums[i + 1] != val)
            return false;
    }
    return true;
}
",
708073e053068889622d8588b7bec2ceea644404,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
f32469ce2d9f61a9f70998196fbafbd23ef66dd5,"public int countClumps(int[] nums)
{
    int count = 0;
    for (int i = 0; i < nums.length-1; i++)
    {
        if (nums[i] == nums[i+1])
        {
            i++;
    		count++;
            while (nums[i] == nums[i+1])
            {
                i++;
            }
        }
    }
    return count;    
}
",
06d8c76abed0f952e57d7cac3ed1759a9584d990,"public String getSandwich(String str)
{
    int length = str.length();
    int breadStart = str.indexOf(""bread"");
    int breadEnd = str.lastIndexOf(""bread"");
    if (breadStart != breadEnd && breadEnd > 5)
    {
        return (str.substring(breadStart + 5, breadEnd)  );
    }
    else
    {
        return """";
    }
    
}
",
d822cf12d38ea28fe825ff4fc14fdc94e6719f05,"public boolean bobThere(String str)
{
    int i = 0;
    char[] CharArray = str.toCharArray();
    for(char cha : CharArray){
    	if (cha == 'b'){
        	if (str[i + 2] == 'b'){
            	return true;
            }
        }
     	i++;
    }
    return false;
}
",
94c122a021a2cf0d8bce563a59aea25bbb53928a,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++) {
        if (val != nums[i] && val!= nums[i+1]) {
            return false;
        }
    }
    return true;
}
",
faa6cc44696d72e0fa85cc561584a1de159a4aa5,"public int dateFashion(int you, int date)
{
    if (you <= 2 || date <= 2)
        return 0;
    if (you >= 8 || date >= 8)
        return 2;
    return 1;
}
",
cf50e456db1821c67d784b4596db0e3038f70941,"public boolean isEverywhere(int[] nums, int val)
{
//    for (int i = 0; i < nums.length; i++)
//    {
  //   	if (nums[i] != val || nums[i++] != val)
    //    {
      //      return false;
        //}
    //}
    //return true;
boolean result = true;
for (int i = 0; i <=nums.length-2;i++)
{
	if ( nums[i] != val && nums[i+1] != val)
	result = false;
}
return result;
}
",
850b29b41eb8755b65684da314498e5f9f502ead,"public int[] frontPiece(int[] nums)
{
    if (nums.length .isEqual(1)
        return nums;
    if (nums.length .isEqual(2)
        return nums;  
    else
        int[] sum = new int [nums.length];
        sum[0] = nums[0];
        sum[1] = nums[1];
        return sum;
    
   // int[] sum = new int [nums.length-1];
    //for (int i = 0; i < nums.length; i++)
      //  sum[i] = nums[i];
   //return sum;
}
",
2dec94789ad2db07905f14995eddc4d0c9fb74f2,"public int makeChocolate(int small, int big, int goal)
{
    if ((small + big * 5) < goal)
    {
     	return -1;   
    }
    int smallLeftOver = goal - big * 5;
    /*if (smallLeftOver <= 0)
    {
     	return 0;   
    }*/
    if (big * 5 > goal)
    {
     	return goal % 5;   
    }
    else 
    {
     	return smallLeftOver;   
    }
}
",
8a4197cd94d2fc278a10045f02c9323393eb70ad,"public boolean sameEnds(int[] nums, int n)
{
    for (int i = 0; i < n; i++)
    {
        if (nums[i] != nums[nums.length - n + i])
            return false;
    }
    return true;
}
",
987f265fb4f09a7db40586aa6a321d7c612fa526,"public boolean has77(int[] nums)
{
    int count = 0;
    
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] == 7 && nums[i+1] == 7)
        {
            count = 1;
        }
        else if (nums[i] == 7 && nums[i+2] == 7 && i < nums.length - 3)
        {
            count = 1;
        }
    }
    // okay, another approach is to check if there are two 7's.
    // if there are, store their [] as variables
    // if the difference between them is greater than 2, then false
    
    return (count == 1);
}
",
e449000228690301ed3d3de32e7ccd3ba51bef53,"public String alarmClock(int day, boolean vacation)
{
    if (vacation)
    {
        if (day >= 1 && day <= 5)
        {
            return alarmClock;
        }
    }
}
",
6b9f55c88028fdb9f9e0adbb7f59b28fb9564c5a,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] != val)
        {
            if (i < nums.length - 1)
            {
                if (nums[i + 1] != val)
                {
                    return false;
                }
            }
        }
        
    }
    return true;
}
",
c72936a1839694da8df5554d66db79bf67bec60c,"public int caughtSpeeding(int speed, boolean isBirthday)
{ 
    if (isBirthday)
    {
        speed = speed + 5
    }
	if (speed <= 60)
	{
    	return 0;
	}
    
	if (speed >= 61 && speed <= 80)
	{
    	return 1;
	}
    
	if (speed >= 81)
	{
    	return 2;
	}
	
}
",
de22bdd8aa3fe3c905f78ecf7bce75e7f577cc0f,"public int[] shiftLeft(int[] nums)
{
    int[] fresh = new int[nums.length];
    if (nums.length > 0)
    {
    	fresh[nums.length - 1] = nums[0];
    	for (int i = 0; i < nums.length - 1; i++)
    	{
        	fresh[i] = nums[i + 1];
    	}
    }
    return fresh;
}
",
a2ef5d82ffeb0d2c874c95de31b9ca6d0e3da825,"public String repeatEnd(String str, int n)
{ 	
    String res=str.substring(str.length()-n);//n = 0 return null or exception?
    for(int i=1;i<n;i++)
    {		// String res?
            res=res+str.substring(str.length()-n);
    return res;
    }
}
",
a641c5efbb7e5f53f92580571992aa0a53d6cdf6,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
9ba9d8618a99bf06f7c45d5ee796bf2c7bcc2325,"public boolean twoTwo(int[] nums)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] == 2)
        {
            if (nums[i + 1] != 2)
            {
                return false;
            }
            i++;
        }
    }
    if (nums. length >= 2 && nums[nums.length - 2] != 2 && nums[nums.length - 1] == 2)
    {
        return false;
    }
    return true;
}
",
8ce774ddf43260b9faa39499c3a67d91f71fc099,"public boolean squirrelPlay(int temp, boolean isSummer)
{
    { if (!isSummer && temp >= 60 && <= 90)
    {
        return true;
    }}
}
",
e05151e763b22c6322f72dd9558578b0970a10d6,"public boolean canBalance(int[] nums)
{
    double sum = 0;
    for (int n : nums) {
        sum += n;
    }
    
    double target = sum / 2;
    sum = 0;
    
    for (int i : nums) {
        sum += i;
        if (sum == target) {
            return true;
        }
    }
    return false;
}
",
6f7f61c8665e5fbb33bb6cdb300c38706ffa9630,"public int centeredAverage(int[] nums)
{
    int average = 0;
    int sum = 0;
    int low = nums[0];
    int high = nums[0];
    boolean found = false;
    
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] > high)
        {
            high = nums[i];
        }
        
        if (nums[i] < low)
        {
            low = nums[i];
        }
    }
    
    for (int a : nums)
    {
        sum = sum + a;
    }
    
    sum = sum - low - high;
    
    average = sum / (nums.length - 2)
    
    return average;
}
",
3a5b1294ef5b59964830e8cf8f6219db0c34b7d8,"public int blackjack(int a, int b)
{
    double remainA;
    remainA = (a % 21); //NOTE: The '%' yields the remainder!!!!
    double remainB;
    remainB =  (b % 21);
    
    // IF the remainder is large for one number, IT IS FAR AWAY from 21.
    if (a > 21 && b > 21)
    {
        return 0;
    }
    else if (a < 21 || b < 21)
    {
        if (a < 21 && b > 21)
        {
            return a;
        }
        else
        {
            return b;
        }
    }
    else
    {
        if (remainA > remainB)
        {
            return b;
        }
        else
        {
            return a;
        }
    }
}",
b6c8be2f5f7309923ebb19a0553979d7cc50dce9,"public String zipZap(String str)
{
    for (int i = 0; i < str.length() - 2; i++) 
    {
    if (str.charAt(i) == 'z' && str.charAt(i + 2) == 'p')
    {
        str.replace(str.substring(i + 1), """");
    }
    }
    return str;
}
",
b05268e4079f92fa8c479a385b128576976d16c9,"public String atFirst(String str)
{
    String result = str.substring(0, 2);
    
    String value = '@';
    
    if (result.length() == 0)
    {
        result.charAt(0) = '@';
        result(1) = '@';
    }
    else if (result.length() == 1)
    {
        result(1) = '@';
    }
    else
    {
        result = result;
    }
    
    return result;
}
",
e05151e763b22c6322f72dd9558578b0970a10d6,"public boolean canBalance(int[] nums)
{
    double sum = 0;
    for (int n : nums) {
        sum += n;
    }
    
    double target = sum / 2;
    sum = 0;
    
    for (int i : nums) {
        sum += i;
        if (sum == target) {
            return true;
        }
    }
    return false;
}
",
83a239f0521cd38117ddbaaf228f8523a019cc40,"public boolean endOther(String a, String b)
{
    return a.toLowerCase().endsWith(b.toLowerCase()) || b.toLowerCase().endsWith(a.toLowerCase());
}
",
948b5b2528e52a0cd157a7b353521353f3da1fef,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
     return (isMom || (!(isAsleep)));

}
",
33e1684529896667b663d935101657bf9205ef10,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] != val && nums[i + 1] != val)
            return false;
    }
    return true;
}
",
a948531c5f36b52d18c23067a3df3f2438fc7b3c,"public int[] frontPiece(int[] nums)
{
    int[] first2;
    for (int i=0; i < 2 && i < nums.length; i++)
    {
        first2.add(nums.get(i));
    }
    return first2;
}
",
f7613e1314baffe2be7c9164f5586a14e6e82fd6,"public int countCode(String str)
{
    int count = 0;
    for (int i = 0; i < str.length() - 4; i++) {
        if (str.substring(i, i + 1).equals(""co"") && str.charAt(i + 3) == 'e') {
            count++;
        }
    }
    return count;
}
",
8a4197cd94d2fc278a10045f02c9323393eb70ad,"public boolean sameEnds(int[] nums, int n)
{
    for (int i = 0; i < n; i++)
    {
        if (nums[i] != nums[nums.length - n + i])
            return false;
    }
    return true;
}
",
93d04bbaaacbdc2e43e79af8101e3443d99f3216,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
8320e574f1b2963b87989be8f9ea952fbd5ed290,"public int sortaSum(int a, int b)
{
    int sum;
    if (sum >= 10 && sum <= 20)
    {
     	return 20;   
    }
    else
    {
     	return sum;   
    }
}
",
eb40012d4b37cf5da376cf00035ed5e704fcbffc,"public int[] tenRun(int[] nums)
{
    for (int i = -1; i < nums.length; i++)
    {
        if (nums[i] % 10 == 0)
        {
            i++
        }
        else
        {
            nums[i] = 10;
        }
    }
    return nums;
}",
dd09babe580586f1680177c5f9004d2f1f2011bf,"public boolean has77(int[] nums)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] == 7 && nums[i + 1] == 7)
            return true;
        if (nums[i] < nums.length - 2 && nums[i] == 7 && nums[i + 2] == 7)
            return true;
    }
    return false;
}
",
57de305af5c397df593d610c754a2029157ce03a,"public int[] tenRun(int[] nums)
{
    for (int i =0; i <nums.length; i++)
    {
        if (nums[i] % 10 == 0)
        {
            for (int j = i+1; j < nums.length && nums[j] % 10 != 0; j++)
            {
                nums[j] = nums[i]; 
            }
        }
    }
    
    return nums; 
    
}
",
3da6d13c5e129585a85f09cc153cb57358bb6316,"public String without2(String str) 
{
    if (str.length() >= 2)
    {
        if (str.substring(0,2).equals(str.substring(str.length() - 2)))
        {
            return str.substring(2);
            // if the two letters at the beginning of the word and at the end of the word are equal to each other, the string will returned with these two letters
        }
        else
        {
            return str;
            // if the two letters are not equal to each other, then the original string will be returned
        }
    }
    else
    {
        return str;
        //if the word is only two letters or less, it will return the original string 
    }
}
",
3e52e3a1544f71192d5ae9883005f6c91861bff1,"public int noTeenSum(int a, int b, int c)
{
    return fixTeen(a) + fixTeen(b) + fixTeen(c);
}

public int fixTeen(int n)
{
    switch (n) {
        case 13:
        case 14:
        case 17:
        case 18:
        case 19:
            return 0;
            break;
        default:
            return n;
            break;
    }
    
}
",
da986520180a13a98bb67c061d43bd9c2686e469,"public String alarmClock(int day, boolean vacation)
{
    if (vacation) { 
        if (day == 0 || day == 6) {
            return ""off"";
        } else {
            return ""10:00"";
        }
    } else {
        if (day == 0 || day == 6) {
            return ""10:00"";
        } else {
            return ""7:00"";
        }
    }
}
",
9e81d1a2a7638c14b721846f5090b36ad07ab308,"public int[] seriesUp(int n)
{
    int[] result = new int[(n * (n + 1)) / 2];
    int count = 1;
    int index = 0;
    for (int i = 0; i < result.length; i++)
    {
        for (int j = 0; j < count; j++)
        {
            result[index] = j;
        	index++;
        }
        count++;
    }
}
",
8141614e2f84bc6e34254af7c2e2e4d859a39e2a,"public int countEvens(int[] nums)
{
    int result = 0;
    
    for (i = 0; i < nums.length; i++)
    {
        if ( nums[i] % 2 == 0)
        {
            result += 1;
        }
            
    }
    
    return result;
}
",
9def91e03cb4c9e4fb5f0472d02e90c8fb23cc26,"public int makeChocolate(int small, int big, int goal)
{
    int amount = (5*big) + small; // Amount possible
    if (amount < goal)
    {
        return -1;
    }
    else if (amount == goal)
    {
        return small;
    }
    else
    {
        int diff = amount - goal;
        int afterBig = diff - (5*big);
        if (afterBig < 0)
        {
            return small;
        }
        else
        {
            return small - afterBig;
        }
    }
}
",
9df1cbdbe2059e87bcede6e1d1033ffff3e609ed,"public int[] withoutTen(int[] nums)
{
  	int[] result = new int[nums.length];
  	int count = 0;
  	
    for (int i = 0; i < nums.length; i++)
    {
     	if (nums[i] != 10)
        {
         	result[count] = nums[i];
            count++;
        }
    }
    for (int i = 0; i < count; i++)
    {
     	result[result.length - i] = 0;
    }
    
    return result;
}
",
37483792e65efa307aab5d74a47b4a1dbe36e195,"public boolean bobThere(String str)
{
    //int firstB = str.indexOf(""b"");
   // int secondB = str.lastIndexOf(""b"");
    //if (secondB == firstB + 2)
    //    return true;
   // return false;
    for (int n == 0; n < str.length(); n++)
    {
        if ((str.charAt(n) == str.indexOf(""b"") && (str.charAt(n + 2) == str.indexOf(""b"", n))
        {
            return true;
        }
                
    }//end for loop
    return false;
}
",
cfc6cb87b23f11a2f4bbbf92a708643e8012b8fb,"public int countEvens(int[] nums)
{	
    int count = 0;
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] % 2 == 0))
        {
            count++;
        }
    }
    return count;
}
",
1246d82dc38af3da4d77890172a9d1890cc382a1,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
c1fdbe3e9fca73de72f1831d00c35304cb29463e,"public int[] fizzArray(int n)
{
    int[] result = new int[n];
    for (int i = 0; i < n; i++)
    {
        result[i] = i;
    }
    return result;
}
",
2ab613317018e535c7c370e1bf3fb0d86c7a9f9b,"public int[] tenRun(int[] nums)
{
    int[] result = new int[nums.length];
    int input;
    int value = -1;
    
    for (int i = 0; i < nums.length; i++)
    {
        input = nums[i];
        
        if (input % 10 == 0 && input > value)
        {
            value = input;
        }
        
        if (value == -1)
        {
            result[i] = input;
        }
        else
        {
            result[i] = value;
        }
    }
    
    return result;
}
",
03214c012595799b1d44115e7fb9f61f1ea48c6b,"public String getSandwich(String str)
{
    if (str.startsWith(bread) && st.endsWith(bread))
    {
        return (str.substsring(5, (str.length() -5))));
    }
}
",
56e4dc22fcaa600e70470c4379b993e5425d1fd5,"public boolean bobThere(String str)
{
    if (str.length() < 3)
        {
            return false;
        }
    
    for (int i = 0; i < str.length() - 2; i++)
    {
        if (str.charAt(i) == 'b' && str.charAt(i + 2) == 'b')
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    return bobThere(str);
}
",
a4a204a7f131a2bd02585a880d46d98f1098fd2d,"public boolean squirrelPlay(int temp, boolean isSummer)
{
    if (isSummer){
        return (temp >= 60 && temp <= 100);
    }
    return (temp >= 60 && temp <= 90);
}
",
bbf414c607917bae018f323952576cc4855d0403,"public int[] fix45(int[] nums)
{
    int[] fours = new int [3];
    int[] fives = new int[3];
    int index4=0;
    int index5 = 0;
    for (int i=0; i<nums.length;i++)
    {
        if (nums[i] == 4)
        {
            fours[index4] = i;
            index4++;
        }
        else if (nums[i] == 5)
        {
            fives[index5] = i;
            index5++;
        }
    }
    for (int i = index5-1; i>=0;i--)
    {
        if (nums[fours[i]+1]!=5)
        {
        	nums[fives[i]] = nums[fours[i]+1];
        	nums[fours[i]+1] = 5;
        }
    }
    
    
    
    
    //int start = 0;
    //int skip = -1;
    //for (int i=0; i<nums.length;i++)
    //{
    //    if (nums[i] == 4)
    //    {
    //        for (int j=start; j<nums.length;j++)
   	//		{
    //            if (j!=skip && nums[j]==5)
    //            {
    //                nums[j]=nums[i+1];
    //                nums[i+1]=5;
    //                skip = i+1;
    //                break;
    //            }
    //        }
    //    }
    //}
    return nums;
}
",
de2b521aa2c62ce8dcb54219041aa20489dda3f4,"public int loneSum(int a, int b, int c)
{
    if (a == b && b == c)
        return 0;
    if (a == b)
        return c;
    if (b == c)
        return a;
    if (a == c)
        return b;
    return a + b + c;
}
",
6b9f55c88028fdb9f9e0adbb7f59b28fb9564c5a,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] != val)
        {
            if (i < nums.length - 1)
            {
                if (nums[i + 1] != val)
                {
                    return false;
                }
            }
        }
        
    }
    return true;
}
",
b8c119c667e36132f25df0fd31ba102f94d1c6df,"public boolean evenlySpaced(int a, int b, int c)
{
    if (a != b && a != c && b != c)
    {
         return (Math.abs(b - a) == Math.abs(c - b) 
         || Math.abs(b - a) == Math.abs(c - a)
         || Math.abs(a - b) == Math.abs(c - b)
         || Math.abs(c - a) == Math.abs(b - c) 
         || a == b && b == c);
    }
    return false;
}
",
CodeStateID,Code,
ed3b1df13e4b0c1e12a2a3f406666ff7422ea1e3,"public boolean xyBalance(String str)
{
    for (int i = 1; i <= str.length(); i++)
        if (str.charAt(i) == x)
            if (str.charAt(i+1) == y)
                return true;
    if (!str.endsWith(""y""))
        return false;
    return true;
}
",
6d62699ce20db7e91bf9a9c10e2cc7b3850ad892,"public int[] tenRun(int[] nums)
{
    for (int i - 0; i < nums.length; i++)
    {
    	if nums[i] % 10 == 0
        {
        	for (int j = i + 1; j < nums.length &&
                 !(nums[j] % 10 == 0); j++)
        	{
        		nums[j] = nums[i];
        	}   	  
        }
        return nums;
    }
}
",
1ac085374f785c20ca501ac5939ec5977db8a972,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
    if (isAsleep)
    {
        return false;
    }
    
    if (isMorning)
    {
 		return false;   
    }
    
    return true;
}
",
93d04bbaaacbdc2e43e79af8101e3443d99f3216,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
2b92c031167d3664a0be5ab4cee6d5ad678ce824,"public int sum67(int[] nums)
{
    int count = 0;
    int seven = 0;
    
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] == 6)
        {
           for (int x = i; x < nums.length; x++)
           {
               if (nums[x] != 7)
               {
                   count = count + 0;
               }
               else if (nums[x] == 7)
               {
                   count = count + 0;
                   i = i + x;
               }
           }
        
        }
        
        count = count + nums[i];
        // i'm stuck on excluding numbers up till 7.
        // okay, i'm trying to say:
        // when you reach a 6, ignore the 6.
        // then, ignore each number until you reach a 7.
        
        // so perhaps the smarter way to state this is:
        // ahhh maybe a separate int to count 7's?
        
        // i'm thinking in the way the problem is laid out for me, where
        // i'm supposed to ""ignore"" sections of numbers
        
        // maybe just fucking count them all and ignore the ones in between 6 and 7
        
       
        
    }
    
    return count;
}

",
f32469ce2d9f61a9f70998196fbafbd23ef66dd5,"public int countClumps(int[] nums)
{
    int count = 0;
    for (int i = 0; i < nums.length-1; i++)
    {
        if (nums[i] == nums[i+1])
        {
            i++;
    		count++;
            while (nums[i] == nums[i+1])
            {
                i++;
            }
        }
    }
    return count;    
}
",
100f26d18ee4e0e1619542ed10f1e83b537d6b04,"public int sum3(int[] nums)
{
    sum = sum3[0];
    sum+=sum3[1];
    sum+=sum3[2];
    return sum;
}
",
dc23e528bd74dbcdb541ee29b004f0426a8d31c4,"public boolean squirrelPlay(int temp, boolean isSummer)
{
    if (isSummer && temp >= 60 && temp <= 100)
        return true;
    if (!isSummer && temp >= 60 && temp <= 90)
        return true;
    return false;
}
",
8320e574f1b2963b87989be8f9ea952fbd5ed290,"public int sortaSum(int a, int b)
{
    int sum;
    if (sum >= 10 && sum <= 20)
    {
     	return 20;   
    }
    else
    {
     	return sum;   
    }
}
",
98b41121a7f0c87d5746dc0ae2746596c4a8bb37,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
83a239f0521cd38117ddbaaf228f8523a019cc40,"public boolean endOther(String a, String b)
{
    return a.toLowerCase().endsWith(b.toLowerCase()) || b.toLowerCase().endsWith(a.toLowerCase());
}
",
dbbe2c6beeefd93c68c1cf77a6130ed4323b9aa3,"public int countEvens(int[] nums)
{
    int count = 0;
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] % 2 == 0)
        {
            count++;
        }
    }
    return count;
}
",
9cc2c42507d801b5f8e1c84de08d64ef59eb5672,"public boolean endOther(String a, String b)
{
    String x = ""a"" + ""b"";
    return x;
    
}
",
21f49c70a5574e177ee0e928d52f7656fb37a03a,"public boolean canBalance(int[] nums)
{
    int same = 0;
    int sum = 0;
    for (int i=0;i<nums.length;i++)
    {
        sum += nums[i];
    }
   
    for (int i=0;i<=nums.length-2;i++)
    {
        same += nums[i];
        sum -= nums[i];
    
    if (same == sum)
    {
        return true;
    }
    }
    return false;
}",
4eb6382872b95c713ee9b9ee3717c152840acf5e,"public int[] zeroMax(int[] nums)
{
    int[] numArray;
    for(int i : nums)
    {
        if (nums[i] == 0)
        {
            nums[i] = largestOdd(i, nums);
        }
    }
    return numArray;
}

public int largestOdd(int position, int[] nums2)
{
    int biggestOdd = 0
    for (int i = position; i < nums2.length; i++)
    {
        if (nums2[i] % 2 == 1 && nums2[i] > biggestOdd)
        {
            biggestOdd = nums2[i];
        }
    }
    return biggestOdd;
}",
33e1684529896667b663d935101657bf9205ef10,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] != val && nums[i + 1] != val)
            return false;
    }
    return true;
}
",
9ecf844f1f204bb4033d9d6a0027d8c4a1d17f71,"public int[] zeroMax(int[] nums)
{
    
    
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] == 0)
        {
            nums[i].findMaxOdd(i, nums);
        }
    }
    return nums;
}





public int findMaxOdd(int i, int[] nums)
{
    int maxOdd;
    maxOdd = 0;
    
    for (int b = i; b < nums.length - 1; b++)
    {
        if (nums[b] % 2 != 0 && nums[b] > maxOdd)
        {
            maxOdd = nums[b];
            nums[i] = nums[b];
        }
    }
    return maxOdd;
}

",
b1734b84d9123cc28d3f62e758b480ab26ea8fb9,"public int sortaSum(int a, int b)
{
   int sum = a + b;
   if (sum >= 10 && sum <= 19)
   {
   		return 20; 
   }
   else
   {
   		return sum;
   }
}
",
63ba2e643b4b30f1a55fc704d2da881e424c0864,"public boolean has77(int[] nums)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] == 7)
        {
            if (nums[i + 1] == 7)
            {
                return true;
            }
            else if (i < nums.length - 2 && nums[i + 2] == 7)
            {
                return true;
            }
        }
    }
    return false;
}
",
54f16f3c5196c9d23444381409e354f9fae465c0,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
2dec94789ad2db07905f14995eddc4d0c9fb74f2,"public int makeChocolate(int small, int big, int goal)
{
    if ((small + big * 5) < goal)
    {
     	return -1;   
    }
    int smallLeftOver = goal - big * 5;
    /*if (smallLeftOver <= 0)
    {
     	return 0;   
    }*/
    if (big * 5 > goal)
    {
     	return goal % 5;   
    }
    else 
    {
     	return smallLeftOver;   
    }
}
",
c9864807562ce05a0e1872a9d5d2eae382cb6654,"public boolean canBalance(int[] nums)
{
    boolean result = false;
        int nums1 = 0;
    	int nums2 = 0;
        for (int i = 0; i < nums.length / 2; i++)
        {
            nums1 += nums[i];
        }
        
        for (int j = (nums.length / 2 ) + 1; j < nums.length; j++)
        {
            nums2 += nums[j];
        }
        
        if (nums1 == nums2)
        {
            result = true;
        }
    return result;
}
",
a3cfe4acc0878f7a98ccbc168df9dff28266dbd7,"public int[] frontPiece(int[] nums)
{
    int [] grid = new int[2];
    
    // establish logi for checking nums.
    // add the proper elements of nums into a new array 
    if (nums.length == 1)
    {
        return grid[0] = nums[0];
    }
    else if (nums.length == 0)
    {
        return grid;
    }
    else
    {
        return grid[nums[0], nums[1]];
    }
}
",
eb9d1e97323f6c0c1410dd8ae35aa261280fc389,"public boolean endOther(String a, String b)
{
    a = a.toLowerCase();
    b = a.toLowerCase();
    return(a.endsWith(b) || b.endsWith(a));
    
    
}
",
00e965d53a2c068467dc780c163a1170b8d6a056,"public int countCode(String str)
{
    int count = 0;
    
    for (int i = 0; i < str.length() - 3; i++)
    {
        if (str.charAt(i) == 'c' && str.charAt(i + 1) == 'o' && str.charAt(i + 3) == 'e')
        {
            count++;
            i += 4;
        }
    }
    
    return count;
}
",
b25bb0be3214d6ebfc03874ccb1735f374a8c287,"public boolean twoTwo(int[] nums)
{
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] == 2)
        {
            if (nums[i + 1] != 2)
            {
                i++;
                return false;
                
            }
        }
    }
    return true;
}
",
8dbe6fb15987997ffaf0f07b86943c0bcb2846fb,"public String alarmClock(int day, boolean vacation)
{
    if (vacation)
    {
        if (day != 0 || day != 6)
        {
            return ""10:00"";
        }
        else
        {
            return ""off"";
        }
    }
	else
    {
        if (day != 0 || day != 6)
        {
            return ""7:00"";
        }
        else
        {
            return ""10:00"";
        {
    }


",
6ccaf37a8d9757fc57014287316ecd9409820fe7,"public int sortaSum(int a, int b)
{
    int sum = a + b;
    
    if (sum >= 10 || sum <= 19)
        return 20;
    else
        return sum;
    
}
",
fa7e52a8dd82b9e07db5c24a9f6640028d267b37,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] != val && nums[i + 1] != val)
        {
            return false;
        }
    }
    return true;
}
",
9dfb9d8285fed77ebe058ec80bfb80f2f1a5db2a,"public boolean sameEnds(int[] nums, int len) {
    for (int i = 0, j = nums.length - len; i < len; i++, j++)
        if (nums[i] != nums[j]) return false;
    return true;
}
",
b8c119c667e36132f25df0fd31ba102f94d1c6df,"public boolean evenlySpaced(int a, int b, int c)
{
    if (a != b && a != c && b != c)
    {
         return (Math.abs(b - a) == Math.abs(c - b) 
         || Math.abs(b - a) == Math.abs(c - a)
         || Math.abs(a - b) == Math.abs(c - b)
         || Math.abs(c - a) == Math.abs(b - c) 
         || a == b && b == c);
    }
    return false;
}
",
ecd2767c2649044a0da26903ef340674e89f1009,"public int[] fix45(int[] nums) {
  int[] result = nums;
  for(int i = 0; i < result.length; i++) {
      if(result[i] == 4 && i != result.length) {
          int index = findIndexOfValidFive(result);
           
          if(index != -1) {
              int temp = result[i + 1];
              result[i + 1] = result[index];
              result[index] = temp;
          }
      }
  }  
   
  return result;
}
 
public int findIndexOfValidFive(int[] nums) {
    for(int i = 0; i < nums.length; i++) {
        if((i == 0 && nums[i] == 5) || (nums[i] == 5 && nums[i - 1] != 4)) {
            return i;
        }
    }
     
    return -1;",
2341aa02180229566878128a50f5ccba14fdcee3,"public int[] frontPiece(int[] nums)
{
    int number[] = new int[2];
    for (int numbers: nums)
    {
        number[i] = numbers;
    }
    return number;
}
",
aa4d8b44bff62be088c0c94a7829aa410ffa133b,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    if (isBirthday)
    {
        if (speed <= 60)
        {
            return 0;
        }
        if (speed <= 80 && speed >= 61)
        {
            return 1;
        }
        if (speed >= 81)
        {
            return 2;
        }
    }
    if (!isBirthday)
    {
        if (speed <= 65)
        {
            return 0;
        }
        if (speed <= 85 && speed >= 66)
        {
            return 1;
        }
        if (speed >= 86)
        {
            return 2;
        }
    }
}",
9e81d1a2a7638c14b721846f5090b36ad07ab308,"public int[] seriesUp(int n)
{
    int[] result = new int[(n * (n + 1)) / 2];
    int count = 1;
    int index = 0;
    for (int i = 0; i < result.length; i++)
    {
        for (int j = 0; j < count; j++)
        {
            result[index] = j;
        	index++;
        }
        count++;
    }
}
",
3716e52883778fd89a65151c2b55e28aaab539b2,"public int caughtSpeeding(int speed, boolean isBirthday)
{ if (speed <= 60)
{
    return 0;
}
if (speed >= 61 && speed <= 80)
{
    return 1;
}
if (isBirthday())
{
    return 2;
}
}
",
d3bbd5372c67b93d7e4c5f3425ac793bb5763980,"public int sortaSum(int a, int b)
{
    int sum = a + b;
    if (sum >= 10 && sum <= 19)
        return 20;
    return sum;
}
",
a9e28b208ebd799c89289ae125794d7301b373d2,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 1; i < nums.length() - 1; i++)
    {
        if (nums[i - 1] != val && nums[i + 1] != val)
            return false;
    }
    return true;
}
",
59a0088f887207b9450033d0bec152a0c9e18bab,"public int[] shiftLeft(int[] nums)
{
    int[] result = new int[nums.length]; 
    result[nums.length - 1] = nums[0]; 
    int j = 0; 
    for (int i = 1; i < nums.length - 1; i++)
    {
        result[j] = nums[i];
        j++; 
    }
    
    return result; 
}
",
07e5044ee85fdfbd00a05896e4320766869d1163,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
6b538f7d9eac6f8c54cd2c59a699ca73280e0930,"public class FizzArray {

//fizzArray is a method which takes input n and prepares fizzArray

public static int[] fizzArray(int n) {

//initializing integer array with size n

int[] result = new int[n];

for (int i = 0; i < n; i++){

result[i] = i;

}

return result;

}
",
96649403e3463cc1c05171bea6b6b5e9d2710fe4,"public boolean isEverywhere(int[] nums, int val)
{
//    for (int i = 0; i < nums.length; i++)
//    {
  //   	if (nums[i] != val || nums[i++] != val)
    //    {
      //      return false;
        //}
    //}
    //return true;
    
    for (int i = 0; i <=nums.length-2;i++)

{

if ( nums[i] != val && nums[i+1] != val)

result = false;

}

  return result;

}
",
8c8cd198d6f34fe217432dd9a576510c86806426,"public boolean twoTwo(int[] nums)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] == 2 && nums[i+1] != 2)
        {
            return false;
        }
        else if (nums[i] == 2 && nums[i+1] == 2)
        {
            i++;
        }     
    }
    if (nums[length - 1] == 20
        return false;
    return true;
}
",
3e52e3a1544f71192d5ae9883005f6c91861bff1,"public int noTeenSum(int a, int b, int c)
{
    return fixTeen(a) + fixTeen(b) + fixTeen(c);
}

public int fixTeen(int n)
{
    switch (n) {
        case 13:
        case 14:
        case 17:
        case 18:
        case 19:
            return 0;
            break;
        default:
            return n;
            break;
    }
    
}
",
b1ffd079f8c4294a66e06ad7d2fb2a7a8fbe7344,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
c77723bd709b08d6e00161ce3c6ef305a61d69c9,"public boolean bobThere(String str)
{
    for (int i = 0; i < str.length()-2; i++) {
    if (str.charAt(i) == 'b' && str.charAt(i+2) == 'b') {
      return true;
    }
  }
  return false;
}
",
6e2e62d18f30974998599ac300549d4eb85fb22c,"public static int[] fizzArray(int n) {

//initializing integer array with size n

int[] result = new int[n];

for (int i = 0; i < n; i++){

result[i] = i;

}

return result;

}
",
14ced47f38f6da0c3afcc08c0bcb9ed96b5c73fe,"public String getSandwich(String str)
{
    if (str.indexOf(""bread"") > 0) // if there are two peices of bread
    {
         System.out.print(str.indexOf(""bread""));
        return ""no"";
    }
    else
    {
        return """";
    }
}
",
faa6cc44696d72e0fa85cc561584a1de159a4aa5,"public int dateFashion(int you, int date)
{
    if (you <= 2 || date <= 2)
        return 0;
    if (you >= 8 || date >= 8)
        return 2;
    return 1;
}
",
b03f6ee58d1c2efbc298c1b090d888a47d5425a9,"public boolean evenlySpaced(int a, int b, int c)
{
    if (b-a <= 1 && c-a >= 2 && c-b >= 2 
        || b-a >= 2 && c-a <= 1 && c-b >=2
        || b-a >=2 && c-a >= 2 && c-b <= 1)
        return true;
    return false;
}
",
7407aaf23f6102440a21d7a9618a9e989f370622,"public boolean cigarParty(int cigars, boolean isWeekend)
{
    boolean successful;
    if (cigars >= 40 && cigars <= 60 && !isWeekend)
        successful = !successful
}
",
a641c5efbb7e5f53f92580571992aa0a53d6cdf6,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
1ea3189c0e76fc78e90b40ea107d5f7321d1d626,"public boolean xyBalance(String str)
{
    int index1=0;
    int index2=0;
    for(int i=str.length();i>0;i--)
    {
        if (str.substring(i-1, i).equals(""x""))
            {
                 index1= i;
             }
    }
    for(int i=str.length();i>0;i--)
    {
        if (str.substring(i-1, i).equals(""y""))
        {
            index2= i;
        }                                           
    }
    return index1>index2;

}
",
45bb0c43390b2898deab9a359cdda85e43e43e39,"public int[] shiftLeft(int[] nums)
{
    int[] result = new int[nums.length];
    for (int i = 0; i< nums.length - 1; i++)
    {
		result[i] = nums[i+1];
    }
    result[nums.length - 1] = nums[0];
    
    return result;
}
",
2d98290b1cb9284df4caf4badcf8737e2c4efb14,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i=0;i<nums.length-1;i++) {
    	if (nums[i] != val && nums[i+1] != val) {
         return false;   
        }
        
    }
    return true;
}
",
9df1cbdbe2059e87bcede6e1d1033ffff3e609ed,"public int[] withoutTen(int[] nums)
{
  	int[] result = new int[nums.length];
  	int count = 0;
  	
    for (int i = 0; i < nums.length; i++)
    {
     	if (nums[i] != 10)
        {
         	result[count] = nums[i];
            count++;
        }
    }
    for (int i = 0; i < count; i++)
    {
     	result[result.length - i] = 0;
    }
    
    return result;
}
",
71d268cab1e5b5629eb35d8e729c7c8880965509,"public int countEvens(int[] nums)
{
    for (int count=0; count < nums.length; count++) {
  if (nums[count] % 2 == 0)
  even++;
  }
  return even;

}
",
33e1684529896667b663d935101657bf9205ef10,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] != val && nums[i + 1] != val)
            return false;
    }
    return true;
}
",
4ba46181a66bb2f3cf45d38876db8736b1ebda46,"public boolean in1To10(int n, boolean outsideMode)
{
    return ((n >= 1 && n<=10 && !outsideMode) || (n > 10 || n < 1 && outsideMode));
}
",
2dec94789ad2db07905f14995eddc4d0c9fb74f2,"public int makeChocolate(int small, int big, int goal)
{
    if ((small + big * 5) < goal)
    {
     	return -1;   
    }
    int smallLeftOver = goal - big * 5;
    /*if (smallLeftOver <= 0)
    {
     	return 0;   
    }*/
    if (big * 5 > goal)
    {
     	return goal % 5;   
    }
    else 
    {
     	return smallLeftOver;   
    }
}
",
c0dbc4d8e7248361a8572bc2edab98f5b3c74203,"public int greenTicket(int a, int b, int c)
{
    if (a != b && b != c && a != c){
        return 0;
    } 
    if (a == b && b == c){
        return 20;
    }
    if (a == b || b == c || a == c){
        return 10;
    }
}
",
739598df6f10e1b41997fbbce33f2e2bf0fd995e,"public boolean has77(int[] nums)
{
    int x = nums.length;
    for (int i = 0; i < x; i++)
    {
        if (i < x - 1 && nums.[i] == 7 && nums.[i + 1] == 7)
        {
            return true;
        }
        if (i < x - 2 && nums.[i] == 7 && nums.[i + 2] == 7)
        {
            return true;
        }
    }
    return false;
}
",
353250dbb0f7d8b1345775c3b7683b3a5c68b0d5,"public int makeChocolate(int small, int big, int goal)
{
    // small = 1 kilo each
    // big = 5 kilos each
    int numBig = 0;
    int numSmall = 0;
    numBig = goal / 5;
    numSmall = goal % 5;
    int sum = 5 * numBig + numSmall;
    
    if (numSmall > small)
    {
    	return -1;
    }
    else if (sum == goal)
    {
        return numSmall;
    }
    else
    {
        while (sum < goal && numSmall < small)
        {
            sum++;
            numSmall++;
        }
        
        if (goal == sum)
        {
            return numSmall;
        }
        else
        {
            return -1;
        }
            
    }
}
",
f1f0a6448bfe3ad005796a40633fc50d6ffa6023,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
44401b7a795caa5e1f94585e15dc8c88bdb84119,"public boolean isEverywhere(int[] nums, int val)
{	
    for (int i = 0; i < nums.length - 1; i++)
    {
        if ( nums[i] != val && nums[i+1] != val)
        {
            return false;
        }
    }
    return true;
}
",
1129ef37162a6b236aba63fdc6b01dbc55e8c4c0,"public String getSandwich(String str)
{
    int startBread = str.indexOf(""bread"");
    int endBread = str.lastIndexOf(""bread"");
	boolean firstBread = str.startsWith(""bread"", startBread);
    boolean lastBread = str.startsWith(""bread"", endBread);
    if (firstBread == true && lastBread == true)
    {
        return str.substring(startBread, endBread);
    }
    else 
    {
        return """";
    }
}
",
35aba5f59d8333186e6c14dca33d6a77b87aecb5,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] == val && nums[i-1] == val)
        {
            return true;
        }
    }
    return false;
}
",
3da6d13c5e129585a85f09cc153cb57358bb6316,"public String without2(String str) 
{
    if (str.length() >= 2)
    {
        if (str.substring(0,2).equals(str.substring(str.length() - 2)))
        {
            return str.substring(2);
            // if the two letters at the beginning of the word and at the end of the word are equal to each other, the string will returned with these two letters
        }
        else
        {
            return str;
            // if the two letters are not equal to each other, then the original string will be returned
        }
    }
    else
    {
        return str;
        //if the word is only two letters or less, it will return the original string 
    }
}
",
372645503350c2f98b54e8893d8beaf699d30377,"public int greenTicket(int a, int b, int c)
{
 if (a == b || b ==c )
 {
     return 20;
 }
    else if (a == b || a == c || b == c)
    {
        return 10;
        
    }
    else 
    {
        return 0;
    }
}
",
83e67904551bc1bb1045d11486fc9d857011e519,"public int redTicket(int a, int b, int c)
{
    if (a == 2 && b == 2 && c == 2)
    {
     	return 10;   
    }
    else if (a == b && b == c)
    {
     	return 5;   
    }
    else if (a != b && a != c)
    {
     	return 1;   
    }
    else
    {
        return 0;
    }
        
}
",
9ecf844f1f204bb4033d9d6a0027d8c4a1d17f71,"public int[] zeroMax(int[] nums)
{
    
    
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] == 0)
        {
            nums[i].findMaxOdd(i, nums);
        }
    }
    return nums;
}





public int findMaxOdd(int i, int[] nums)
{
    int maxOdd;
    maxOdd = 0;
    
    for (int b = i; b < nums.length - 1; b++)
    {
        if (nums[b] % 2 != 0 && nums[b] > maxOdd)
        {
            maxOdd = nums[b];
            nums[i] = nums[b];
        }
    }
    return maxOdd;
}

",
948b5b2528e52a0cd157a7b353521353f3da1fef,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
     return (isMom || (!(isAsleep)));

}
",
f7613e1314baffe2be7c9164f5586a14e6e82fd6,"public int countCode(String str)
{
    int count = 0;
    for (int i = 0; i < str.length() - 4; i++) {
        if (str.substring(i, i + 1).equals(""co"") && str.charAt(i + 3) == 'e') {
            count++;
        }
    }
    return count;
}
",
8a4197cd94d2fc278a10045f02c9323393eb70ad,"public boolean sameEnds(int[] nums, int n)
{
    for (int i = 0; i < n; i++)
    {
        if (nums[i] != nums[nums.length - n + i])
            return false;
    }
    return true;
}
",
dbbe2c6beeefd93c68c1cf77a6130ed4323b9aa3,"public int countEvens(int[] nums)
{
    int count = 0;
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] % 2 == 0)
        {
            count++;
        }
    }
    return count;
}
",
56ac97e6ac311645870c594b750311820db92f19,"public int noTeenSum(int a, int b, int c)
{
    return fixTeen(a) + fixTeen(b) + fixTeen(c);
}

public int fixTeen(int n)
{
    if (n >= 13 && n <= 19 && n != 15 && n != 16)
    {
        n = 0;
}
",
94c122a021a2cf0d8bce563a59aea25bbb53928a,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++) {
        if (val != nums[i] && val!= nums[i+1]) {
            return false;
        }
    }
    return true;
}
",
c565833b540b15f532d3914a5a40bfc2a010cfa6,"public int countClumps(int[] nums)
{
    int counter = 0;
    for (int i = 0; i < nums.length; i++)
    {
        if (i < nums.length - 1 && nums[i] == nums[i] + 1)
        {
            counter++;
        }
    }
    return counter;
}
",
83a239f0521cd38117ddbaaf228f8523a019cc40,"public boolean endOther(String a, String b)
{
    return a.toLowerCase().endsWith(b.toLowerCase()) || b.toLowerCase().endsWith(a.toLowerCase());
}
",
445090f74599d9d1eaf6ac03e9429e6724bd06ef,"public int roundSum(int a, int b, int c)
{
    
}

public int round10(int num)
{
    int round = num % 10
    if (num >= 5)
        return num + 10 -  round
    else 
        return num - round
}
",
a2ef5d82ffeb0d2c874c95de31b9ca6d0e3da825,"public String repeatEnd(String str, int n)
{ 	
    String res=str.substring(str.length()-n);//n = 0 return null or exception?
    for(int i=1;i<n;i++)
    {		// String res?
            res=res+str.substring(str.length()-n);
    return res;
    }
}
",
e1377201338b35fe171b9444b54cc7c825b47de7,"public int greenTicket(int a, int b, int c)
{
    if (a == b && b == c) //if two numbers are the same
        return 20;
    if (a == b || a == c || b == c) //if all the numbers are the same
        return 10;
    else //none of the numbers are the same
        return 0;
}
",
db19ea5f1cabdb8d39c12a6acfc593bd85bf4f95,"public int[] tenRun(int[] nums)
{
    for (int i = 0; i < nums.length; i++)
    {
    	if (nums[i] % 10 == 0)
    	{
     	   for (int j = i + 1; j < nums.length && nums[j] % 10 != 0; j++)
           {
            	nums[j] = nums[i];   
           }
    	}
    }
    return nums;
}
",
d58abb87ff70ff67a76bba0f3d1f0c3ba071d518,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    if (isBirthday == false)
    {
    if (speed < 60)
        {
            return 0;
        }
    if (speed >= 61 && speed <= 80)
        {
            return 1;
        }
    if (speed >= 81)
        {
            return 2;
        }
    }
    if (isBirthday == true)
    {
        return 0;
    return 0;
    }
}",
dd09babe580586f1680177c5f9004d2f1f2011bf,"public boolean has77(int[] nums)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] == 7 && nums[i + 1] == 7)
            return true;
        if (nums[i] < nums.length - 2 && nums[i] == 7 && nums[i + 2] == 7)
            return true;
    }
    return false;
}
",
6ccaf37a8d9757fc57014287316ecd9409820fe7,"public int sortaSum(int a, int b)
{
    int sum = a + b;
    
    if (sum >= 10 || sum <= 19)
        return 20;
    else
        return sum;
    
}
",
81751a12c5ec992c144276982e9c0355c20cd858,"public int greenTicket(int a, int b, int c)
{
    if ( a== b && b == c && a == c)
    {
        return 20;
    }
    
    else if (a == b || b == c || c == a)
    {
        return 10;
    }
    
    else
    {
        return 0;
    }
}
",
805cd69cde567a8b05acfc59036fef8080b8d8bf,"public int countEvens(int[] nums)
{
    for (int i = 0; i < nums.length; i++)
        if (nums[i] % 2 == 0)
            return nums[i];
    	if (nums[i] == 0)
            return nums[i];
    return 0;
}
",
2b92c031167d3664a0be5ab4cee6d5ad678ce824,"public int sum67(int[] nums)
{
    int count = 0;
    int seven = 0;
    
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] == 6)
        {
           for (int x = i; x < nums.length; x++)
           {
               if (nums[x] != 7)
               {
                   count = count + 0;
               }
               else if (nums[x] == 7)
               {
                   count = count + 0;
                   i = i + x;
               }
           }
        
        }
        
        count = count + nums[i];
        // i'm stuck on excluding numbers up till 7.
        // okay, i'm trying to say:
        // when you reach a 6, ignore the 6.
        // then, ignore each number until you reach a 7.
        
        // so perhaps the smarter way to state this is:
        // ahhh maybe a separate int to count 7's?
        
        // i'm thinking in the way the problem is laid out for me, where
        // i'm supposed to ""ignore"" sections of numbers
        
        // maybe just fucking count them all and ignore the ones in between 6 and 7
        
       
        
    }
    
    return count;
}

",
b8c119c667e36132f25df0fd31ba102f94d1c6df,"public boolean evenlySpaced(int a, int b, int c)
{
    if (a != b && a != c && b != c)
    {
         return (Math.abs(b - a) == Math.abs(c - b) 
         || Math.abs(b - a) == Math.abs(c - a)
         || Math.abs(a - b) == Math.abs(c - b)
         || Math.abs(c - a) == Math.abs(b - c) 
         || a == b && b == c);
    }
    return false;
}
",
8320e574f1b2963b87989be8f9ea952fbd5ed290,"public int sortaSum(int a, int b)
{
    int sum;
    if (sum >= 10 && sum <= 20)
    {
     	return 20;   
    }
    else
    {
     	return sum;   
    }
}
",
3716e52883778fd89a65151c2b55e28aaab539b2,"public int caughtSpeeding(int speed, boolean isBirthday)
{ if (speed <= 60)
{
    return 0;
}
if (speed >= 61 && speed <= 80)
{
    return 1;
}
if (isBirthday())
{
    return 2;
}
}
",
a43f9daaa9b5cc98acfe197b9157d9de345febf6,"public int[] frontPiece(int[] nums)
{
    for (int numbers: nums; int i = 0; i < 2; i++)
    {
        int number[i] = numbers;
    }
    return number;
}
",
c72936a1839694da8df5554d66db79bf67bec60c,"public int caughtSpeeding(int speed, boolean isBirthday)
{ 
    if (isBirthday)
    {
        speed = speed + 5
    }
	if (speed <= 60)
	{
    	return 0;
	}
    
	if (speed >= 61 && speed <= 80)
	{
    	return 1;
	}
    
	if (speed >= 81)
	{
    	return 2;
	}
	
}
",
d58abb87ff70ff67a76bba0f3d1f0c3ba071d518,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    if (isBirthday == false)
    {
    if (speed < 60)
        {
            return 0;
        }
    if (speed >= 61 && speed <= 80)
        {
            return 1;
        }
    if (speed >= 81)
        {
            return 2;
        }
    }
    if (isBirthday == true)
    {
        return 0;
    return 0;
    }
}",
61507d1731f1978056a90c5d7cd0758944df033c,"public boolean bobThere(String str)
{
    for (int i = 0; i < str.length(); i++)
        if (str.charAt(i) == ""b"" && str.charAt(i + 2) == ""b"")
            return true;
    return false;
}
",
d3ef0716ecf4a8ef9e4bec34fa89d1f94ed95074,"public boolean endOther(String a, String b)
{
    return a.toLowerCase().equals(b.toLowerCase()
}
",
51cd81eddc2c0304f6f4b44ade4bf6e3c8a6aff8,"public String alarmClock(int day, boolean vacation)
{
    if (day >=1 && day <= 5)
    {
        return vacation ? ""10:00"" : ""7:00"";
    }
    
    else
    {
        return vacation ? ""off"" : ""10:00""
    }

    
}
",
CodeStateID,Code,
dbbe2c6beeefd93c68c1cf77a6130ed4323b9aa3,"public int countEvens(int[] nums)
{
    int count = 0;
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] % 2 == 0)
        {
            count++;
        }
    }
    return count;
}
",
dd09babe580586f1680177c5f9004d2f1f2011bf,"public boolean has77(int[] nums)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] == 7 && nums[i + 1] == 7)
            return true;
        if (nums[i] < nums.length - 2 && nums[i] == 7 && nums[i + 2] == 7)
            return true;
    }
    return false;
}
",
56cccc5e57b71638ae0f36747e6ae090dc81fe2d,"public int sum67(int[] nums)
{
    int count = 0;
    int seven = 0;
    
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] == 6)
        {
           for (int x = i + 1; x < nums.length; x++)
           {
               if (nums[x] != 7)
               {
                   count = count + 0;
               }
               else if (nums[x] == 7)
               {
                   count = count + 0;
                   i = i + x;
               }
           }
        
        }
        else
        {
        count = count + nums[i];
        }
        // i'm stuck on excluding numbers up till 7.
        // okay, i'm trying to say:
        // when you reach a 6, ignore the 6.
        // then, ignore each number until you reach a 7.
        
        // so perhaps the smarter way to state this is:
        // ahhh maybe a separate int to count 7's?
        
        // i'm thinking in the way the problem is laid out for me, where
        // i'm supposed to ""ignore"" sections of numbers
        
        // maybe just fucking count them all and ignore the ones in between 6 and 7
        
       
        
    }
    
    return count;
}

",
6a200d12723f9e254906a4c4d6061927e68dbe5d,"public int caughtSpeeding(int speed, boolean isBirthday)
{
	int value = 0; 
  
	if (isBirthday) {
    	speed += 5;
 	}
  	if ( speed <= 60 ) {
    	return 0;
  	}
  	if (speed >= 61 && speed <= 80) {
    	return 1;
  	}
  	if (speed >= 81) { 
    	return 2;
  	} 
  	return value;
}
",
de2b521aa2c62ce8dcb54219041aa20489dda3f4,"public int loneSum(int a, int b, int c)
{
    if (a == b && b == c)
        return 0;
    if (a == b)
        return c;
    if (b == c)
        return a;
    if (a == c)
        return b;
    return a + b + c;
}
",
9df1cbdbe2059e87bcede6e1d1033ffff3e609ed,"public int[] withoutTen(int[] nums)
{
  	int[] result = new int[nums.length];
  	int count = 0;
  	
    for (int i = 0; i < nums.length; i++)
    {
     	if (nums[i] != 10)
        {
         	result[count] = nums[i];
            count++;
        }
    }
    for (int i = 0; i < count; i++)
    {
     	result[result.length - i] = 0;
    }
    
    return result;
}
",
3eb765355b81909fe2778872f22843054944d21a,"public int[] tenRun(int[] nums)
{
    if (nums.length<1)
    {
        return nums;
    }
    int tenn = nums[0];
    for (int i = o: i < nums.length; i++)
    {
        if (tenn % 10 !=0)
        {
            tenn = nums[i];
        }
        if (nums[i] % 10 == 0)
        {
            tenn = nums[i];
        }
        nums[i] = tenn;
    }
    return nums;
}
",
6b538f7d9eac6f8c54cd2c59a699ca73280e0930,"public class FizzArray {

//fizzArray is a method which takes input n and prepares fizzArray

public static int[] fizzArray(int n) {

//initializing integer array with size n

int[] result = new int[n];

for (int i = 0; i < n; i++){

result[i] = i;

}

return result;

}
",
9f87b2b05c03f2be8a156ec1c96ef54488b5591a,"public int sum67(int[] nums)
{
    int sum = 0;
    boolean check = false;
    for (int i = 0; i < nums.length; i++)
    {
        if (check)
        {
         	if (nums[i]==7)
            {
                check = false;
            }
        }
        else if (nums[i]==6)
        {
            check = true;
        }
        else
        {
            sum = sum + nums[i];
        }
    }
    return sum;
}
",
a9e28b208ebd799c89289ae125794d7301b373d2,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 1; i < nums.length() - 1; i++)
    {
        if (nums[i - 1] != val && nums[i + 1] != val)
            return false;
    }
    return true;
}
",
324744e665f46a82492205626535ae0a59adced1,"public int countEvens(int[] nums)
{
    int count = 0;
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] % 2 == 0)
        {
            count++;
        }
    }
    return count;
}
",
b1a0288831ecb0ae603b3c1ba2ee301b5ebd4583,"public boolean twoTwo(int[] nums)
{
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] == 2)
        {
            if (nums[i + 1] != 2 || nums[i - 1] != 2)
            {
                return false;
            }
        }
    }
    return true;
}",
d07d2f1b40602638d4c357809540b7e2870f1eb1,"public boolean cigarParty(int cigars, boolean isWeekend)
{
    if (isWeekend) 
        return cigar >=40;
    else 
        return cigar >= 40 && <= 60;
        
}
",
b02997d91fd09f8bee8d42b148052543fc339026,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    if (isBirthday)
    {
        speed = speed - 5;
    }
    
    if (speed <= 60)
    {
        return 0;
    }
}
",
83a239f0521cd38117ddbaaf228f8523a019cc40,"public boolean endOther(String a, String b)
{
    return a.toLowerCase().endsWith(b.toLowerCase()) || b.toLowerCase().endsWith(a.toLowerCase());
}
",
3eb765355b81909fe2778872f22843054944d21a,"public int[] tenRun(int[] nums)
{
    if (nums.length<1)
    {
        return nums;
    }
    int tenn = nums[0];
    for (int i = o: i < nums.length; i++)
    {
        if (tenn % 10 !=0)
        {
            tenn = nums[i];
        }
        if (nums[i] % 10 == 0)
        {
            tenn = nums[i];
        }
        nums[i] = tenn;
    }
    return nums;
}
",
e444710aa658e2dde4799f8965284cd20bc98f6a,"public int countEvens(int[] nums)
{
    for (int count=0; count < nums.length; count++) {
        int even = 0;
  if (nums[count] % 2 == 0)
  even++;
  }
  return even;
}
",
e05151e763b22c6322f72dd9558578b0970a10d6,"public boolean canBalance(int[] nums)
{
    double sum = 0;
    for (int n : nums) {
        sum += n;
    }
    
    double target = sum / 2;
    sum = 0;
    
    for (int i : nums) {
        sum += i;
        if (sum == target) {
            return true;
        }
    }
    return false;
}
",
eb9d1e97323f6c0c1410dd8ae35aa261280fc389,"public boolean endOther(String a, String b)
{
    a = a.toLowerCase();
    b = a.toLowerCase();
    return(a.endsWith(b) || b.endsWith(a));
    
    
}
",
dbbe2c6beeefd93c68c1cf77a6130ed4323b9aa3,"public int countEvens(int[] nums)
{
    int count = 0;
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] % 2 == 0)
        {
            count++;
        }
    }
    return count;
}
",
3a5b1294ef5b59964830e8cf8f6219db0c34b7d8,"public int blackjack(int a, int b)
{
    double remainA;
    remainA = (a % 21); //NOTE: The '%' yields the remainder!!!!
    double remainB;
    remainB =  (b % 21);
    
    // IF the remainder is large for one number, IT IS FAR AWAY from 21.
    if (a > 21 && b > 21)
    {
        return 0;
    }
    else if (a < 21 || b < 21)
    {
        if (a < 21 && b > 21)
        {
            return a;
        }
        else
        {
            return b;
        }
    }
    else
    {
        if (remainA > remainB)
        {
            return b;
        }
        else
        {
            return a;
        }
    }
}",
37483792e65efa307aab5d74a47b4a1dbe36e195,"public boolean bobThere(String str)
{
    //int firstB = str.indexOf(""b"");
   // int secondB = str.lastIndexOf(""b"");
    //if (secondB == firstB + 2)
    //    return true;
   // return false;
    for (int n == 0; n < str.length(); n++)
    {
        if ((str.charAt(n) == str.indexOf(""b"") && (str.charAt(n + 2) == str.indexOf(""b"", n))
        {
            return true;
        }
                
    }//end for loop
    return false;
}
",
7a76d1abad81a69b50456192d50af23131339fe6,"public int[] shiftLeft(int[] nums)
{
    if (nums.length == 0)
    {
        return nums;
    }
    int first = nums[0];
    int last = nums[nums.length - 1];
    for (int i = 0; i < nums.length - 1; i++)
    {
        nums[i] = nums[i + 1];
    }
    nums[nums.length - 1] = first;
    return nums;
}
",
84dfd0d1e5c431468600f396b066dbde235e2bb8,"public int[] shiftLeft(int[] nums)
{
    int[] newList = new int[nums.length];
    return newList;
}
",
e73f15cebf791aa932347617662e3a6641135a35,"public int[] shiftLeft(int[] nums)
{
 	//int[] newArray = new int[nums.length];
    //int count = 0;
    //return nums;
    if (nums.length >= 2)
    {
        
   		int start = nums[0];
    	for (int i = 0; i < nums.length - 1; i++)
    	{
     	//int j = 1;
        //nums[i] = nums[j];
        	nums[i] = nums[i + 1];
    	}
    
        	//nums[nums.length - 1] = start;
        /*if (nums[i] == nums.length)
        {
            nums[i + 1] = start;   
        }*/
    
              	
    }
    
    return nums;   
}
",
c9864807562ce05a0e1872a9d5d2eae382cb6654,"public boolean canBalance(int[] nums)
{
    boolean result = false;
        int nums1 = 0;
    	int nums2 = 0;
        for (int i = 0; i < nums.length / 2; i++)
        {
            nums1 += nums[i];
        }
        
        for (int j = (nums.length / 2 ) + 1; j < nums.length; j++)
        {
            nums2 += nums[j];
        }
        
        if (nums1 == nums2)
        {
            result = true;
        }
    return result;
}
",
bbf414c607917bae018f323952576cc4855d0403,"public int[] fix45(int[] nums)
{
    int[] fours = new int [3];
    int[] fives = new int[3];
    int index4=0;
    int index5 = 0;
    for (int i=0; i<nums.length;i++)
    {
        if (nums[i] == 4)
        {
            fours[index4] = i;
            index4++;
        }
        else if (nums[i] == 5)
        {
            fives[index5] = i;
            index5++;
        }
    }
    for (int i = index5-1; i>=0;i--)
    {
        if (nums[fours[i]+1]!=5)
        {
        	nums[fives[i]] = nums[fours[i]+1];
        	nums[fours[i]+1] = 5;
        }
    }
    
    
    
    
    //int start = 0;
    //int skip = -1;
    //for (int i=0; i<nums.length;i++)
    //{
    //    if (nums[i] == 4)
    //    {
    //        for (int j=start; j<nums.length;j++)
   	//		{
    //            if (j!=skip && nums[j]==5)
    //            {
    //                nums[j]=nums[i+1];
    //                nums[i+1]=5;
    //                skip = i+1;
    //                break;
    //            }
    //        }
    //    }
    //}
    return nums;
}
",
d6ecef2688242348be94ae9cf4d683dbfee353d2,"public int countClumps(int[] nums)
{
    int count = 0;
    
    for (int i = 0; i < nums.length - 1; i++)
    {
        
        if (nums[i] = nums[i+1])
        {
            
            count += 1;
            
        }
        
    }
    
    
    return count;
    
    
}
",
45bb0c43390b2898deab9a359cdda85e43e43e39,"public int[] shiftLeft(int[] nums)
{
    int[] result = new int[nums.length];
    for (int i = 0; i< nums.length - 1; i++)
    {
		result[i] = nums[i+1];
    }
    result[nums.length - 1] = nums[0];
    
    return result;
}
",
59a0088f887207b9450033d0bec152a0c9e18bab,"public int[] shiftLeft(int[] nums)
{
    int[] result = new int[nums.length]; 
    result[nums.length - 1] = nums[0]; 
    int j = 0; 
    for (int i = 1; i < nums.length - 1; i++)
    {
        result[j] = nums[i];
        j++; 
    }
    
    return result; 
}
",
9f76f502536b5caf05e00e7133cb3aa0cc6027d4,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    if (isBirthday)
     speed -=5;
    if (speed <= 60)
        return 0;
    else if (speed <= 80)
        return 1;
    else
        return 2;
    
}
",
a581a8a3d84b2ba650ac433de7fddce80ff00321,"public int redTicket(int a, int b, int c)
{
    /*if (b != a && c != a)
    {
     	return 0;   
    }
    if*/
    {
     	if (a == 2 && b == 2 && c == 2)
        {
         	return 10;   
        }
        else if (a == b && b == c && a == c)
        {
         	return 5;   
        }
        else 
        {
         	return 0;   
        }
    }
}
",
8a4197cd94d2fc278a10045f02c9323393eb70ad,"public boolean sameEnds(int[] nums, int n)
{
    for (int i = 0; i < n; i++)
    {
        if (nums[i] != nums[nums.length - n + i])
            return false;
    }
    return true;
}
",
dd09babe580586f1680177c5f9004d2f1f2011bf,"public boolean has77(int[] nums)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] == 7 && nums[i + 1] == 7)
            return true;
        if (nums[i] < nums.length - 2 && nums[i] == 7 && nums[i + 2] == 7)
            return true;
    }
    return false;
}
",
faa6cc44696d72e0fa85cc561584a1de159a4aa5,"public int dateFashion(int you, int date)
{
    if (you <= 2 || date <= 2)
        return 0;
    if (you >= 8 || date >= 8)
        return 2;
    return 1;
}
",
1e1c5de578989095aae1aa204ec49af769839064,"public String alarmClock(int day, boolean vacation)
{
    if (vacation)
    {
        if (1 <= day <= 5)
        {
            return(""10:00"")
        }
        else
        {
            return(""off"")
        }
    }
    else
    {
        if (1 <= day <= 5)
        {
            return(""7:00"")
        }
        else
        {
            return(""10:00"")
        }
    }
}
",
d3ef0716ecf4a8ef9e4bec34fa89d1f94ed95074,"public boolean endOther(String a, String b)
{
    return a.toLowerCase().equals(b.toLowerCase()
}
",
db19ea5f1cabdb8d39c12a6acfc593bd85bf4f95,"public int[] tenRun(int[] nums)
{
    for (int i = 0; i < nums.length; i++)
    {
    	if (nums[i] % 10 == 0)
    	{
     	   for (int j = i + 1; j < nums.length && nums[j] % 10 != 0; j++)
           {
            	nums[j] = nums[i];   
           }
    	}
    }
    return nums;
}
",
b4b80ec23db8730d3a13b7f18055050c22aa3b95,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    if (isBirthday == true)
    {
        if (speed <= 60)
        {
            return 0;
        }
        if (speed <= 80 && speed >= 61)
        {
            return 1;
        }
        else
        {
            return 2;
        }
    }
    else
    {
        if (speed <= 65)
        {
            return 0;
        }
        if (speed <= 85 && speed >= 66)
        {
            return 1;
        }
        if (speed >= 86)
        {
            return 2;
        }
    }
}
}",
eb40012d4b37cf5da376cf00035ed5e704fcbffc,"public int[] tenRun(int[] nums)
{
    for (int i = -1; i < nums.length; i++)
    {
        if (nums[i] % 10 == 0)
        {
            i++
        }
        else
        {
            nums[i] = 10;
        }
    }
    return nums;
}",
002254c45164bdf12bfca8a0fe71d68f839bbb7a,"public boolean canBalance(int[] nums)
{
    int sum = 0;
    int other =0;
    for(int i = 0; i < nums.length; i++)
    {
        sum += nums[i];
    
    	for(int j = nums.length-1; j < i; j--)
   		{
        	other += nums[j];
    	}
    }
    if (other == sum)
        return true;
        else
            return false;
}
",
3e52e3a1544f71192d5ae9883005f6c91861bff1,"public int noTeenSum(int a, int b, int c)
{
    return fixTeen(a) + fixTeen(b) + fixTeen(c);
}

public int fixTeen(int n)
{
    switch (n) {
        case 13:
        case 14:
        case 17:
        case 18:
        case 19:
            return 0;
            break;
        default:
            return n;
            break;
    }
    
}
",
9e81d1a2a7638c14b721846f5090b36ad07ab308,"public int[] seriesUp(int n)
{
    int[] result = new int[(n * (n + 1)) / 2];
    int count = 1;
    int index = 0;
    for (int i = 0; i < result.length; i++)
    {
        for (int j = 0; j < count; j++)
        {
            result[index] = j;
        	index++;
        }
        count++;
    }
}
",
aa4d8b44bff62be088c0c94a7829aa410ffa133b,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    if (isBirthday)
    {
        if (speed <= 60)
        {
            return 0;
        }
        if (speed <= 80 && speed >= 61)
        {
            return 1;
        }
        if (speed >= 81)
        {
            return 2;
        }
    }
    if (!isBirthday)
    {
        if (speed <= 65)
        {
            return 0;
        }
        if (speed <= 85 && speed >= 66)
        {
            return 1;
        }
        if (speed >= 86)
        {
            return 2;
        }
    }
}",
658cc87d5ac403faedaaa331874ee4b4c3043e4f,"public boolean isEverywhere(int[] nums, int val)
{
    for(int i = 0; i < nums.length; i++)
    {
     	if (nums[i] 1= val && nums[i + 1] != val)
        {
            return false;
        }
    }
    
    return true;
}
",
a43f9daaa9b5cc98acfe197b9157d9de345febf6,"public int[] frontPiece(int[] nums)
{
    for (int numbers: nums; int i = 0; i < 2; i++)
    {
        int number[i] = numbers;
    }
    return number;
}
",
9df1cbdbe2059e87bcede6e1d1033ffff3e609ed,"public int[] withoutTen(int[] nums)
{
  	int[] result = new int[nums.length];
  	int count = 0;
  	
    for (int i = 0; i < nums.length; i++)
    {
     	if (nums[i] != 10)
        {
         	result[count] = nums[i];
            count++;
        }
    }
    for (int i = 0; i < count; i++)
    {
     	result[result.length - i] = 0;
    }
    
    return result;
}
",
56cccc5e57b71638ae0f36747e6ae090dc81fe2d,"public int sum67(int[] nums)
{
    int count = 0;
    int seven = 0;
    
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] == 6)
        {
           for (int x = i + 1; x < nums.length; x++)
           {
               if (nums[x] != 7)
               {
                   count = count + 0;
               }
               else if (nums[x] == 7)
               {
                   count = count + 0;
                   i = i + x;
               }
           }
        
        }
        else
        {
        count = count + nums[i];
        }
        // i'm stuck on excluding numbers up till 7.
        // okay, i'm trying to say:
        // when you reach a 6, ignore the 6.
        // then, ignore each number until you reach a 7.
        
        // so perhaps the smarter way to state this is:
        // ahhh maybe a separate int to count 7's?
        
        // i'm thinking in the way the problem is laid out for me, where
        // i'm supposed to ""ignore"" sections of numbers
        
        // maybe just fucking count them all and ignore the ones in between 6 and 7
        
       
        
    }
    
    return count;
}

",
9c1b24f0268b9d5238feaf59114da5d3b827e88f,"public boolean bobThere(String str)
{
    for (int i = 0; i < str.length() - 2; i++) 
    {
    if (str.charAt(i) == 'b' && str.charAt(i + 2) == 'b')
    {
        return true;
    }
    }
    return false;
}
",
dd09babe580586f1680177c5f9004d2f1f2011bf,"public boolean has77(int[] nums)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] == 7 && nums[i + 1] == 7)
            return true;
        if (nums[i] < nums.length - 2 && nums[i] == 7 && nums[i + 2] == 7)
            return true;
    }
    return false;
}
",
0808dca8b4a525f8b42f6b75f66b3b1d93c3c6cc,"public int sum13(int[] nums)
{
    int sum = 0;
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] != 13 && nums[i - 1] != 13)
        {
            sum += nums[i];
        }
    }
    return sum;
}
",
dc23e528bd74dbcdb541ee29b004f0426a8d31c4,"public boolean squirrelPlay(int temp, boolean isSummer)
{
    if (isSummer && temp >= 60 && temp <= 100)
        return true;
    if (!isSummer && temp >= 60 && temp <= 90)
        return true;
    return false;
}
",
d3bbd5372c67b93d7e4c5f3425ac793bb5763980,"public int sortaSum(int a, int b)
{
    int sum = a + b;
    if (sum >= 10 && sum <= 19)
        return 20;
    return sum;
}
",
d4bcf6c8e35c1dc33d803d62c4c1abc06da6328d,"public int sum13(int[] nums)
{
    int sum = 0;
    for (int i = 0; i < nums.length; i++)
    {
     	if (nums[i] == 13)
        {
         	sum = sum;   
        }
        else if (nums[i - 1] == 13)
        {
         	sum = sum;   
        }
        else
        {
         	sum = sum + nums[i];
        }
    }
    return sum;
}
",
51cd81eddc2c0304f6f4b44ade4bf6e3c8a6aff8,"public String alarmClock(int day, boolean vacation)
{
    if (day >=1 && day <= 5)
    {
        return vacation ? ""10:00"" : ""7:00"";
    }
    
    else
    {
        return vacation ? ""off"" : ""10:00""
    }

    
}
",
4189ca044ea58662337930dbfcb852ab166203b5,"public boolean sameEnds(int[] nums, int n)
{
    for (int i = 0; i<n; i++)
    {
        if (nums[i] != nums[nums.length-n+i])
        {
            return false;
        }
    }
    return true;
}
",
bb771f79da2e164515e0325c84eaa2dbd392e69b,"public int centeredAverage(int[] nums)
{
    int min = nums[0];
    int max = 0;
    int sum = 0;
    
    for (int i = 0; i < nums.length; i++) 
    {
    	max = Math.max(max, nums[i]);
        min = Math.min(min, nums[i]);
        sum += nums[i];
    }
    
    return (sum - max - min) / (nums.length - 2);
}",
739598df6f10e1b41997fbbce33f2e2bf0fd995e,"public boolean has77(int[] nums)
{
    int x = nums.length;
    for (int i = 0; i < x; i++)
    {
        if (i < x - 1 && nums.[i] == 7 && nums.[i + 1] == 7)
        {
            return true;
        }
        if (i < x - 2 && nums.[i] == 7 && nums.[i + 2] == 7)
        {
            return true;
        }
    }
    return false;
}
",
b7d5d5590bde31e23ee41e67ec8ade069279409e,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    if (isBirthday) speed >= 5;
    if (speed <= 60) return 0;
    return (speed > 60 && speed <= 80) ? 1 : 2;
}
",
8ce774ddf43260b9faa39499c3a67d91f71fc099,"public boolean squirrelPlay(int temp, boolean isSummer)
{
    { if (!isSummer && temp >= 60 && <= 90)
    {
        return true;
    }}
}
",
180da2e81e06d1caf5687df83d97d383cf18a3ce,"public boolean sameEnds(int[] nums, int n)
{
    for (int i = 0; i <= n - 1; i++)
    {
        if(nums[i] == nums[nums.length - n + i - 1])
        {
            
        }
        else
        {
            return false;
        }
    }
    
    return true;
}
",
a641c5efbb7e5f53f92580571992aa0a53d6cdf6,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
b02997d91fd09f8bee8d42b148052543fc339026,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    if (isBirthday)
    {
        speed = speed - 5;
    }
    
    if (speed <= 60)
    {
        return 0;
    }
}
",
b716d157ac664292fc299cd0d52fb5af40deb1e6,"public String atFirst(String str)
{
    if (str.length() == 1)
    {
        return str + ""@"";
    }
    if (str.length() == 0)
    {
        return ""@@"";
    }
    else
    {
        return str.substring(0, 2);
    }
        
}
",
c565833b540b15f532d3914a5a40bfc2a010cfa6,"public int countClumps(int[] nums)
{
    int counter = 0;
    for (int i = 0; i < nums.length; i++)
    {
        if (i < nums.length - 1 && nums[i] == nums[i] + 1)
        {
            counter++;
        }
    }
    return counter;
}
",
95db80d206a39185b23dca2957512dcc44d5a3a1,"public int countEvens(int[] nums)
{
    int count = 0;
    for (int i = 0; i < nums.length; i +=1) {
        if (nums[i] % 2 == 0) {
            count +=1;
        }
    }
    return count;
}
",
f720cc450f616d826f746ce4609c79ab1860b68a,"public int[] fizzArray(int n)
{
    int[] result = new int[n];
        for (int i = 0; i<n.length;i++)
        {
            result[i-1] = i;
        }
    return result;
}
",
0eefe10c954547a7675d5ee81f88d4d112cf44e9,"public boolean bobThere(String str)
{
    for (int i = 0; i < str.length() - 2; i++) {
        if (str.charAt(i) == 'b' && str.charAt(i + 2) == 'b') {
            return true;
        }
    }
    return false;
}
",
71d268cab1e5b5629eb35d8e729c7c8880965509,"public int countEvens(int[] nums)
{
    for (int count=0; count < nums.length; count++) {
  if (nums[count] % 2 == 0)
  even++;
  }
  return even;

}
",
e9a643c862a4712528df227bd0c86412692f6215,"public String zipZap(String str)
{
	String result = """";

	for (int i = 0; i < str.length() - 2; i++)
    {
		if (i == 0 || i % 3 == 0) 
        {
			result += str.substring(i + 1, i + 3);
			result += str.charAt(i);
		}
	}
return result;
}
",
44401b7a795caa5e1f94585e15dc8c88bdb84119,"public boolean isEverywhere(int[] nums, int val)
{	
    for (int i = 0; i < nums.length - 1; i++)
    {
        if ( nums[i] != val && nums[i+1] != val)
        {
            return false;
        }
    }
    return true;
}
",
8ea0e17b60756ae019215592cbd3e7a8e04b0965,"public int countClumps(int[] nums)
{
    int clumps = 0;
    boolean isClump = false;
    for (int i = 0; i < nums.length - 1; i += 1) {
         if (isClump) {
             if {nums[i] != num[i + 1]) {
                 isClump = false;
             }
             else {
                 isClump = true;
                 clumps += 1;
             }
                }
         }
         return clumps;
}
",
e7b6e4f287f8c6938b8b88652157d73da80ecef9,"public int countClumps(int[] nums)
{
    int count = 0;
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] == nums[i+1])
        {
            count++;
            for (int j = 2; j == nums[i]; j++)
            {
            	i++;
            }
        }
    }
    return count;
}
",
6d72f5b621649af66f06d05181162fe55168a76e,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    if (isBirthday == true)
    {
        speed = speed - 5;
    }
}
",
fa7e52a8dd82b9e07db5c24a9f6640028d267b37,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] != val && nums[i + 1] != val)
        {
            return false;
        }
    }
    return true;
}
",
afec4a1fda7760651e34095e9ceef8a8483018be,"public boolean sameEnds(int[] nums, int n)
{
    
    for (int i = 0; i <= n; i++)
    {
        if (nums[i] != nums[nums.length - n + i - 1])
        {
            return false;
        }
    }
    return true;
}
",
324744e665f46a82492205626535ae0a59adced1,"public int countEvens(int[] nums)
{
    int count = 0;
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] % 2 == 0)
        {
            count++;
        }
    }
    return count;
}
",
62ce70304358abfdd932378fb6cd7769b980fdc9,"public int noTeenSum(int a, int b, int c)
{
	return fixTeen(a) + fixTeen(b) + fixTeen(c);
}

public int fixTeen(int n)
{
    if (13 <= n && n <= 19)
    {
        if (n != 15 || n != 16)
        {
            n = 0;
        }
        return n;
    }
}
",
8ce774ddf43260b9faa39499c3a67d91f71fc099,"public boolean squirrelPlay(int temp, boolean isSummer)
{
    { if (!isSummer && temp >= 60 && <= 90)
    {
        return true;
    }}
}
",
9f87b2b05c03f2be8a156ec1c96ef54488b5591a,"public int sum67(int[] nums)
{
    int sum = 0;
    boolean check = false;
    for (int i = 0; i < nums.length; i++)
    {
        if (check)
        {
         	if (nums[i]==7)
            {
                check = false;
            }
        }
        else if (nums[i]==6)
        {
            check = true;
        }
        else
        {
            sum = sum + nums[i];
        }
    }
    return sum;
}
",
b02997d91fd09f8bee8d42b148052543fc339026,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    if (isBirthday)
    {
        speed = speed - 5;
    }
    
    if (speed <= 60)
    {
        return 0;
    }
}
",
7d2cc44f9ddcd55a93d3738c84d32d272d1abe0d,"public int[] seriesUp(int n)
{
     int[] result = new int[n * (n + 1) / 2];
 	 int i = 0;
 	 for (int j = 1; j <= n; j++)
     {
    	for (int k = 1; k <= j; k++)
        {
      		result[i++] = k;
        }
     }
  return result;

}
",
0937e6dd9ebb20fc9fd77b500ff77f9fb966d27e,"public String zipZap(String str)
{
	if (str.length() < 3) 
    {
        return """"; 
    }
String result = """";

	for (int i = 0; i < str.length() - 2; i += 3)
    {
		result = result + str.substring(i + 1, i + 3) + str.substring(i, i + 1);
    }
return result;
}
",
e449000228690301ed3d3de32e7ccd3ba51bef53,"public String alarmClock(int day, boolean vacation)
{
    if (vacation)
    {
        if (day >= 1 && day <= 5)
        {
            return alarmClock;
        }
    }
}
",
4eb6382872b95c713ee9b9ee3717c152840acf5e,"public int[] zeroMax(int[] nums)
{
    int[] numArray;
    for(int i : nums)
    {
        if (nums[i] == 0)
        {
            nums[i] = largestOdd(i, nums);
        }
    }
    return numArray;
}

public int largestOdd(int position, int[] nums2)
{
    int biggestOdd = 0
    for (int i = position; i < nums2.length; i++)
    {
        if (nums2[i] % 2 == 1 && nums2[i] > biggestOdd)
        {
            biggestOdd = nums2[i];
        }
    }
    return biggestOdd;
}",
51cd81eddc2c0304f6f4b44ade4bf6e3c8a6aff8,"public String alarmClock(int day, boolean vacation)
{
    if (day >=1 && day <= 5)
    {
        return vacation ? ""10:00"" : ""7:00"";
    }
    
    else
    {
        return vacation ? ""off"" : ""10:00""
    }

    
}
",
6b538f7d9eac6f8c54cd2c59a699ca73280e0930,"public class FizzArray {

//fizzArray is a method which takes input n and prepares fizzArray

public static int[] fizzArray(int n) {

//initializing integer array with size n

int[] result = new int[n];

for (int i = 0; i < n; i++){

result[i] = i;

}

return result;

}
",
56ac97e6ac311645870c594b750311820db92f19,"public int noTeenSum(int a, int b, int c)
{
    return fixTeen(a) + fixTeen(b) + fixTeen(c);
}

public int fixTeen(int n)
{
    if (n >= 13 && n <= 19 && n != 15 && n != 16)
    {
        n = 0;
}
",
ecef8ffff5f622c9ab6799c53c46541bd578254a,"public int sum67(int[] nums)
{
    int sum = 0;
    boolean ifSix = false;
    for (int i = 0; i < nums.length; i++)
    {
        if (ifSix)
        {
            if (nums[i] == 7)
                ifSix = false;
        }
        else if (nums[i] == 6)
        {
            ifSix = true;
        }
        //if ifSix is true, then it goes back into the for loop 
        //and the first if statement becomes true
        else
        {
            sum = sum + nums[i];
        }
        //takes the sum of the numbers when there is no linee of numbers starting
        //with a 6 and ending with a 7
    }
    return sum;
}
",
b18357d08d239c3169eb42bdabc04d80a3bba5bf,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
    if (isAsleep) 
    {
        return false;
    }
    if (isMorning && !isMom) 
    {
        return false;
    }
    return true;
}
",
eee0eb76d7c982f7cdbbfb86dbf032940b49e38b,"public int luckySum(int a, int b, int c)
{
    if (a == 13) // if a is equal to 13
        return 0;
    if (b == 13) // if b is equal to 13 go to the a value
        return a;
    if (c == 13) //if c is 13, only add  and b
        return (a + b);
    return (a + b + c); //if none of the others,add all the numbers
}
",
dc3378fef360ec4c5e4c0ddeaace01619067c129,"public boolean cigarParty(int cigars, boolean isWeekend)
{
    if (is_weekend = true)
    {
        if cigars >= 40:
        {
            return True
        }
    }
    else if (cigars >= 40 && cigars <= 60)
    {
        return True
    }
    else
    {
        return False
    }
}
",
d3bbd5372c67b93d7e4c5f3425ac793bb5763980,"public int sortaSum(int a, int b)
{
    int sum = a + b;
    if (sum >= 10 && sum <= 19)
        return 20;
    return sum;
}
",
8f844faf4a77c8c1664086e5bcfba82f26569b2f,"public int countClumps(int[] nums)
{
    int clumps = 0;
    for (int i =0;i<nums.length;i++)
    {
        if (nums[i] == nums[i+1] && i < nums.length -1)
        {
            clumps++;
        }
    }
    return clumps;
}
",
0e68a96660515e0852bbeffb5ec3b3954d4b1625,"public int[] seriesUp(int n)
{
     int[] result = new int[n * (n + 1) / 2];
 	 int initial = 0;
 	 for (int j = 1; j <= n; j++)
     {
    	for (int k = 1; k <= j; k++)
        {
      		result[initial ++] = k;
        }
     }
  return result;

}
",
1c7f60afbb325cd1bf6ef9300fc570a4b484732e,"public int countEvens(int[] nums)
{	
   int total = 0;
  	for(int i = 0; i < nums.length; i++)
  {
     // int remain = nums[i] % 2;
 		if(nums[i] % 2; == 0)
 			{
 				total = total + 1;
 			}
  }
   return total;
}
",
a69d38f3cf12e6a14454b751528014666fddc16f,"public String mixString(String a, String b)
{
    return a.substring(0, 1) + b.substring(0, 1) + a.substring(1, 2) + b.substring(1, 2) + a.substring(2, 3) + b.substring(2, 3);
}
",
109f0388a3981d429a9290e5861cb47f08920b3b,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    if (speed < 60)
    {
        return 0;
    }
    else
    {
        return 1;
    }
}
",
fa7e52a8dd82b9e07db5c24a9f6640028d267b37,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] != val && nums[i + 1] != val)
        {
            return false;
        }
    }
    return true;
}
",
d58abb87ff70ff67a76bba0f3d1f0c3ba071d518,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    if (isBirthday == false)
    {
    if (speed < 60)
        {
            return 0;
        }
    if (speed >= 61 && speed <= 80)
        {
            return 1;
        }
    if (speed >= 81)
        {
            return 2;
        }
    }
    if (isBirthday == true)
    {
        return 0;
    return 0;
    }
}",
b8c119c667e36132f25df0fd31ba102f94d1c6df,"public boolean evenlySpaced(int a, int b, int c)
{
    if (a != b && a != c && b != c)
    {
         return (Math.abs(b - a) == Math.abs(c - b) 
         || Math.abs(b - a) == Math.abs(c - a)
         || Math.abs(a - b) == Math.abs(c - b)
         || Math.abs(c - a) == Math.abs(b - c) 
         || a == b && b == c);
    }
    return false;
}
",
2b92c031167d3664a0be5ab4cee6d5ad678ce824,"public int sum67(int[] nums)
{
    int count = 0;
    int seven = 0;
    
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] == 6)
        {
           for (int x = i; x < nums.length; x++)
           {
               if (nums[x] != 7)
               {
                   count = count + 0;
               }
               else if (nums[x] == 7)
               {
                   count = count + 0;
                   i = i + x;
               }
           }
        
        }
        
        count = count + nums[i];
        // i'm stuck on excluding numbers up till 7.
        // okay, i'm trying to say:
        // when you reach a 6, ignore the 6.
        // then, ignore each number until you reach a 7.
        
        // so perhaps the smarter way to state this is:
        // ahhh maybe a separate int to count 7's?
        
        // i'm thinking in the way the problem is laid out for me, where
        // i'm supposed to ""ignore"" sections of numbers
        
        // maybe just fucking count them all and ignore the ones in between 6 and 7
        
       
        
    }
    
    return count;
}

",
d822cf12d38ea28fe825ff4fc14fdc94e6719f05,"public boolean bobThere(String str)
{
    int i = 0;
    char[] CharArray = str.toCharArray();
    for(char cha : CharArray){
    	if (cha == 'b'){
        	if (str[i + 2] == 'b'){
            	return true;
            }
        }
     	i++;
    }
    return false;
}
",
c9864807562ce05a0e1872a9d5d2eae382cb6654,"public boolean canBalance(int[] nums)
{
    boolean result = false;
        int nums1 = 0;
    	int nums2 = 0;
        for (int i = 0; i < nums.length / 2; i++)
        {
            nums1 += nums[i];
        }
        
        for (int j = (nums.length / 2 ) + 1; j < nums.length; j++)
        {
            nums2 += nums[j];
        }
        
        if (nums1 == nums2)
        {
            result = true;
        }
    return result;
}
",
9dfb9d8285fed77ebe058ec80bfb80f2f1a5db2a,"public boolean sameEnds(int[] nums, int len) {
    for (int i = 0, j = nums.length - len; i < len; i++, j++)
        if (nums[i] != nums[j]) return false;
    return true;
}
",
88dffbb77f35c14f614d510d552cf3eb77cab50a,"public int caughtSpeeding(int speed, boolean isBirthday)
{
 	if(isBirthday)
    {
    	if(speed<=65)
        {
        	return 0:
        }
        
        else if(speed>= 66 && speed<=85)
        {
        	return 1:
        }
        
        else if(speed>=86)
        {
        	return 2;
        }
    }
    
    if(!isbirthday)
    {
    	if(speed<=60)
        {
        	return 0;
        }
        
        if(speed >=61 && speed<=80)
        {
        	return 1;
        }
        
        if(speed>=81)
        {
        	return 2;
        }
    }
}
",
a3cfe4acc0878f7a98ccbc168df9dff28266dbd7,"public int[] frontPiece(int[] nums)
{
    int [] grid = new int[2];
    
    // establish logi for checking nums.
    // add the proper elements of nums into a new array 
    if (nums.length == 1)
    {
        return grid[0] = nums[0];
    }
    else if (nums.length == 0)
    {
        return grid;
    }
    else
    {
        return grid[nums[0], nums[1]];
    }
}
",
b03f6ee58d1c2efbc298c1b090d888a47d5425a9,"public boolean evenlySpaced(int a, int b, int c)
{
    if (b-a <= 1 && c-a >= 2 && c-b >= 2 
        || b-a >= 2 && c-a <= 1 && c-b >=2
        || b-a >=2 && c-a >= 2 && c-b <= 1)
        return true;
    return false;
}
",
8f6dbd26c957f489904930b7ed0aa2950cd254af,"public String repeatEnd(String str, int n)
{
    String repeat = str.substring(str.length() - n);
    for (int i = 1; i < n; i++)
        //starts with the first letter of the string
    {
        repeat = repeat + str.substring(str.length() - n);
        //gets the part of the word that needs to be returned
    }
    return repeat;
    //returns the string made out of the n repetitions
}
",
b1ffd079f8c4294a66e06ad7d2fb2a7a8fbe7344,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
51cd81eddc2c0304f6f4b44ade4bf6e3c8a6aff8,"public String alarmClock(int day, boolean vacation)
{
    if (day >=1 && day <= 5)
    {
        return vacation ? ""10:00"" : ""7:00"";
    }
    
    else
    {
        return vacation ? ""off"" : ""10:00""
    }

    
}
",
3da6d13c5e129585a85f09cc153cb57358bb6316,"public String without2(String str) 
{
    if (str.length() >= 2)
    {
        if (str.substring(0,2).equals(str.substring(str.length() - 2)))
        {
            return str.substring(2);
            // if the two letters at the beginning of the word and at the end of the word are equal to each other, the string will returned with these two letters
        }
        else
        {
            return str;
            // if the two letters are not equal to each other, then the original string will be returned
        }
    }
    else
    {
        return str;
        //if the word is only two letters or less, it will return the original string 
    }
}
",
44401b7a795caa5e1f94585e15dc8c88bdb84119,"public boolean isEverywhere(int[] nums, int val)
{	
    for (int i = 0; i < nums.length - 1; i++)
    {
        if ( nums[i] != val && nums[i+1] != val)
        {
            return false;
        }
    }
    return true;
}
",
4eb6382872b95c713ee9b9ee3717c152840acf5e,"public int[] zeroMax(int[] nums)
{
    int[] numArray;
    for(int i : nums)
    {
        if (nums[i] == 0)
        {
            nums[i] = largestOdd(i, nums);
        }
    }
    return numArray;
}

public int largestOdd(int position, int[] nums2)
{
    int biggestOdd = 0
    for (int i = position; i < nums2.length; i++)
    {
        if (nums2[i] % 2 == 1 && nums2[i] > biggestOdd)
        {
            biggestOdd = nums2[i];
        }
    }
    return biggestOdd;
}",
21d997dbc1d180fc37f71fb0247cb0ffaa4b9e21,"public String getSandwich(String str)
{
    int first = str.indexOf(""bread"");
    int last = str.lastIndexOf(""bread"");
    if (first == last)
        return """";
    return str.substring(first + 5, last);
}
",
a937ca98bf07376a16173c226e492c54fe9de26f,"public int redTicket(int a, int b, int c)
{
  if (a == b && b == c)
  {
      if (a == 2)
      {
          return 10;
      }
      return 5;
  }
    if (a != b && a != c)
    {
        return 1;
    }
    return 0;
}
",
56cccc5e57b71638ae0f36747e6ae090dc81fe2d,"public int sum67(int[] nums)
{
    int count = 0;
    int seven = 0;
    
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] == 6)
        {
           for (int x = i + 1; x < nums.length; x++)
           {
               if (nums[x] != 7)
               {
                   count = count + 0;
               }
               else if (nums[x] == 7)
               {
                   count = count + 0;
                   i = i + x;
               }
           }
        
        }
        else
        {
        count = count + nums[i];
        }
        // i'm stuck on excluding numbers up till 7.
        // okay, i'm trying to say:
        // when you reach a 6, ignore the 6.
        // then, ignore each number until you reach a 7.
        
        // so perhaps the smarter way to state this is:
        // ahhh maybe a separate int to count 7's?
        
        // i'm thinking in the way the problem is laid out for me, where
        // i'm supposed to ""ignore"" sections of numbers
        
        // maybe just fucking count them all and ignore the ones in between 6 and 7
        
       
        
    }
    
    return count;
}

",
3eb765355b81909fe2778872f22843054944d21a,"public int[] tenRun(int[] nums)
{
    if (nums.length<1)
    {
        return nums;
    }
    int tenn = nums[0];
    for (int i = o: i < nums.length; i++)
    {
        if (tenn % 10 !=0)
        {
            tenn = nums[i];
        }
        if (nums[i] % 10 == 0)
        {
            tenn = nums[i];
        }
        nums[i] = tenn;
    }
    return nums;
}
",
3d4c98b74adf52d4ca5fe21febb24b1a8f6a6120,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++) {
        if (nums[i] != val && nums[i + 1] != val) {
            return false;
        }
    }
    return true;
}
",
54f16f3c5196c9d23444381409e354f9fae465c0,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
9df1cbdbe2059e87bcede6e1d1033ffff3e609ed,"public int[] withoutTen(int[] nums)
{
  	int[] result = new int[nums.length];
  	int count = 0;
  	
    for (int i = 0; i < nums.length; i++)
    {
     	if (nums[i] != 10)
        {
         	result[count] = nums[i];
            count++;
        }
    }
    for (int i = 0; i < count; i++)
    {
     	result[result.length - i] = 0;
    }
    
    return result;
}
",
a9e28b208ebd799c89289ae125794d7301b373d2,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 1; i < nums.length() - 1; i++)
    {
        if (nums[i - 1] != val && nums[i + 1] != val)
            return false;
    }
    return true;
}
",
3421e294ef663dea5cc4a12c48942aa3987b86e6,"public int makeChocolate(int small, int big, int goal)
{
    if (small + big*5 < goal)  return -1;

    int smallNeeded = goal - big * 5;

    if(smallNeeded <= 0) return 0;

    return smallNeeded;
    
            
    
}
",
c4cd9fb76f3a67d4e774521d2a07bd1fe7cd0b11,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
4465ac2e7e70f3ac5ddbd490bd262cc0c4f6249d,"public int[] frontPiece(int[] nums)
{
    int [] grid = new int[2];
    
    // establish logi for checking nums.
    // add the proper elements of nums into a new array 
    if (nums.length == 1)
    {
        return grid[0] = nums[0];
    }
    else if (nums.length == 0)
    {
        return grid;
    }
    else
    {
        grid[0] = nums[0];
        grid[1] = nums[1];
        return grid[];
    }
}
",
eee0eb76d7c982f7cdbbfb86dbf032940b49e38b,"public int luckySum(int a, int b, int c)
{
    if (a == 13) // if a is equal to 13
        return 0;
    if (b == 13) // if b is equal to 13 go to the a value
        return a;
    if (c == 13) //if c is 13, only add  and b
        return (a + b);
    return (a + b + c); //if none of the others,add all the numbers
}
",
ec0734122f4add509acf5c24dba4d8ba253e0c85,"public int roundSum(int a, int b, int c)
{
    a = this.round10(a);
    b = this.round10(b);
    c = this.round10(c);
    
    int sum = a + b + c;
    
    return sum;
}

public int round10(int num)
{
    int remainder = num % 10;
    
    if (remainder >= 5)
    {
        // round up
        num = num + (10 - remainder);
    }
    else
    {
        // round down
        num = num - remainder;
    }
    
    return num;
}
",
96649403e3463cc1c05171bea6b6b5e9d2710fe4,"public boolean isEverywhere(int[] nums, int val)
{
//    for (int i = 0; i < nums.length; i++)
//    {
  //   	if (nums[i] != val || nums[i++] != val)
    //    {
      //      return false;
        //}
    //}
    //return true;
    
    for (int i = 0; i <=nums.length-2;i++)

{

if ( nums[i] != val && nums[i+1] != val)

result = false;

}

  return result;

}
",
b1a0288831ecb0ae603b3c1ba2ee301b5ebd4583,"public boolean twoTwo(int[] nums)
{
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] == 2)
        {
            if (nums[i + 1] != 2 || nums[i - 1] != 2)
            {
                return false;
            }
        }
    }
    return true;
}",
7407aaf23f6102440a21d7a9618a9e989f370622,"public boolean cigarParty(int cigars, boolean isWeekend)
{
    boolean successful;
    if (cigars >= 40 && cigars <= 60 && !isWeekend)
        successful = !successful
}
",
56cccc5e57b71638ae0f36747e6ae090dc81fe2d,"public int sum67(int[] nums)
{
    int count = 0;
    int seven = 0;
    
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] == 6)
        {
           for (int x = i + 1; x < nums.length; x++)
           {
               if (nums[x] != 7)
               {
                   count = count + 0;
               }
               else if (nums[x] == 7)
               {
                   count = count + 0;
                   i = i + x;
               }
           }
        
        }
        else
        {
        count = count + nums[i];
        }
        // i'm stuck on excluding numbers up till 7.
        // okay, i'm trying to say:
        // when you reach a 6, ignore the 6.
        // then, ignore each number until you reach a 7.
        
        // so perhaps the smarter way to state this is:
        // ahhh maybe a separate int to count 7's?
        
        // i'm thinking in the way the problem is laid out for me, where
        // i'm supposed to ""ignore"" sections of numbers
        
        // maybe just fucking count them all and ignore the ones in between 6 and 7
        
       
        
    }
    
    return count;
}

",
d3bbd5372c67b93d7e4c5f3425ac793bb5763980,"public int sortaSum(int a, int b)
{
    int sum = a + b;
    if (sum >= 10 && sum <= 19)
        return 20;
    return sum;
}
",
c33b44f557fd7c2a3238818722cd845a74e96b85,"public int countClumps(int[] nums)
{
    boolean match = false;
    int count = 0;
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] == nums[i + 1] && !match)
        {
            match = true;
            count++
        }
        else if (nums[i] != nums[i + 1])
        {
            match = false;
        }
    }
    return count;
}
",
3a2534fb0ac1dc3651141e9a0bd5b1830ff648bb,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    if (isBirthday)
    {
        if (speed <= 65)
        {
            return ""no ticket"";         	
       	}
        else if (speed >= 66 && speed <= 85)
        {
            return ""small ticket"";
        }
        else
        {
            return ""big ticket"";
        }
            
    }
    else
    {
        if (speed <= 60)
        {
            return ""no ticket"";         	
       	}
        else if (speed >= 61 && speed <= 80)
        {
            return ""small ticket"";
        }
        else
        {
			return ""big ticket"";
        }
    
    }
}  
",
83a239f0521cd38117ddbaaf228f8523a019cc40,"public boolean endOther(String a, String b)
{
    return a.toLowerCase().endsWith(b.toLowerCase()) || b.toLowerCase().endsWith(a.toLowerCase());
}
",
33e1684529896667b663d935101657bf9205ef10,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] != val && nums[i + 1] != val)
            return false;
    }
    return true;
}
",
6b9f55c88028fdb9f9e0adbb7f59b28fb9564c5a,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] != val)
        {
            if (i < nums.length - 1)
            {
                if (nums[i + 1] != val)
                {
                    return false;
                }
            }
        }
        
    }
    return true;
}
",
8a4197cd94d2fc278a10045f02c9323393eb70ad,"public boolean sameEnds(int[] nums, int n)
{
    for (int i = 0; i < n; i++)
    {
        if (nums[i] != nums[nums.length - n + i])
            return false;
    }
    return true;
}
",
a9e28b208ebd799c89289ae125794d7301b373d2,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 1; i < nums.length() - 1; i++)
    {
        if (nums[i - 1] != val && nums[i + 1] != val)
            return false;
    }
    return true;
}
",
7a76d1abad81a69b50456192d50af23131339fe6,"public int[] shiftLeft(int[] nums)
{
    if (nums.length == 0)
    {
        return nums;
    }
    int first = nums[0];
    int last = nums[nums.length - 1];
    for (int i = 0; i < nums.length - 1; i++)
    {
        nums[i] = nums[i + 1];
    }
    nums[nums.length - 1] = first;
    return nums;
}
",
9a762998ef3f0abdaeaa9e34d97d58d792cb6be4,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
    if (isAsleep)
        return false;
    if (isMom)
        return true;
    return (!isMorning);
}
",
a581a8a3d84b2ba650ac433de7fddce80ff00321,"public int redTicket(int a, int b, int c)
{
    /*if (b != a && c != a)
    {
     	return 0;   
    }
    if*/
    {
     	if (a == 2 && b == 2 && c == 2)
        {
         	return 10;   
        }
        else if (a == b && b == c && a == c)
        {
         	return 5;   
        }
        else 
        {
         	return 0;   
        }
    }
}
",
93d04bbaaacbdc2e43e79af8101e3443d99f3216,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
6bb0ee0ad18b7740337fbdd1e749d82571043674,"public String atFirst(String str)
{
    if (str.length() >= 2)
    {
        return (str.substring(0, 2));
    }
    else if (str.length() == 1)
    {
        return ""@"";
    }
    else
    {
        return ""@@"";
    }
}
",
436fd09b6891e567fe0cd98c8b071729b2733e8c,"public String alarmClock(int day, boolean vacation)
{
    if (vacation)
    {
        if (day != 0 && day != 6)
            return ""10:00"";
        else
            return ""off"";
    else
        if (day != 0 && day != 6)
            return ""7:00"";
        else
            return ""10:00"";
    }
}",
5ba8867472a774992529ec0efdd84c077603594d,"public int greenTicket(int a, int b, int c)
{
    if (a == b && b == c)
        return 20;
    if (a == b || a == c || b == c)
        return 10;
    else
        return 0;
}
",
715aa81924a59b597d7a7341eacca1e319779951,"public boolean xyzThere(String str)
{
    for(int i = 0; i < str.length() - 3; i++)
    {
        if (str.substring(i, i + 3).equals(""xyz"")) //&& !str.charAt(i-1).equals('.'))
        {
            return true;
        }
    }
}
",
e7b6e4f287f8c6938b8b88652157d73da80ecef9,"public int countClumps(int[] nums)
{
    int count = 0;
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] == nums[i+1])
        {
            count++;
            for (int j = 2; j == nums[i]; j++)
            {
            	i++;
            }
        }
    }
    return count;
}
",
59a0088f887207b9450033d0bec152a0c9e18bab,"public int[] shiftLeft(int[] nums)
{
    int[] result = new int[nums.length]; 
    result[nums.length - 1] = nums[0]; 
    int j = 0; 
    for (int i = 1; i < nums.length - 1; i++)
    {
        result[j] = nums[i];
        j++; 
    }
    
    return result; 
}
",
987f265fb4f09a7db40586aa6a321d7c612fa526,"public boolean has77(int[] nums)
{
    int count = 0;
    
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] == 7 && nums[i+1] == 7)
        {
            count = 1;
        }
        else if (nums[i] == 7 && nums[i+2] == 7 && i < nums.length - 3)
        {
            count = 1;
        }
    }
    // okay, another approach is to check if there are two 7's.
    // if there are, store their [] as variables
    // if the difference between them is greater than 2, then false
    
    return (count == 1);
}
",
e9684c37300ad2ff0907d6d517e96656ca70ab9b,"public boolean isEverywhere(int[] nums, int val)
{
   for(int i = 0; i < nums.length - 1; i++) {
        if(nums[i] != val && nums[i + 1] != val)
            return false;
    }
                
return true; 
}
",
324744e665f46a82492205626535ae0a59adced1,"public int countEvens(int[] nums)
{
    int count = 0;
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] % 2 == 0)
        {
            count++;
        }
    }
    return count;
}
",
b4468d47a8297b1e9c61604e85cae3c230640006,"public int roundSum(int a, int b, int c)
{
    return round10(a) + round10(b) + round10(c);
}

public int round10(int num)
{
    int rd = num % 10;
      
    if(rd >= 5)
        return num + 10 - rd;
                
    return num - rd;
}
",
863743fea61e06d673131ef705425d4b67d43542,"public int loneSum(int a, int b, int c)
{
    if (a == b)
        return b + c;
    if (b == c)
        return a + c;
    if (a == c)
		return b + c;        
}
",
b1a0288831ecb0ae603b3c1ba2ee301b5ebd4583,"public boolean twoTwo(int[] nums)
{
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] == 2)
        {
            if (nums[i + 1] != 2 || nums[i - 1] != 2)
            {
                return false;
            }
        }
    }
    return true;
}",
8f6dbd26c957f489904930b7ed0aa2950cd254af,"public String repeatEnd(String str, int n)
{
    String repeat = str.substring(str.length() - n);
    for (int i = 1; i < n; i++)
        //starts with the first letter of the string
    {
        repeat = repeat + str.substring(str.length() - n);
        //gets the part of the word that needs to be returned
    }
    return repeat;
    //returns the string made out of the n repetitions
}
",
93d04bbaaacbdc2e43e79af8101e3443d99f3216,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
4189ca044ea58662337930dbfcb852ab166203b5,"public boolean sameEnds(int[] nums, int n)
{
    for (int i = 0; i<n; i++)
    {
        if (nums[i] != nums[nums.length-n+i])
        {
            return false;
        }
    }
    return true;
}
",
ba64e188a7ff94c5ca147732e34becd1b2436677,"public String atFirst(String str)
{
    String result = str.substring(0, 2);
    
    return result;
}
",
eb9d1e97323f6c0c1410dd8ae35aa261280fc389,"public boolean endOther(String a, String b)
{
    a = a.toLowerCase();
    b = a.toLowerCase();
    return(a.endsWith(b) || b.endsWith(a));
    
    
}
",
abf203f02a8e6355f71ebc0195c9c4f08db3dca9,"public int greenTicket(int a, int b, int c)
{ 
    if (a == b && b == c){
        return 20;
    }
    if (a == b || b == c || a == c){
        return 10;
    }
    return 0;
}
",
e05151e763b22c6322f72dd9558578b0970a10d6,"public boolean canBalance(int[] nums)
{
    double sum = 0;
    for (int n : nums) {
        sum += n;
    }
    
    double target = sum / 2;
    sum = 0;
    
    for (int i : nums) {
        sum += i;
        if (sum == target) {
            return true;
        }
    }
    return false;
}
",
9a762998ef3f0abdaeaa9e34d97d58d792cb6be4,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
    if (isAsleep)
        return false;
    if (isMom)
        return true;
    return (!isMorning);
}
",
b02997d91fd09f8bee8d42b148052543fc339026,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    if (isBirthday)
    {
        speed = speed - 5;
    }
    
    if (speed <= 60)
    {
        return 0;
    }
}
",
93d04bbaaacbdc2e43e79af8101e3443d99f3216,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
1129ef37162a6b236aba63fdc6b01dbc55e8c4c0,"public String getSandwich(String str)
{
    int startBread = str.indexOf(""bread"");
    int endBread = str.lastIndexOf(""bread"");
	boolean firstBread = str.startsWith(""bread"", startBread);
    boolean lastBread = str.startsWith(""bread"", endBread);
    if (firstBread == true && lastBread == true)
    {
        return str.substring(startBread, endBread);
    }
    else 
    {
        return """";
    }
}
",
fa7e52a8dd82b9e07db5c24a9f6640028d267b37,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] != val && nums[i + 1] != val)
        {
            return false;
        }
    }
    return true;
}
",
a43f9daaa9b5cc98acfe197b9157d9de345febf6,"public int[] frontPiece(int[] nums)
{
    for (int numbers: nums; int i = 0; i < 2; i++)
    {
        int number[i] = numbers;
    }
    return number;
}
",
aa4d8b44bff62be088c0c94a7829aa410ffa133b,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    if (isBirthday)
    {
        if (speed <= 60)
        {
            return 0;
        }
        if (speed <= 80 && speed >= 61)
        {
            return 1;
        }
        if (speed >= 81)
        {
            return 2;
        }
    }
    if (!isBirthday)
    {
        if (speed <= 65)
        {
            return 0;
        }
        if (speed <= 85 && speed >= 66)
        {
            return 1;
        }
        if (speed >= 86)
        {
            return 2;
        }
    }
}",
59a0088f887207b9450033d0bec152a0c9e18bab,"public int[] shiftLeft(int[] nums)
{
    int[] result = new int[nums.length]; 
    result[nums.length - 1] = nums[0]; 
    int j = 0; 
    for (int i = 1; i < nums.length - 1; i++)
    {
        result[j] = nums[i];
        j++; 
    }
    
    return result; 
}
",
a2ef5d82ffeb0d2c874c95de31b9ca6d0e3da825,"public String repeatEnd(String str, int n)
{ 	
    String res=str.substring(str.length()-n);//n = 0 return null or exception?
    for(int i=1;i<n;i++)
    {		// String res?
            res=res+str.substring(str.length()-n);
    return res;
    }
}
",
c5aebb4151a6c14d6fb00ca52ff6164ceb64474b,"public int noTeenSum(int a, int b, int c)
{
    return fixTeen(a) + fixTeen(b) + fixTeen(c);
}

public int fixTeen(int n)
{
    return (n &gt;= 13 &amp;&amp; n &lt; 15 || n &gt; 16 &amp;&amp; n &lt;= 19) ?
        0 : n;
}
",
abf203f02a8e6355f71ebc0195c9c4f08db3dca9,"public int greenTicket(int a, int b, int c)
{ 
    if (a == b && b == c){
        return 20;
    }
    if (a == b || b == c || a == c){
        return 10;
    }
    return 0;
}
",
67e32e60ccf94c9e237b1ee60eec88d54337ee46,"public int noTeenSum(int a, int b, int c)
{
	return fixTeen(a) + fixTeen(b) + fixTeen(c);
}

public int fixTeen(int n)
{
    if (( n > 12 && n < 15) ||( n > 16 && n < 20 )) {
     return 0;
   }
   return n;
}
",
353250dbb0f7d8b1345775c3b7683b3a5c68b0d5,"public int makeChocolate(int small, int big, int goal)
{
    // small = 1 kilo each
    // big = 5 kilos each
    int numBig = 0;
    int numSmall = 0;
    numBig = goal / 5;
    numSmall = goal % 5;
    int sum = 5 * numBig + numSmall;
    
    if (numSmall > small)
    {
    	return -1;
    }
    else if (sum == goal)
    {
        return numSmall;
    }
    else
    {
        while (sum < goal && numSmall < small)
        {
            sum++;
            numSmall++;
        }
        
        if (goal == sum)
        {
            return numSmall;
        }
        else
        {
            return -1;
        }
            
    }
}
",
3d4c98b74adf52d4ca5fe21febb24b1a8f6a6120,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++) {
        if (nums[i] != val && nums[i + 1] != val) {
            return false;
        }
    }
    return true;
}
",
b1a0288831ecb0ae603b3c1ba2ee301b5ebd4583,"public boolean twoTwo(int[] nums)
{
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] == 2)
        {
            if (nums[i + 1] != 2 || nums[i - 1] != 2)
            {
                return false;
            }
        }
    }
    return true;
}",
b05268e4079f92fa8c479a385b128576976d16c9,"public String atFirst(String str)
{
    String result = str.substring(0, 2);
    
    String value = '@';
    
    if (result.length() == 0)
    {
        result.charAt(0) = '@';
        result(1) = '@';
    }
    else if (result.length() == 1)
    {
        result(1) = '@';
    }
    else
    {
        result = result;
    }
    
    return result;
}
",
dbbe2c6beeefd93c68c1cf77a6130ed4323b9aa3,"public int countEvens(int[] nums)
{
    int count = 0;
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] % 2 == 0)
        {
            count++;
        }
    }
    return count;
}
",
26bc37d1d0a520cad0dce5a5034e6ee5e7a7dd98,"public String getSandwich(String str)
{
    int startBread = str.indexOf(""bread"");
    int endBread = str.lastIndexOf(""bread"");
	boolean firstBread = str.startsWith(""bread"", startBread);
    boolean lastBread = str.startsWith(""bread"", endBread);
    if (firstBread == true && lastBread == true)
    {
        int sandwichLength = str.length();
        return str.substring(startBread, endBread);
    }
    else 
    {
        return """";
    }
}
",
4d384fd87638ed186323e848f2ec5a09c96e1c17,"public int luckySum(int a, int b, int c)
{
    int sum = 0;
    if (a == 13)
    {
        // do nothing
    }
    else if (b == 13)
    {
        sum = sum + a;
    }
    else if (c == 13)
    {
        sum = sum + a + b;
    }
    else 
    {
        sum = sum +a + b + c;
    }
    return sum;
}
",
4eb6382872b95c713ee9b9ee3717c152840acf5e,"public int[] zeroMax(int[] nums)
{
    int[] numArray;
    for(int i : nums)
    {
        if (nums[i] == 0)
        {
            nums[i] = largestOdd(i, nums);
        }
    }
    return numArray;
}

public int largestOdd(int position, int[] nums2)
{
    int biggestOdd = 0
    for (int i = position; i < nums2.length; i++)
    {
        if (nums2[i] % 2 == 1 && nums2[i] > biggestOdd)
        {
            biggestOdd = nums2[i];
        }
    }
    return biggestOdd;
}",
ecd2767c2649044a0da26903ef340674e89f1009,"public int[] fix45(int[] nums) {
  int[] result = nums;
  for(int i = 0; i < result.length; i++) {
      if(result[i] == 4 && i != result.length) {
          int index = findIndexOfValidFive(result);
           
          if(index != -1) {
              int temp = result[i + 1];
              result[i + 1] = result[index];
              result[index] = temp;
          }
      }
  }  
   
  return result;
}
 
public int findIndexOfValidFive(int[] nums) {
    for(int i = 0; i < nums.length; i++) {
        if((i == 0 && nums[i] == 5) || (nums[i] == 5 && nums[i - 1] != 4)) {
            return i;
        }
    }
     
    return -1;",
6e4190526c8769e0db69f3dce1afccb32c3fecc3,"public int loneSum(int a, int b, int c)
{
    if (a == b && b == c)
    {
        return 0;
    }
    else if (a == b)
    {
        return c;
    }
    else if (a == c)
    {
        return b;
    }
    else if (b == c)
    {
        return a;
    }
    else
    {
        return a + b + c;
    }
}",
2b92c031167d3664a0be5ab4cee6d5ad678ce824,"public int sum67(int[] nums)
{
    int count = 0;
    int seven = 0;
    
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] == 6)
        {
           for (int x = i; x < nums.length; x++)
           {
               if (nums[x] != 7)
               {
                   count = count + 0;
               }
               else if (nums[x] == 7)
               {
                   count = count + 0;
                   i = i + x;
               }
           }
        
        }
        
        count = count + nums[i];
        // i'm stuck on excluding numbers up till 7.
        // okay, i'm trying to say:
        // when you reach a 6, ignore the 6.
        // then, ignore each number until you reach a 7.
        
        // so perhaps the smarter way to state this is:
        // ahhh maybe a separate int to count 7's?
        
        // i'm thinking in the way the problem is laid out for me, where
        // i'm supposed to ""ignore"" sections of numbers
        
        // maybe just fucking count them all and ignore the ones in between 6 and 7
        
       
        
    }
    
    return count;
}

",
ec0734122f4add509acf5c24dba4d8ba253e0c85,"public int roundSum(int a, int b, int c)
{
    a = this.round10(a);
    b = this.round10(b);
    c = this.round10(c);
    
    int sum = a + b + c;
    
    return sum;
}

public int round10(int num)
{
    int remainder = num % 10;
    
    if (remainder >= 5)
    {
        // round up
        num = num + (10 - remainder);
    }
    else
    {
        // round down
        num = num - remainder;
    }
    
    return num;
}
",
3da6d13c5e129585a85f09cc153cb57358bb6316,"public String without2(String str) 
{
    if (str.length() >= 2)
    {
        if (str.substring(0,2).equals(str.substring(str.length() - 2)))
        {
            return str.substring(2);
            // if the two letters at the beginning of the word and at the end of the word are equal to each other, the string will returned with these two letters
        }
        else
        {
            return str;
            // if the two letters are not equal to each other, then the original string will be returned
        }
    }
    else
    {
        return str;
        //if the word is only two letters or less, it will return the original string 
    }
}
",
f0965dc5b01333c0db74c3b81e48129583709ad9,"public int sortaSum(int a, int b)
{
    int sum = (a + b);
    if (10 <= sum && sum <= 19)
    {
        return 20;
    }
    return sum;
}
",
eb9d1e97323f6c0c1410dd8ae35aa261280fc389,"public boolean endOther(String a, String b)
{
    a = a.toLowerCase();
    b = a.toLowerCase();
    return(a.endsWith(b) || b.endsWith(a));
    
    
}
",
a641c5efbb7e5f53f92580571992aa0a53d6cdf6,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
a00102f735624bf1544acb79ff4e5af5281fc96e,"public int centeredAverage(int[] nums)
{
    int min = nums[0];
    int max = nums[0];
    int total = nums[0];
    for (int i = 1; i < nums.length; i++)
    {
        if (nums[i] > max)
        {
            max = nums[i];
        }
        else if (nums[i] < min)
        {
            min = nums[i];
        }
        total = total + nums[i];
    }
    return (sum - max - min) / (nums.length - 2);
}",
e444710aa658e2dde4799f8965284cd20bc98f6a,"public int countEvens(int[] nums)
{
    for (int count=0; count < nums.length; count++) {
        int even = 0;
  if (nums[count] % 2 == 0)
  even++;
  }
  return even;
}
",
658cc87d5ac403faedaaa331874ee4b4c3043e4f,"public boolean isEverywhere(int[] nums, int val)
{
    for(int i = 0; i < nums.length; i++)
    {
     	if (nums[i] 1= val && nums[i + 1] != val)
        {
            return false;
        }
    }
    
    return true;
}
",
6b9f55c88028fdb9f9e0adbb7f59b28fb9564c5a,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] != val)
        {
            if (i < nums.length - 1)
            {
                if (nums[i + 1] != val)
                {
                    return false;
                }
            }
        }
        
    }
    return true;
}
",
93d04bbaaacbdc2e43e79af8101e3443d99f3216,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
b02997d91fd09f8bee8d42b148052543fc339026,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    if (isBirthday)
    {
        speed = speed - 5;
    }
    
    if (speed <= 60)
    {
        return 0;
    }
}
",
a641c5efbb7e5f53f92580571992aa0a53d6cdf6,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
7771b0fe7b472fa3dd018ccf138b317743bc74fc,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    if (speed <= 0)
        return 0;
    else if (speed <= 80)
        return 1;
    else
        return 2;
    if (isBirthday)
        speed -= 5;
}
",
ba64e188a7ff94c5ca147732e34becd1b2436677,"public String atFirst(String str)
{
    String result = str.substring(0, 2);
    
    return result;
}
",
04d3dc5f15435b8116c064824aae98cef0971263,"public int sortaSum(int a, int b)
{
    private int sum
    sum = a + b;
    if (sum >= 10 && sum <= 19)
    {
     	return 20;   
    }
    else
    {
     	return sum;   
    }
}
",
987f265fb4f09a7db40586aa6a321d7c612fa526,"public boolean has77(int[] nums)
{
    int count = 0;
    
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] == 7 && nums[i+1] == 7)
        {
            count = 1;
        }
        else if (nums[i] == 7 && nums[i+2] == 7 && i < nums.length - 3)
        {
            count = 1;
        }
    }
    // okay, another approach is to check if there are two 7's.
    // if there are, store their [] as variables
    // if the difference between them is greater than 2, then false
    
    return (count == 1);
}
",
3f9fb6fe01554295f4eba9d360fb11240c63107c,"public boolean bobThere(String str)
{
    for (int i = 0; i < str.length(); i++)
    {
        if (str.substring(i).startsWith(""b"") 
            && str.substring(i + 2).startsWith(""b""))
        {
            return true;
        }
    }
    return false;
}
",
6f326caf302bdfdbefc02faf1dc435ba9d9f04d6,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if ((nums[i] != val) && (nums[i + 1] != val))
        {
            return false;
        }          
        
    }
     return true;
}
",
d3bbd5372c67b93d7e4c5f3425ac793bb5763980,"public int sortaSum(int a, int b)
{
    int sum = a + b;
    if (sum >= 10 && sum <= 19)
        return 20;
    return sum;
}
",
a3cfe4acc0878f7a98ccbc168df9dff28266dbd7,"public int[] frontPiece(int[] nums)
{
    int [] grid = new int[2];
    
    // establish logi for checking nums.
    // add the proper elements of nums into a new array 
    if (nums.length == 1)
    {
        return grid[0] = nums[0];
    }
    else if (nums.length == 0)
    {
        return grid;
    }
    else
    {
        return grid[nums[0], nums[1]];
    }
}
",
9f76f502536b5caf05e00e7133cb3aa0cc6027d4,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    if (isBirthday)
     speed -=5;
    if (speed <= 60)
        return 0;
    else if (speed <= 80)
        return 1;
    else
        return 2;
    
}
",
1ac085374f785c20ca501ac5939ec5977db8a972,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
    if (isAsleep)
    {
        return false;
    }
    
    if (isMorning)
    {
 		return false;   
    }
    
    return true;
}
",
56564fcd3a089f2e2f8dc872a710a4cf2ca9e4ce,"public String atFirst(String str)
{
    return str.substring(0, 1);
    if (str.substring(0, 1) = null)
    {
        return @;
    }
}
",
56ac97e6ac311645870c594b750311820db92f19,"public int noTeenSum(int a, int b, int c)
{
    return fixTeen(a) + fixTeen(b) + fixTeen(c);
}

public int fixTeen(int n)
{
    if (n >= 13 && n <= 19 && n != 15 && n != 16)
    {
        n = 0;
}
",
a43f9daaa9b5cc98acfe197b9157d9de345febf6,"public int[] frontPiece(int[] nums)
{
    for (int numbers: nums; int i = 0; i < 2; i++)
    {
        int number[i] = numbers;
    }
    return number;
}
",
4ba46181a66bb2f3cf45d38876db8736b1ebda46,"public boolean in1To10(int n, boolean outsideMode)
{
    return ((n >= 1 && n<=10 && !outsideMode) || (n > 10 || n < 1 && outsideMode));
}
",
7dfcce65fc73fc585834f100c75c5d012ca175b9,"public boolean bobThere(String str)
{
   for (int i = 0; i < str.length() - 2; i++)
   {
       if (str.charAt(i) == 'b' && str.charAt(i + 2) == 'b')
   }
    return false;
}
",
62ce70304358abfdd932378fb6cd7769b980fdc9,"public int noTeenSum(int a, int b, int c)
{
	return fixTeen(a) + fixTeen(b) + fixTeen(c);
}

public int fixTeen(int n)
{
    if (13 <= n && n <= 19)
    {
        if (n != 15 || n != 16)
        {
            n = 0;
        }
        return n;
    }
}
",
4d384fd87638ed186323e848f2ec5a09c96e1c17,"public int luckySum(int a, int b, int c)
{
    int sum = 0;
    if (a == 13)
    {
        // do nothing
    }
    else if (b == 13)
    {
        sum = sum + a;
    }
    else if (c == 13)
    {
        sum = sum + a + b;
    }
    else 
    {
        sum = sum +a + b + c;
    }
    return sum;
}
",
68e3bb5f96347b10e0c0bade3bdb8460b5d95909,"public String mixString(String a, String b)
{
    String Result = """"; 
    int times = Math.min(a.length(), b.length()); 
    
    for (int i = 0; i < times; i++)
    {
        String strA = Character.toString(a.charAt(i);
        String strB = Character.toString(b.charAt(i);
                                         
        Result = Result.concat(strA);
        Result = Result.concat(strB);
        a.replaceFirst(strA, """"); 
        b.replaceFirst(strB, """");  
    }
   
    return Result; 
   	
    
}
",
a2ef5d82ffeb0d2c874c95de31b9ca6d0e3da825,"public String repeatEnd(String str, int n)
{ 	
    String res=str.substring(str.length()-n);//n = 0 return null or exception?
    for(int i=1;i<n;i++)
    {		// String res?
            res=res+str.substring(str.length()-n);
    return res;
    }
}
",
54f16f3c5196c9d23444381409e354f9fae465c0,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
0ea1d83d6bffd4f7b531269f88cfadccff02bc63,"public boolean evenlySpaced(int a, int b, int c)
{
    int max = Math.max(a, Math.max(b,c));
    int min = Math.min(a, Math.min(b,c));
    int mid = a+b+c-min-max;
    
    if(max-mid == mid-min) return true;
    return false;
}
",
e87542225324deb36fc5891405e6401d53aab2a3,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    if (isBirthday)
    {
        speed -= 5;
    }
    if (speed=<60)
    {
        return 0;
    }
    if (speed>=61 && speed<= 80)
    {
        return 1;
    }
    if (speed>=81)
    {
        return 2;
    }
}
",
ec0734122f4add509acf5c24dba4d8ba253e0c85,"public int roundSum(int a, int b, int c)
{
    a = this.round10(a);
    b = this.round10(b);
    c = this.round10(c);
    
    int sum = a + b + c;
    
    return sum;
}

public int round10(int num)
{
    int remainder = num % 10;
    
    if (remainder >= 5)
    {
        // round up
        num = num + (10 - remainder);
    }
    else
    {
        // round down
        num = num - remainder;
    }
    
    return num;
}
",
cf50e456db1821c67d784b4596db0e3038f70941,"public boolean isEverywhere(int[] nums, int val)
{
//    for (int i = 0; i < nums.length; i++)
//    {
  //   	if (nums[i] != val || nums[i++] != val)
    //    {
      //      return false;
        //}
    //}
    //return true;
boolean result = true;
for (int i = 0; i <=nums.length-2;i++)
{
	if ( nums[i] != val && nums[i+1] != val)
	result = false;
}
return result;
}
",
852b3e14a19fa6d9cd555e092d1e015cb6087fa2,"public int sum13(int[] nums)
{
    int sum = 0;
    if (num.length != 0)
    {
        for (int num: nums)
        {
            if (num != 13)
            {
                sum = sum + num;
            }
        }
    }
    return sum;
}
",
6a200d12723f9e254906a4c4d6061927e68dbe5d,"public int caughtSpeeding(int speed, boolean isBirthday)
{
	int value = 0; 
  
	if (isBirthday) {
    	speed += 5;
 	}
  	if ( speed <= 60 ) {
    	return 0;
  	}
  	if (speed >= 61 && speed <= 80) {
    	return 1;
  	}
  	if (speed >= 81) { 
    	return 2;
  	} 
  	return value;
}
",
c72936a1839694da8df5554d66db79bf67bec60c,"public int caughtSpeeding(int speed, boolean isBirthday)
{ 
    if (isBirthday)
    {
        speed = speed + 5
    }
	if (speed <= 60)
	{
    	return 0;
	}
    
	if (speed >= 61 && speed <= 80)
	{
    	return 1;
	}
    
	if (speed >= 81)
	{
    	return 2;
	}
	
}
",
3830e31ad432afa3bd25206f3c4d647acaed3868,"public boolean twoTwo(int[] nums)
{
    int x = nums.length;
    for (int i = 0; i < x; i++)
    {
        if (nums[i] == 2)
        {
            if ((i + 1) < x && nums[i + 1] != 2)
            {
                return false;
            }
            else
            {
                i++;
            }
        }
    }
    return true;
}
",
23603f323aca762522c6fa0ba976444d4e9ddb74,"public int makeChocolate(int small, int big, int goal)
{
    int smalls = goal % big;
    if (smalls == 0)
    {
        return -1;
    }
    return smalls;
}
",
83a239f0521cd38117ddbaaf228f8523a019cc40,"public boolean endOther(String a, String b)
{
    return a.toLowerCase().endsWith(b.toLowerCase()) || b.toLowerCase().endsWith(a.toLowerCase());
}
",
3d89f76d27956de3a51e53f7ba12c5aa1fc7e352,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
    if (isMorning && isMom && isAsleep)
        return true;
    if (isMorning && !isMom && !isAsleep)
        return false;
    if (isMorning && isMom && !isAsleep)
        return false;
    return false;    
}
",
db19ea5f1cabdb8d39c12a6acfc593bd85bf4f95,"public int[] tenRun(int[] nums)
{
    for (int i = 0; i < nums.length; i++)
    {
    	if (nums[i] % 10 == 0)
    	{
     	   for (int j = i + 1; j < nums.length && nums[j] % 10 != 0; j++)
           {
            	nums[j] = nums[i];   
           }
    	}
    }
    return nums;
}
",
3a5b1294ef5b59964830e8cf8f6219db0c34b7d8,"public int blackjack(int a, int b)
{
    double remainA;
    remainA = (a % 21); //NOTE: The '%' yields the remainder!!!!
    double remainB;
    remainB =  (b % 21);
    
    // IF the remainder is large for one number, IT IS FAR AWAY from 21.
    if (a > 21 && b > 21)
    {
        return 0;
    }
    else if (a < 21 || b < 21)
    {
        if (a < 21 && b > 21)
        {
            return a;
        }
        else
        {
            return b;
        }
    }
    else
    {
        if (remainA > remainB)
        {
            return b;
        }
        else
        {
            return a;
        }
    }
}",
eb9d1e97323f6c0c1410dd8ae35aa261280fc389,"public boolean endOther(String a, String b)
{
    a = a.toLowerCase();
    b = a.toLowerCase();
    return(a.endsWith(b) || b.endsWith(a));
    
    
}
",
7f78f41fe31215ebb096493c3d9761c7f77fa916,"public int loneSum(int a, int b, int c)
{
    if ( a == b && b == c) {
    return 0;
  }
  if ( a != b && b == c) {
    return a;
  }
  if ( a == c && c != b) {
    return b;
  }
  if ( a == b && b != c) {
    return c;
  }
  return a + b + c;
}
",
d58abb87ff70ff67a76bba0f3d1f0c3ba071d518,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    if (isBirthday == false)
    {
    if (speed < 60)
        {
            return 0;
        }
    if (speed >= 61 && speed <= 80)
        {
            return 1;
        }
    if (speed >= 81)
        {
            return 2;
        }
    }
    if (isBirthday == true)
    {
        return 0;
    return 0;
    }
}",
56cccc5e57b71638ae0f36747e6ae090dc81fe2d,"public int sum67(int[] nums)
{
    int count = 0;
    int seven = 0;
    
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] == 6)
        {
           for (int x = i + 1; x < nums.length; x++)
           {
               if (nums[x] != 7)
               {
                   count = count + 0;
               }
               else if (nums[x] == 7)
               {
                   count = count + 0;
                   i = i + x;
               }
           }
        
        }
        else
        {
        count = count + nums[i];
        }
        // i'm stuck on excluding numbers up till 7.
        // okay, i'm trying to say:
        // when you reach a 6, ignore the 6.
        // then, ignore each number until you reach a 7.
        
        // so perhaps the smarter way to state this is:
        // ahhh maybe a separate int to count 7's?
        
        // i'm thinking in the way the problem is laid out for me, where
        // i'm supposed to ""ignore"" sections of numbers
        
        // maybe just fucking count them all and ignore the ones in between 6 and 7
        
       
        
    }
    
    return count;
}

",
3d4c98b74adf52d4ca5fe21febb24b1a8f6a6120,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++) {
        if (nums[i] != val && nums[i + 1] != val) {
            return false;
        }
    }
    return true;
}
",
98b41121a7f0c87d5746dc0ae2746596c4a8bb37,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
2b92c031167d3664a0be5ab4cee6d5ad678ce824,"public int sum67(int[] nums)
{
    int count = 0;
    int seven = 0;
    
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] == 6)
        {
           for (int x = i; x < nums.length; x++)
           {
               if (nums[x] != 7)
               {
                   count = count + 0;
               }
               else if (nums[x] == 7)
               {
                   count = count + 0;
                   i = i + x;
               }
           }
        
        }
        
        count = count + nums[i];
        // i'm stuck on excluding numbers up till 7.
        // okay, i'm trying to say:
        // when you reach a 6, ignore the 6.
        // then, ignore each number until you reach a 7.
        
        // so perhaps the smarter way to state this is:
        // ahhh maybe a separate int to count 7's?
        
        // i'm thinking in the way the problem is laid out for me, where
        // i'm supposed to ""ignore"" sections of numbers
        
        // maybe just fucking count them all and ignore the ones in between 6 and 7
        
       
        
    }
    
    return count;
}

",
c9864807562ce05a0e1872a9d5d2eae382cb6654,"public boolean canBalance(int[] nums)
{
    boolean result = false;
        int nums1 = 0;
    	int nums2 = 0;
        for (int i = 0; i < nums.length / 2; i++)
        {
            nums1 += nums[i];
        }
        
        for (int j = (nums.length / 2 ) + 1; j < nums.length; j++)
        {
            nums2 += nums[j];
        }
        
        if (nums1 == nums2)
        {
            result = true;
        }
    return result;
}
",
ecd2767c2649044a0da26903ef340674e89f1009,"public int[] fix45(int[] nums) {
  int[] result = nums;
  for(int i = 0; i < result.length; i++) {
      if(result[i] == 4 && i != result.length) {
          int index = findIndexOfValidFive(result);
           
          if(index != -1) {
              int temp = result[i + 1];
              result[i + 1] = result[index];
              result[index] = temp;
          }
      }
  }  
   
  return result;
}
 
public int findIndexOfValidFive(int[] nums) {
    for(int i = 0; i < nums.length; i++) {
        if((i == 0 && nums[i] == 5) || (nums[i] == 5 && nums[i - 1] != 4)) {
            return i;
        }
    }
     
    return -1;",
bbf414c607917bae018f323952576cc4855d0403,"public int[] fix45(int[] nums)
{
    int[] fours = new int [3];
    int[] fives = new int[3];
    int index4=0;
    int index5 = 0;
    for (int i=0; i<nums.length;i++)
    {
        if (nums[i] == 4)
        {
            fours[index4] = i;
            index4++;
        }
        else if (nums[i] == 5)
        {
            fives[index5] = i;
            index5++;
        }
    }
    for (int i = index5-1; i>=0;i--)
    {
        if (nums[fours[i]+1]!=5)
        {
        	nums[fives[i]] = nums[fours[i]+1];
        	nums[fours[i]+1] = 5;
        }
    }
    
    
    
    
    //int start = 0;
    //int skip = -1;
    //for (int i=0; i<nums.length;i++)
    //{
    //    if (nums[i] == 4)
    //    {
    //        for (int j=start; j<nums.length;j++)
   	//		{
    //            if (j!=skip && nums[j]==5)
    //            {
    //                nums[j]=nums[i+1];
    //                nums[i+1]=5;
    //                skip = i+1;
    //                break;
    //            }
    //        }
    //    }
    //}
    return nums;
}
",
9c1b24f0268b9d5238feaf59114da5d3b827e88f,"public boolean bobThere(String str)
{
    for (int i = 0; i < str.length() - 2; i++) 
    {
    if (str.charAt(i) == 'b' && str.charAt(i + 2) == 'b')
    {
        return true;
    }
    }
    return false;
}
",
b7a794971b30c770d5570accb374dac5104bef0e,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
    if (isMorning && isAsleep)
    {
        return false;
    }
    if (isMom && (!isAsleep) && isMorning)
    {
        return true;
    }
}
",
51cd81eddc2c0304f6f4b44ade4bf6e3c8a6aff8,"public String alarmClock(int day, boolean vacation)
{
    if (day >=1 && day <= 5)
    {
        return vacation ? ""10:00"" : ""7:00"";
    }
    
    else
    {
        return vacation ? ""off"" : ""10:00""
    }

    
}
",
b18357d08d239c3169eb42bdabc04d80a3bba5bf,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
    if (isAsleep) 
    {
        return false;
    }
    if (isMorning && !isMom) 
    {
        return false;
    }
    return true;
}
",
7ee540611323a35160a97c8f3d841b30ffcc0e49,"public int sum3(int[] nums)
{
    int sumOfArray = 0;
    for (int i : nums)
    {
        sumOfArray += i;
    }
    return sumOfArray;
}
",
a581a8a3d84b2ba650ac433de7fddce80ff00321,"public int redTicket(int a, int b, int c)
{
    /*if (b != a && c != a)
    {
     	return 0;   
    }
    if*/
    {
     	if (a == 2 && b == 2 && c == 2)
        {
         	return 10;   
        }
        else if (a == b && b == c && a == c)
        {
         	return 5;   
        }
        else 
        {
         	return 0;   
        }
    }
}
",
3d4c1103cc1b9f1262e0e2e77865c91089068160,"public boolean canBalance(int[] nums)
{
    int sum1 = 0;
    for (int = 0; i < nums.length / 2; i++)
    {
        sum1 = sum1 + nums[i];
    }
    int sum2 = 0;
    for (int j = nums.length / 2; j < nums.length; j++)
    {
        sum2 = sum2 + nums[j]
    }
	return sum1 = sum2;
}",
35aba5f59d8333186e6c14dca33d6a77b87aecb5,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] == val && nums[i-1] == val)
        {
            return true;
        }
    }
    return false;
}
",
c1fdbe3e9fca73de72f1831d00c35304cb29463e,"public int[] fizzArray(int n)
{
    int[] result = new int[n];
    for (int i = 0; i < n; i++)
    {
        result[i] = i;
    }
    return result;
}
",
56ac97e6ac311645870c594b750311820db92f19,"public int noTeenSum(int a, int b, int c)
{
    return fixTeen(a) + fixTeen(b) + fixTeen(c);
}

public int fixTeen(int n)
{
    if (n >= 13 && n <= 19 && n != 15 && n != 16)
    {
        n = 0;
}
",
3b24fd13da29cf3eaf6ecbfb5f5dfeb4cbdd236e,"public int noTicket(int 0);
private int 1;
private int 2;
public int caughtSpeeding(int speed, boolean isBirthday)
{
    0 = noTicket;
    1 = smallTicket;
    2 = bigTicket;
    if (isBirthday)
    {
        if (speed <= 65)
        {
            return ""0"";         	
       	}
        else if (speed >= 66 && speed <= 85)
        {
            return ""1"";
        }
        else
        {
			return ""2"";
        }
            
    }
    else
    {
        if (speed <= 60)
        {
            return ""0"";         	
       	}
        else if (speed >= 61 && speed <= 80)
        {
            return ""1"";
        }
        else
        {
			return ""2"";
        }
    
    }
}  
",
a9e28b208ebd799c89289ae125794d7301b373d2,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 1; i < nums.length() - 1; i++)
    {
        if (nums[i - 1] != val && nums[i + 1] != val)
            return false;
    }
    return true;
}
",
51cd81eddc2c0304f6f4b44ade4bf6e3c8a6aff8,"public String alarmClock(int day, boolean vacation)
{
    if (day >=1 && day <= 5)
    {
        return vacation ? ""10:00"" : ""7:00"";
    }
    
    else
    {
        return vacation ? ""off"" : ""10:00""
    }

    
}
",
de22bdd8aa3fe3c905f78ecf7bce75e7f577cc0f,"public int[] shiftLeft(int[] nums)
{
    int[] fresh = new int[nums.length];
    if (nums.length > 0)
    {
    	fresh[nums.length - 1] = nums[0];
    	for (int i = 0; i < nums.length - 1; i++)
    	{
        	fresh[i] = nums[i + 1];
    	}
    }
    return fresh;
}
",
3c7fcd8b79f482dfed60c826a914d6e742c28ac2,"public int noTeenSum(int a, int b, int c)
{
	return fixTeen(a) + fixTeen(b) + fixTeen(c);
}

public int fixTeen(int n)
{
    if (n >= 13 && n <= 19 && n != 15 && n != 16)
        return 0;
}
",
e1377201338b35fe171b9444b54cc7c825b47de7,"public int greenTicket(int a, int b, int c)
{
    if (a == b && b == c) //if two numbers are the same
        return 20;
    if (a == b || a == c || b == c) //if all the numbers are the same
        return 10;
    else //none of the numbers are the same
        return 0;
}
",
eb9d1e97323f6c0c1410dd8ae35aa261280fc389,"public boolean endOther(String a, String b)
{
    a = a.toLowerCase();
    b = a.toLowerCase();
    return(a.endsWith(b) || b.endsWith(a));
    
    
}
",
892a5a3886a37110226513fe655b564b73fba9bb,"public int roundSum(int a, int b, int c)
{
    return round10(a) + round10(b) + round10(c);
}

public int round10(int num)
{
    int nm = num % 10;
    if (nm <= 5)
    {
        return num - 10 - nm;
    }
    else
    {
        return num + nm;
    }
}
",
9c1b24f0268b9d5238feaf59114da5d3b827e88f,"public boolean bobThere(String str)
{
    for (int i = 0; i < str.length() - 2; i++) 
    {
    if (str.charAt(i) == 'b' && str.charAt(i + 2) == 'b')
    {
        return true;
    }
    }
    return false;
}
",
ec03a0ab16a221fcf9292fec81dde347af81b619,"public String repeatEnd(String str, int n)
{
StringBuffer result = new StringBuffer();
String end = str.substring(str.length() - n);

for(int i = 0; i < n; i++)
result.append(end);

return result.toString(
}
",
f720cc450f616d826f746ce4609c79ab1860b68a,"public int[] fizzArray(int n)
{
    int[] result = new int[n];
        for (int i = 0; i<n.length;i++)
        {
            result[i-1] = i;
        }
    return result;
}
",
6d72f5b621649af66f06d05181162fe55168a76e,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    if (isBirthday == true)
    {
        speed = speed - 5;
    }
}
",
4104adb19668d1e41a0c2b2850ca3d2b45e25648,"public int[] fix45(int[] nums)
{
    int n = 0;
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] == 4)
        {
            n++;
        }
    }
    int[] nums5 = new int[n];
    int n5 = 0;
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] == 5)
        {
            nums5[n5] = i;
            n5++;
        }
    }
    int count5 = 0
    for (ints i : nums)
    {
        if (i < nums.length - 1 && nums[i] == 4 && nums[i + 1] == 5)
        {
            // no change needed
        }
        else if (i < nums.length - 1 && nums[i] == 4)
        {
            nums[nums5[count5]] = nums[i + 1];
            nums[i + 1] = 5;
            count5++;
        }
    }
    return nums;
}",
dbbe2c6beeefd93c68c1cf77a6130ed4323b9aa3,"public int countEvens(int[] nums)
{
    int count = 0;
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] % 2 == 0)
        {
            count++;
        }
    }
    return count;
}
",
96649403e3463cc1c05171bea6b6b5e9d2710fe4,"public boolean isEverywhere(int[] nums, int val)
{
//    for (int i = 0; i < nums.length; i++)
//    {
  //   	if (nums[i] != val || nums[i++] != val)
    //    {
      //      return false;
        //}
    //}
    //return true;
    
    for (int i = 0; i <=nums.length-2;i++)

{

if ( nums[i] != val && nums[i+1] != val)

result = false;

}

  return result;

}
",
37483792e65efa307aab5d74a47b4a1dbe36e195,"public boolean bobThere(String str)
{
    //int firstB = str.indexOf(""b"");
   // int secondB = str.lastIndexOf(""b"");
    //if (secondB == firstB + 2)
    //    return true;
   // return false;
    for (int n == 0; n < str.length(); n++)
    {
        if ((str.charAt(n) == str.indexOf(""b"") && (str.charAt(n + 2) == str.indexOf(""b"", n))
        {
            return true;
        }
                
    }//end for loop
    return false;
}
",
54f16f3c5196c9d23444381409e354f9fae465c0,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
93d04bbaaacbdc2e43e79af8101e3443d99f3216,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
863743fea61e06d673131ef705425d4b67d43542,"public int loneSum(int a, int b, int c)
{
    if (a == b)
        return b + c;
    if (b == c)
        return a + c;
    if (a == c)
		return b + c;        
}
",
b1ffd079f8c4294a66e06ad7d2fb2a7a8fbe7344,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
2e24d7549990ee84b78b5ae21f0d94af990870fb,"public int loneSum(int a, int b, int c)
{
    if (a == b){
    	return(cc);
    }else{
    	if (a == c){
        	return (b);
        }else{
        	if (b == c){
            	return(a);
            }else{
            	return(a + b + c);
                
            }
        }
    }
}
",
3830e31ad432afa3bd25206f3c4d647acaed3868,"public boolean twoTwo(int[] nums)
{
    int x = nums.length;
    for (int i = 0; i < x; i++)
    {
        if (nums[i] == 2)
        {
            if ((i + 1) < x && nums[i + 1] != 2)
            {
                return false;
            }
            else
            {
                i++;
            }
        }
    }
    return true;
}
",
faa6cc44696d72e0fa85cc561584a1de159a4aa5,"public int dateFashion(int you, int date)
{
    if (you <= 2 || date <= 2)
        return 0;
    if (you >= 8 || date >= 8)
        return 2;
    return 1;
}
",
f7613e1314baffe2be7c9164f5586a14e6e82fd6,"public int countCode(String str)
{
    int count = 0;
    for (int i = 0; i < str.length() - 4; i++) {
        if (str.substring(i, i + 1).equals(""co"") && str.charAt(i + 3) == 'e') {
            count++;
        }
    }
    return count;
}
",
3775e7869a17ff36825273ea16d9832eedb6471a,"public int dateFashion(int you, int date)
{
   if (you >= 8 && date >= 8)
   {
       return 2;
   }
    

    
   else if (you <= 2 || date <= 2)
   {
       return 0;
   }
    
    return 1;
}
",
2b92c031167d3664a0be5ab4cee6d5ad678ce824,"public int sum67(int[] nums)
{
    int count = 0;
    int seven = 0;
    
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] == 6)
        {
           for (int x = i; x < nums.length; x++)
           {
               if (nums[x] != 7)
               {
                   count = count + 0;
               }
               else if (nums[x] == 7)
               {
                   count = count + 0;
                   i = i + x;
               }
           }
        
        }
        
        count = count + nums[i];
        // i'm stuck on excluding numbers up till 7.
        // okay, i'm trying to say:
        // when you reach a 6, ignore the 6.
        // then, ignore each number until you reach a 7.
        
        // so perhaps the smarter way to state this is:
        // ahhh maybe a separate int to count 7's?
        
        // i'm thinking in the way the problem is laid out for me, where
        // i'm supposed to ""ignore"" sections of numbers
        
        // maybe just fucking count them all and ignore the ones in between 6 and 7
        
       
        
    }
    
    return count;
}

",
68e3bb5f96347b10e0c0bade3bdb8460b5d95909,"public String mixString(String a, String b)
{
    String Result = """"; 
    int times = Math.min(a.length(), b.length()); 
    
    for (int i = 0; i < times; i++)
    {
        String strA = Character.toString(a.charAt(i);
        String strB = Character.toString(b.charAt(i);
                                         
        Result = Result.concat(strA);
        Result = Result.concat(strB);
        a.replaceFirst(strA, """"); 
        b.replaceFirst(strB, """");  
    }
   
    return Result; 
   	
    
}
",
6d72f5b621649af66f06d05181162fe55168a76e,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    if (isBirthday == true)
    {
        speed = speed - 5;
    }
}
",
b60fafea9d0e4f435fdf8bfedf54ff4f63b769dc,"public int centeredAverage(int[] nums)
{
     nums.sort();
     int count = 0;
     int sum = 0;
     for (int i = 1; i < nums.length - 1; i++){
     sum += nums[i];
     count++;}
     return sum / count;
}
",
203f9c47a0738c4f7deb3aa08f1ac17b6d91cac6,"public int[] withoutTen(int[] nums)
{
    int[] array = new int[nums.length];
    
    int index = 0;
    
    for (int i : nums)
    {
        if (i != 10)
        {
            array[index] = i;
            index++;
        }
    }
    
   return array;
}
",
cd727adb54733c5b0e8ec8f90e3a20c4ce931c92,"public int makeChocolate(int small, int big, int goal)
{
    if goal >= 5 * big:
        remainder = goal - 5 * big
    else:
        remainder = goal % 5
        
    if remainder <= small:
    {
        return remainder;
    }
        
    return - 1;
}
",
d07d2f1b40602638d4c357809540b7e2870f1eb1,"public boolean cigarParty(int cigars, boolean isWeekend)
{
    if (isWeekend) 
        return cigar >=40;
    else 
        return cigar >= 40 && <= 60;
        
}
",
56cccc5e57b71638ae0f36747e6ae090dc81fe2d,"public int sum67(int[] nums)
{
    int count = 0;
    int seven = 0;
    
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] == 6)
        {
           for (int x = i + 1; x < nums.length; x++)
           {
               if (nums[x] != 7)
               {
                   count = count + 0;
               }
               else if (nums[x] == 7)
               {
                   count = count + 0;
                   i = i + x;
               }
           }
        
        }
        else
        {
        count = count + nums[i];
        }
        // i'm stuck on excluding numbers up till 7.
        // okay, i'm trying to say:
        // when you reach a 6, ignore the 6.
        // then, ignore each number until you reach a 7.
        
        // so perhaps the smarter way to state this is:
        // ahhh maybe a separate int to count 7's?
        
        // i'm thinking in the way the problem is laid out for me, where
        // i'm supposed to ""ignore"" sections of numbers
        
        // maybe just fucking count them all and ignore the ones in between 6 and 7
        
       
        
    }
    
    return count;
}

",
987f265fb4f09a7db40586aa6a321d7c612fa526,"public boolean has77(int[] nums)
{
    int count = 0;
    
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] == 7 && nums[i+1] == 7)
        {
            count = 1;
        }
        else if (nums[i] == 7 && nums[i+2] == 7 && i < nums.length - 3)
        {
            count = 1;
        }
    }
    // okay, another approach is to check if there are two 7's.
    // if there are, store their [] as variables
    // if the difference between them is greater than 2, then false
    
    return (count == 1);
}
",
1ac085374f785c20ca501ac5939ec5977db8a972,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
    if (isAsleep)
    {
        return false;
    }
    
    if (isMorning)
    {
 		return false;   
    }
    
    return true;
}
",
dbbe2c6beeefd93c68c1cf77a6130ed4323b9aa3,"public int countEvens(int[] nums)
{
    int count = 0;
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] % 2 == 0)
        {
            count++;
        }
    }
    return count;
}
",
2341aa02180229566878128a50f5ccba14fdcee3,"public int[] frontPiece(int[] nums)
{
    int number[] = new int[2];
    for (int numbers: nums)
    {
        number[i] = numbers;
    }
    return number;
}
",
8ce774ddf43260b9faa39499c3a67d91f71fc099,"public boolean squirrelPlay(int temp, boolean isSummer)
{
    { if (!isSummer && temp >= 60 && <= 90)
    {
        return true;
    }}
}
",
4104adb19668d1e41a0c2b2850ca3d2b45e25648,"public int[] fix45(int[] nums)
{
    int n = 0;
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] == 4)
        {
            n++;
        }
    }
    int[] nums5 = new int[n];
    int n5 = 0;
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] == 5)
        {
            nums5[n5] = i;
            n5++;
        }
    }
    int count5 = 0
    for (ints i : nums)
    {
        if (i < nums.length - 1 && nums[i] == 4 && nums[i + 1] == 5)
        {
            // no change needed
        }
        else if (i < nums.length - 1 && nums[i] == 4)
        {
            nums[nums5[count5]] = nums[i + 1];
            nums[i + 1] = 5;
            count5++;
        }
    }
    return nums;
}",
a3cfe4acc0878f7a98ccbc168df9dff28266dbd7,"public int[] frontPiece(int[] nums)
{
    int [] grid = new int[2];
    
    // establish logi for checking nums.
    // add the proper elements of nums into a new array 
    if (nums.length == 1)
    {
        return grid[0] = nums[0];
    }
    else if (nums.length == 0)
    {
        return grid;
    }
    else
    {
        return grid[nums[0], nums[1]];
    }
}
",
3d4c98b74adf52d4ca5fe21febb24b1a8f6a6120,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++) {
        if (nums[i] != val && nums[i + 1] != val) {
            return false;
        }
    }
    return true;
}
",
fa7e52a8dd82b9e07db5c24a9f6640028d267b37,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] != val && nums[i + 1] != val)
        {
            return false;
        }
    }
    return true;
}
",
a4a204a7f131a2bd02585a880d46d98f1098fd2d,"public boolean squirrelPlay(int temp, boolean isSummer)
{
    if (isSummer){
        return (temp >= 60 && temp <= 100);
    }
    return (temp >= 60 && temp <= 90);
}
",
abf203f02a8e6355f71ebc0195c9c4f08db3dca9,"public int greenTicket(int a, int b, int c)
{ 
    if (a == b && b == c){
        return 20;
    }
    if (a == b || b == c || a == c){
        return 10;
    }
    return 0;
}
",
e444710aa658e2dde4799f8965284cd20bc98f6a,"public int countEvens(int[] nums)
{
    for (int count=0; count < nums.length; count++) {
        int even = 0;
  if (nums[count] % 2 == 0)
  even++;
  }
  return even;
}
",
04d3dc5f15435b8116c064824aae98cef0971263,"public int sortaSum(int a, int b)
{
    private int sum
    sum = a + b;
    if (sum >= 10 && sum <= 19)
    {
     	return 20;   
    }
    else
    {
     	return sum;   
    }
}
",
9df1cbdbe2059e87bcede6e1d1033ffff3e609ed,"public int[] withoutTen(int[] nums)
{
  	int[] result = new int[nums.length];
  	int count = 0;
  	
    for (int i = 0; i < nums.length; i++)
    {
     	if (nums[i] != 10)
        {
         	result[count] = nums[i];
            count++;
        }
    }
    for (int i = 0; i < count; i++)
    {
     	result[result.length - i] = 0;
    }
    
    return result;
}
",
c1fdbe3e9fca73de72f1831d00c35304cb29463e,"public int[] fizzArray(int n)
{
    int[] result = new int[n];
    for (int i = 0; i < n; i++)
    {
        result[i] = i;
    }
    return result;
}
",
43deef182cd61bed063eb9c08a0e2f5288da8f7b,"public int[] tenRun(int[] nums)
{
    int x = nums.length;
    int ten = 0;
    for (int i = 0; i < x; i++)
    {
        if (nums[i] % 10 == 0)
        {
            ten = nums[i];
            i++;
            while (i < x && nums[i] % 10 != 0)
            {
                nums[i] = ten;
            }
        }
    }
    return nums;
}
",
b716d157ac664292fc299cd0d52fb5af40deb1e6,"public String atFirst(String str)
{
    if (str.length() == 1)
    {
        return str + ""@"";
    }
    if (str.length() == 0)
    {
        return ""@@"";
    }
    else
    {
        return str.substring(0, 2);
    }
        
}
",
6f7f61c8665e5fbb33bb6cdb300c38706ffa9630,"public int centeredAverage(int[] nums)
{
    int average = 0;
    int sum = 0;
    int low = nums[0];
    int high = nums[0];
    boolean found = false;
    
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] > high)
        {
            high = nums[i];
        }
        
        if (nums[i] < low)
        {
            low = nums[i];
        }
    }
    
    for (int a : nums)
    {
        sum = sum + a;
    }
    
    sum = sum - low - high;
    
    average = sum / (nums.length - 2)
    
    return average;
}
",
c4cd9fb76f3a67d4e774521d2a07bd1fe7cd0b11,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
353250dbb0f7d8b1345775c3b7683b3a5c68b0d5,"public int makeChocolate(int small, int big, int goal)
{
    // small = 1 kilo each
    // big = 5 kilos each
    int numBig = 0;
    int numSmall = 0;
    numBig = goal / 5;
    numSmall = goal % 5;
    int sum = 5 * numBig + numSmall;
    
    if (numSmall > small)
    {
    	return -1;
    }
    else if (sum == goal)
    {
        return numSmall;
    }
    else
    {
        while (sum < goal && numSmall < small)
        {
            sum++;
            numSmall++;
        }
        
        if (goal == sum)
        {
            return numSmall;
        }
        else
        {
            return -1;
        }
            
    }
}
",
c1fdbe3e9fca73de72f1831d00c35304cb29463e,"public int[] fizzArray(int n)
{
    int[] result = new int[n];
    for (int i = 0; i < n; i++)
    {
        result[i] = i;
    }
    return result;
}
",
948b5b2528e52a0cd157a7b353521353f3da1fef,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
     return (isMom || (!(isAsleep)));

}
",
f7613e1314baffe2be7c9164f5586a14e6e82fd6,"public int countCode(String str)
{
    int count = 0;
    for (int i = 0; i < str.length() - 4; i++) {
        if (str.substring(i, i + 1).equals(""co"") && str.charAt(i + 3) == 'e') {
            count++;
        }
    }
    return count;
}
",
6b9f55c88028fdb9f9e0adbb7f59b28fb9564c5a,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] != val)
        {
            if (i < nums.length - 1)
            {
                if (nums[i + 1] != val)
                {
                    return false;
                }
            }
        }
        
    }
    return true;
}
",
9e81d1a2a7638c14b721846f5090b36ad07ab308,"public int[] seriesUp(int n)
{
    int[] result = new int[(n * (n + 1)) / 2];
    int count = 1;
    int index = 0;
    for (int i = 0; i < result.length; i++)
    {
        for (int j = 0; j < count; j++)
        {
            result[index] = j;
        	index++;
        }
        count++;
    }
}
",
bb95327d0292272d65dd996e6aa6f61c87319399,"public boolean endOther(String a, String b)
{
    if a.length() == ""a"" + ""b""
        return b.substring(0,1).toLowerCase();
}
",
b1ffd079f8c4294a66e06ad7d2fb2a7a8fbe7344,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
23603f323aca762522c6fa0ba976444d4e9ddb74,"public int makeChocolate(int small, int big, int goal)
{
    int smalls = goal % big;
    if (smalls == 0)
    {
        return -1;
    }
    return smalls;
}
",
852b3e14a19fa6d9cd555e092d1e015cb6087fa2,"public int sum13(int[] nums)
{
    int sum = 0;
    if (num.length != 0)
    {
        for (int num: nums)
        {
            if (num != 13)
            {
                sum = sum + num;
            }
        }
    }
    return sum;
}
",
08e29390d6fdca4360be0c44bbf8f5ef02483c2d,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    if (isBirthday) {
        if (speed <= 65) {
            return 0;
        }
        else if (speed >= 66 && speed <= 85 {
            return 1;
        }
        else {
            return 2;
        }            
    }
    else {
        if (speed <= 60) {
            return 0;
        }
        else if (speed >= 61 && speed <= 80 {
            return 1;
        }
        else {
            return 2;
    }
}
",
93d04bbaaacbdc2e43e79af8101e3443d99f3216,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
db19ea5f1cabdb8d39c12a6acfc593bd85bf4f95,"public int[] tenRun(int[] nums)
{
    for (int i = 0; i < nums.length; i++)
    {
    	if (nums[i] % 10 == 0)
    	{
     	   for (int j = i + 1; j < nums.length && nums[j] % 10 != 0; j++)
           {
            	nums[j] = nums[i];   
           }
    	}
    }
    return nums;
}
",
931bdaaf31f894404e5b5a484f746f1c9d3bd27d,"public int greenTicket(int a, int b, int c)
{
    if (a != b && b != c && a != c)
    {
        return 0;
    }
    else if (a == b && b == c)
    {
        return 20;
    }
    else
    {
        return 10;
    }
}
",
b7d5d5590bde31e23ee41e67ec8ade069279409e,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    if (isBirthday) speed >= 5;
    if (speed <= 60) return 0;
    return (speed > 60 && speed <= 80) ? 1 : 2;
}
",
3eb765355b81909fe2778872f22843054944d21a,"public int[] tenRun(int[] nums)
{
    if (nums.length<1)
    {
        return nums;
    }
    int tenn = nums[0];
    for (int i = o: i < nums.length; i++)
    {
        if (tenn % 10 !=0)
        {
            tenn = nums[i];
        }
        if (nums[i] % 10 == 0)
        {
            tenn = nums[i];
        }
        nums[i] = tenn;
    }
    return nums;
}
",
0eefe10c954547a7675d5ee81f88d4d112cf44e9,"public boolean bobThere(String str)
{
    for (int i = 0; i < str.length() - 2; i++) {
        if (str.charAt(i) == 'b' && str.charAt(i + 2) == 'b') {
            return true;
        }
    }
    return false;
}
",
eb9d1e97323f6c0c1410dd8ae35aa261280fc389,"public boolean endOther(String a, String b)
{
    a = a.toLowerCase();
    b = a.toLowerCase();
    return(a.endsWith(b) || b.endsWith(a));
    
    
}
",
739598df6f10e1b41997fbbce33f2e2bf0fd995e,"public boolean has77(int[] nums)
{
    int x = nums.length;
    for (int i = 0; i < x; i++)
    {
        if (i < x - 1 && nums.[i] == 7 && nums.[i + 1] == 7)
        {
            return true;
        }
        if (i < x - 2 && nums.[i] == 7 && nums.[i + 2] == 7)
        {
            return true;
        }
    }
    return false;
}
",
9ba9d8618a99bf06f7c45d5ee796bf2c7bcc2325,"public boolean twoTwo(int[] nums)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] == 2)
        {
            if (nums[i + 1] != 2)
            {
                return false;
            }
            i++;
        }
    }
    if (nums. length >= 2 && nums[nums.length - 2] != 2 && nums[nums.length - 1] == 2)
    {
        return false;
    }
    return true;
}
",
58f8f141073ae3a1ee18e35d8cdf6ef297f50f94,"public int redTicket(int a, int b, int c)
{
    if (a == b && b == c && a == 2)
    {
        return 10;
    }
    else if (a == b && b == c)
    {
        return 5;
    }
    else if (b == c)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}
",
b02997d91fd09f8bee8d42b148052543fc339026,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    if (isBirthday)
    {
        speed = speed - 5;
    }
    
    if (speed <= 60)
    {
        return 0;
    }
}
",
9f98cd5893ed8711953832332cb9e68381d2d182,"public String without2(String str) 
{
    if (str.length() >= 2)
    {
    	if (str.substring(0, 2) == (str.substring(str.length() - 2)))
            {
                return (str.substring(2));
            }
        else
            {
                return str;
            }
    }        
    else
    {
        return str;
    }
}
",
faa6cc44696d72e0fa85cc561584a1de159a4aa5,"public int dateFashion(int you, int date)
{
    if (you <= 2 || date <= 2)
        return 0;
    if (you >= 8 || date >= 8)
        return 2;
    return 1;
}
",
6b538f7d9eac6f8c54cd2c59a699ca73280e0930,"public class FizzArray {

//fizzArray is a method which takes input n and prepares fizzArray

public static int[] fizzArray(int n) {

//initializing integer array with size n

int[] result = new int[n];

for (int i = 0; i < n; i++){

result[i] = i;

}

return result;

}
",
529d313f0a353b81e3a1ca5e020890023e995836,"public String without2(String str) 
{
     if (str.length() >= 2 && str.substring(0, 2).equals(str.substring(str.length() - 2))) {
           return str.substring(2, str.length());
       }
       return str;
}
",
948b5b2528e52a0cd157a7b353521353f3da1fef,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
     return (isMom || (!(isAsleep)));

}
",
892a5a3886a37110226513fe655b564b73fba9bb,"public int roundSum(int a, int b, int c)
{
    return round10(a) + round10(b) + round10(c);
}

public int round10(int num)
{
    int nm = num % 10;
    if (nm <= 5)
    {
        return num - 10 - nm;
    }
    else
    {
        return num + nm;
    }
}
",
2341aa02180229566878128a50f5ccba14fdcee3,"public int[] frontPiece(int[] nums)
{
    int number[] = new int[2];
    for (int numbers: nums)
    {
        number[i] = numbers;
    }
    return number;
}
",
6e2e62d18f30974998599ac300549d4eb85fb22c,"public static int[] fizzArray(int n) {

//initializing integer array with size n

int[] result = new int[n];

for (int i = 0; i < n; i++){

result[i] = i;

}

return result;

}
",
c5aebb4151a6c14d6fb00ca52ff6164ceb64474b,"public int noTeenSum(int a, int b, int c)
{
    return fixTeen(a) + fixTeen(b) + fixTeen(c);
}

public int fixTeen(int n)
{
    return (n &gt;= 13 &amp;&amp; n &lt; 15 || n &gt; 16 &amp;&amp; n &lt;= 19) ?
        0 : n;
}
",
2b92c031167d3664a0be5ab4cee6d5ad678ce824,"public int sum67(int[] nums)
{
    int count = 0;
    int seven = 0;
    
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] == 6)
        {
           for (int x = i; x < nums.length; x++)
           {
               if (nums[x] != 7)
               {
                   count = count + 0;
               }
               else if (nums[x] == 7)
               {
                   count = count + 0;
                   i = i + x;
               }
           }
        
        }
        
        count = count + nums[i];
        // i'm stuck on excluding numbers up till 7.
        // okay, i'm trying to say:
        // when you reach a 6, ignore the 6.
        // then, ignore each number until you reach a 7.
        
        // so perhaps the smarter way to state this is:
        // ahhh maybe a separate int to count 7's?
        
        // i'm thinking in the way the problem is laid out for me, where
        // i'm supposed to ""ignore"" sections of numbers
        
        // maybe just fucking count them all and ignore the ones in between 6 and 7
        
       
        
    }
    
    return count;
}

",
ec03a0ab16a221fcf9292fec81dde347af81b619,"public String repeatEnd(String str, int n)
{
StringBuffer result = new StringBuffer();
String end = str.substring(str.length() - n);

for(int i = 0; i < n; i++)
result.append(end);

return result.toString(
}
",
98b41121a7f0c87d5746dc0ae2746596c4a8bb37,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
93d04bbaaacbdc2e43e79af8101e3443d99f3216,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
8ce774ddf43260b9faa39499c3a67d91f71fc099,"public boolean squirrelPlay(int temp, boolean isSummer)
{
    { if (!isSummer && temp >= 60 && <= 90)
    {
        return true;
    }}
}
",
62ce70304358abfdd932378fb6cd7769b980fdc9,"public int noTeenSum(int a, int b, int c)
{
	return fixTeen(a) + fixTeen(b) + fixTeen(c);
}

public int fixTeen(int n)
{
    if (13 <= n && n <= 19)
    {
        if (n != 15 || n != 16)
        {
            n = 0;
        }
        return n;
    }
}
",
a581a8a3d84b2ba650ac433de7fddce80ff00321,"public int redTicket(int a, int b, int c)
{
    /*if (b != a && c != a)
    {
     	return 0;   
    }
    if*/
    {
     	if (a == 2 && b == 2 && c == 2)
        {
         	return 10;   
        }
        else if (a == b && b == c && a == c)
        {
         	return 5;   
        }
        else 
        {
         	return 0;   
        }
    }
}
",
4465ac2e7e70f3ac5ddbd490bd262cc0c4f6249d,"public int[] frontPiece(int[] nums)
{
    int [] grid = new int[2];
    
    // establish logi for checking nums.
    // add the proper elements of nums into a new array 
    if (nums.length == 1)
    {
        return grid[0] = nums[0];
    }
    else if (nums.length == 0)
    {
        return grid;
    }
    else
    {
        grid[0] = nums[0];
        grid[1] = nums[1];
        return grid[];
    }
}
",
dc23e528bd74dbcdb541ee29b004f0426a8d31c4,"public boolean squirrelPlay(int temp, boolean isSummer)
{
    if (isSummer && temp >= 60 && temp <= 100)
        return true;
    if (!isSummer && temp >= 60 && temp <= 90)
        return true;
    return false;
}
",
a641c5efbb7e5f53f92580571992aa0a53d6cdf6,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
8f6dbd26c957f489904930b7ed0aa2950cd254af,"public String repeatEnd(String str, int n)
{
    String repeat = str.substring(str.length() - n);
    for (int i = 1; i < n; i++)
        //starts with the first letter of the string
    {
        repeat = repeat + str.substring(str.length() - n);
        //gets the part of the word that needs to be returned
    }
    return repeat;
    //returns the string made out of the n repetitions
}
",
be7dd1c681ece206447d7c19a5ae06f1777a4e05,"public boolean xyzThere(String str)
{
 
    if (str.length () >= 3  && 
        str.substring(0,3).equals(""xyz"") )
    {
        return true;
    }
        for (int x = 0; x < str.length() -2; x++)
        {
   			if (str.charAt(x) != '.' && str.substring (x,
               x+3).equals(""xyz""))                              
    {
        return true;
    }
  
    {
        return false;
    }
            {return false;}
}
}
",
83a239f0521cd38117ddbaaf228f8523a019cc40,"public boolean endOther(String a, String b)
{
    return a.toLowerCase().endsWith(b.toLowerCase()) || b.toLowerCase().endsWith(a.toLowerCase());
}
",
3da6d13c5e129585a85f09cc153cb57358bb6316,"public String without2(String str) 
{
    if (str.length() >= 2)
    {
        if (str.substring(0,2).equals(str.substring(str.length() - 2)))
        {
            return str.substring(2);
            // if the two letters at the beginning of the word and at the end of the word are equal to each other, the string will returned with these two letters
        }
        else
        {
            return str;
            // if the two letters are not equal to each other, then the original string will be returned
        }
    }
    else
    {
        return str;
        //if the word is only two letters or less, it will return the original string 
    }
}
",
f1f0a6448bfe3ad005796a40633fc50d6ffa6023,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
8a4197cd94d2fc278a10045f02c9323393eb70ad,"public boolean sameEnds(int[] nums, int n)
{
    for (int i = 0; i < n; i++)
    {
        if (nums[i] != nums[nums.length - n + i])
            return false;
    }
    return true;
}
",
54f16f3c5196c9d23444381409e354f9fae465c0,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
dd09babe580586f1680177c5f9004d2f1f2011bf,"public boolean has77(int[] nums)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] == 7 && nums[i + 1] == 7)
            return true;
        if (nums[i] < nums.length - 2 && nums[i] == 7 && nums[i + 2] == 7)
            return true;
    }
    return false;
}
",
98b41121a7f0c87d5746dc0ae2746596c4a8bb37,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
51fae40e9861d7b67fbaedf2d011c3a432f13b51,"public boolean xyzThere(String str)
{
    int i = -1;
    while ((i = str.indexOf(""xyz"", i + 1)) != -1)
    {
        if (i == 0 || (str.charAt(i - 1) != "".""))
        {
            return true;
        }
    }
    return false;
}
",
4f020dcb2ebec419aa94d431533df15542e537ec,"public boolean in1To10(int n, boolean outsideMode)
{
    if (outsideMode)
    {
    	if (n == 1 || n == 2 || n == 3 || n == 4 || n == 5 || n == 6 || n == 7 || n == 8 || n == 9 || n == 10)
    {
        return false;
    }
    if (n <= 1 || n >= 10)
    {
        return true;
    }  
    }
    if (n == 1 || n == 2 || n == 3 || n == 4 || n == 5 || n == 6 || n == 7 || n == 8 || n == 9 || n == 10)
    {
        return true;
    }
    if (n <= 1 || n >= 10)
    {
        return false;
    }  
    return false;
}
",
62ce70304358abfdd932378fb6cd7769b980fdc9,"public int noTeenSum(int a, int b, int c)
{
	return fixTeen(a) + fixTeen(b) + fixTeen(c);
}

public int fixTeen(int n)
{
    if (13 <= n && n <= 19)
    {
        if (n != 15 || n != 16)
        {
            n = 0;
        }
        return n;
    }
}
",
14ced47f38f6da0c3afcc08c0bcb9ed96b5c73fe,"public String getSandwich(String str)
{
    if (str.indexOf(""bread"") > 0) // if there are two peices of bread
    {
         System.out.print(str.indexOf(""bread""));
        return ""no"";
    }
    else
    {
        return """";
    }
}
",
07e5044ee85fdfbd00a05896e4320766869d1163,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
109f0388a3981d429a9290e5861cb47f08920b3b,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    if (speed < 60)
    {
        return 0;
    }
    else
    {
        return 1;
    }
}
",
9df1cbdbe2059e87bcede6e1d1033ffff3e609ed,"public int[] withoutTen(int[] nums)
{
  	int[] result = new int[nums.length];
  	int count = 0;
  	
    for (int i = 0; i < nums.length; i++)
    {
     	if (nums[i] != 10)
        {
         	result[count] = nums[i];
            count++;
        }
    }
    for (int i = 0; i < count; i++)
    {
     	result[result.length - i] = 0;
    }
    
    return result;
}
",
36570bb4af86c54290163c5fac9a892991f69b7f,"public boolean in1To10(int n, boolean outsideMode)
{
    boolean a = true;
    if ( n<=10 && n>=1 && outsideMode==false)
        a=true;
    if ( n>=10 && n<=1 && outsideMode==true)
        a=true;
    if ( n>10 || n<1)
        a=false
    return a;
}
",
e05151e763b22c6322f72dd9558578b0970a10d6,"public boolean canBalance(int[] nums)
{
    double sum = 0;
    for (int n : nums) {
        sum += n;
    }
    
    double target = sum / 2;
    sum = 0;
    
    for (int i : nums) {
        sum += i;
        if (sum == target) {
            return true;
        }
    }
    return false;
}
",
2341aa02180229566878128a50f5ccba14fdcee3,"public int[] frontPiece(int[] nums)
{
    int number[] = new int[2];
    for (int numbers: nums)
    {
        number[i] = numbers;
    }
    return number;
}
",
b03f6ee58d1c2efbc298c1b090d888a47d5425a9,"public boolean evenlySpaced(int a, int b, int c)
{
    if (b-a <= 1 && c-a >= 2 && c-b >= 2 
        || b-a >= 2 && c-a <= 1 && c-b >=2
        || b-a >=2 && c-a >= 2 && c-b <= 1)
        return true;
    return false;
}
",
3830e31ad432afa3bd25206f3c4d647acaed3868,"public boolean twoTwo(int[] nums)
{
    int x = nums.length;
    for (int i = 0; i < x; i++)
    {
        if (nums[i] == 2)
        {
            if ((i + 1) < x && nums[i + 1] != 2)
            {
                return false;
            }
            else
            {
                i++;
            }
        }
    }
    return true;
}
",
eb40012d4b37cf5da376cf00035ed5e704fcbffc,"public int[] tenRun(int[] nums)
{
    for (int i = -1; i < nums.length; i++)
    {
        if (nums[i] % 10 == 0)
        {
            i++
        }
        else
        {
            nums[i] = 10;
        }
    }
    return nums;
}",
c9864807562ce05a0e1872a9d5d2eae382cb6654,"public boolean canBalance(int[] nums)
{
    boolean result = false;
        int nums1 = 0;
    	int nums2 = 0;
        for (int i = 0; i < nums.length / 2; i++)
        {
            nums1 += nums[i];
        }
        
        for (int j = (nums.length / 2 ) + 1; j < nums.length; j++)
        {
            nums2 += nums[j];
        }
        
        if (nums1 == nums2)
        {
            result = true;
        }
    return result;
}
",
afec4a1fda7760651e34095e9ceef8a8483018be,"public boolean sameEnds(int[] nums, int n)
{
    
    for (int i = 0; i <= n; i++)
    {
        if (nums[i] != nums[nums.length - n + i - 1])
        {
            return false;
        }
    }
    return true;
}
",
987f265fb4f09a7db40586aa6a321d7c612fa526,"public boolean has77(int[] nums)
{
    int count = 0;
    
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] == 7 && nums[i+1] == 7)
        {
            count = 1;
        }
        else if (nums[i] == 7 && nums[i+2] == 7 && i < nums.length - 3)
        {
            count = 1;
        }
    }
    // okay, another approach is to check if there are two 7's.
    // if there are, store their [] as variables
    // if the difference between them is greater than 2, then false
    
    return (count == 1);
}
",
9294b03f96e7ba6c8ebb76fc9437bfadef40b777,"public int sum67(int[] nums)
{
	int sum = 0;
    for (int i = 0; i < nums.length; i++)
        if (nums[i] == 6)
        {
            for(int j = nums[i]; nums[i] =! 7; j++)
            {
            	sum + 0;
            }
        }
        else 
        {
        	sum += nums[i];
        }
            
    return sum;
}
",
b1734b84d9123cc28d3f62e758b480ab26ea8fb9,"public int sortaSum(int a, int b)
{
   int sum = a + b;
   if (sum >= 10 && sum <= 19)
   {
   		return 20; 
   }
   else
   {
   		return sum;
   }
}
",
8b2f2240b040ccff48ec7c89647d89e57b34ca88,"public boolean has77(int[] nums)
{
    for ( int i = 0; i < nums.length - 2; i++ ) {
        if ( nums[i] == 7 ) {
            if ( nums[i + 1] == 7 || nums[i + 2] == 7 ) {
                return true;
            }    
        }
    }
    if ( nums[nums.length - 2] == 7 && nums[nums.length - 1] == 7 )
    {
        return true;
    }
    return false;
}
",
8f844faf4a77c8c1664086e5bcfba82f26569b2f,"public int countClumps(int[] nums)
{
    int clumps = 0;
    for (int i =0;i<nums.length;i++)
    {
        if (nums[i] == nums[i+1] && i < nums.length -1)
        {
            clumps++;
        }
    }
    return clumps;
}
",
850b29b41eb8755b65684da314498e5f9f502ead,"public int[] frontPiece(int[] nums)
{
    if (nums.length .isEqual(1)
        return nums;
    if (nums.length .isEqual(2)
        return nums;  
    else
        int[] sum = new int [nums.length];
        sum[0] = nums[0];
        sum[1] = nums[1];
        return sum;
    
   // int[] sum = new int [nums.length-1];
    //for (int i = 0; i < nums.length; i++)
      //  sum[i] = nums[i];
   //return sum;
}
",
dc23e528bd74dbcdb541ee29b004f0426a8d31c4,"public boolean squirrelPlay(int temp, boolean isSummer)
{
    if (isSummer && temp >= 60 && temp <= 100)
        return true;
    if (!isSummer && temp >= 60 && temp <= 90)
        return true;
    return false;
}
",
bbf414c607917bae018f323952576cc4855d0403,"public int[] fix45(int[] nums)
{
    int[] fours = new int [3];
    int[] fives = new int[3];
    int index4=0;
    int index5 = 0;
    for (int i=0; i<nums.length;i++)
    {
        if (nums[i] == 4)
        {
            fours[index4] = i;
            index4++;
        }
        else if (nums[i] == 5)
        {
            fives[index5] = i;
            index5++;
        }
    }
    for (int i = index5-1; i>=0;i--)
    {
        if (nums[fours[i]+1]!=5)
        {
        	nums[fives[i]] = nums[fours[i]+1];
        	nums[fours[i]+1] = 5;
        }
    }
    
    
    
    
    //int start = 0;
    //int skip = -1;
    //for (int i=0; i<nums.length;i++)
    //{
    //    if (nums[i] == 4)
    //    {
    //        for (int j=start; j<nums.length;j++)
   	//		{
    //            if (j!=skip && nums[j]==5)
    //            {
    //                nums[j]=nums[i+1];
    //                nums[i+1]=5;
    //                skip = i+1;
    //                break;
    //            }
    //        }
    //    }
    //}
    return nums;
}
",
109f0388a3981d429a9290e5861cb47f08920b3b,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    if (speed < 60)
    {
        return 0;
    }
    else
    {
        return 1;
    }
}
",
ec0734122f4add509acf5c24dba4d8ba253e0c85,"public int roundSum(int a, int b, int c)
{
    a = this.round10(a);
    b = this.round10(b);
    c = this.round10(c);
    
    int sum = a + b + c;
    
    return sum;
}

public int round10(int num)
{
    int remainder = num % 10;
    
    if (remainder >= 5)
    {
        // round up
        num = num + (10 - remainder);
    }
    else
    {
        // round down
        num = num - remainder;
    }
    
    return num;
}
",
b716d157ac664292fc299cd0d52fb5af40deb1e6,"public String atFirst(String str)
{
    if (str.length() == 1)
    {
        return str + ""@"";
    }
    if (str.length() == 0)
    {
        return ""@@"";
    }
    else
    {
        return str.substring(0, 2);
    }
        
}
",
73ed1de85d5b22771d0d401395f97178f38186a0,"public int centeredAverage(int[] nums)
{
    int max = nums[0];
	int min = nums[0];
	int sum = nums[0];
	for (int i = 1; i < nums.length; i++)
	{
		sum += nums[i];
		if (nums[i] > max)
        {
			max = nums[i];
        }
		else if(nums[i] < min)
        {
			min = nums[i];
        }
	}
	return (sum - max - min) / (nums.length - 2)
}
",
9ba9d8618a99bf06f7c45d5ee796bf2c7bcc2325,"public boolean twoTwo(int[] nums)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] == 2)
        {
            if (nums[i + 1] != 2)
            {
                return false;
            }
            i++;
        }
    }
    if (nums. length >= 2 && nums[nums.length - 2] != 2 && nums[nums.length - 1] == 2)
    {
        return false;
    }
    return true;
}
",
805cd69cde567a8b05acfc59036fef8080b8d8bf,"public int countEvens(int[] nums)
{
    for (int i = 0; i < nums.length; i++)
        if (nums[i] % 2 == 0)
            return nums[i];
    	if (nums[i] == 0)
            return nums[i];
    return 0;
}
",
ecd2767c2649044a0da26903ef340674e89f1009,"public int[] fix45(int[] nums) {
  int[] result = nums;
  for(int i = 0; i < result.length; i++) {
      if(result[i] == 4 && i != result.length) {
          int index = findIndexOfValidFive(result);
           
          if(index != -1) {
              int temp = result[i + 1];
              result[i + 1] = result[index];
              result[index] = temp;
          }
      }
  }  
   
  return result;
}
 
public int findIndexOfValidFive(int[] nums) {
    for(int i = 0; i < nums.length; i++) {
        if((i == 0 && nums[i] == 5) || (nums[i] == 5 && nums[i - 1] != 4)) {
            return i;
        }
    }
     
    return -1;",
b1ffd079f8c4294a66e06ad7d2fb2a7a8fbe7344,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
abf203f02a8e6355f71ebc0195c9c4f08db3dca9,"public int greenTicket(int a, int b, int c)
{ 
    if (a == b && b == c){
        return 20;
    }
    if (a == b || b == c || a == c){
        return 10;
    }
    return 0;
}
",
0808dca8b4a525f8b42f6b75f66b3b1d93c3c6cc,"public int sum13(int[] nums)
{
    int sum = 0;
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] != 13 && nums[i - 1] != 13)
        {
            sum += nums[i];
        }
    }
    return sum;
}
",
b7d5d5590bde31e23ee41e67ec8ade069279409e,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    if (isBirthday) speed >= 5;
    if (speed <= 60) return 0;
    return (speed > 60 && speed <= 80) ? 1 : 2;
}
",
b02997d91fd09f8bee8d42b148052543fc339026,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    if (isBirthday)
    {
        speed = speed - 5;
    }
    
    if (speed <= 60)
    {
        return 0;
    }
}
",
ec03a0ab16a221fcf9292fec81dde347af81b619,"public String repeatEnd(String str, int n)
{
StringBuffer result = new StringBuffer();
String end = str.substring(str.length() - n);

for(int i = 0; i < n; i++)
result.append(end);

return result.toString(
}
",
ab6e01ad587cf8cc30f23754b8c8c9d3566dc7a4,"public int blackjack(int a, int b)
{
    if (a > 21)
    {
        return 0;
    }
    if (b > 21)
    {
        return 0;
    }
    if (a > 21 && b > 21)
    {
        return 0;
    }

}
",
e782e855c718d5d72eb1c47b31cc0c9050d6b269,"public String without2(String str) 
{
    // Given a string, if a length 2 substring appears at both its beginning and end,
// return a string without the substring at the beginning, so ""HelloHe"" yields ""lloHe"".
// The substring may overlap with itself, so ""Hi"" yields """". Otherwise, return the original string unchanged.
public String without2(String str)
{
	int len = str.length();
	if(len >= 2)
	{
		if(str.substring(0,2).equals(str.substring(len-2, len)))
			return str.substring(2);
		else
			return str;
	}
	else
		return str;
}
}
",
b03f6ee58d1c2efbc298c1b090d888a47d5425a9,"public boolean evenlySpaced(int a, int b, int c)
{
    if (b-a <= 1 && c-a >= 2 && c-b >= 2 
        || b-a >= 2 && c-a <= 1 && c-b >=2
        || b-a >=2 && c-a >= 2 && c-b <= 1)
        return true;
    return false;
}
",
b8c119c667e36132f25df0fd31ba102f94d1c6df,"public boolean evenlySpaced(int a, int b, int c)
{
    if (a != b && a != c && b != c)
    {
         return (Math.abs(b - a) == Math.abs(c - b) 
         || Math.abs(b - a) == Math.abs(c - a)
         || Math.abs(a - b) == Math.abs(c - b)
         || Math.abs(c - a) == Math.abs(b - c) 
         || a == b && b == c);
    }
    return false;
}
",
e22ce5e6a4c5b1b12e61c7366855f779f8ae64f3,"public String atFirst(String str)
{
    if (str.length() >= 2)
    {
        return (str.substring(0, 2));
    }
    else if (str.length() == 1)
    {
        return str + ""@"";
    }
    else
    {
        return ""@@"";
    }
}
",
8dbe6fb15987997ffaf0f07b86943c0bcb2846fb,"public String alarmClock(int day, boolean vacation)
{
    if (vacation)
    {
        if (day != 0 || day != 6)
        {
            return ""10:00"";
        }
        else
        {
            return ""off"";
        }
    }
	else
    {
        if (day != 0 || day != 6)
        {
            return ""7:00"";
        }
        else
        {
            return ""10:00"";
        {
    }


",
324744e665f46a82492205626535ae0a59adced1,"public int countEvens(int[] nums)
{
    int count = 0;
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] % 2 == 0)
        {
            count++;
        }
    }
    return count;
}
",
f90f4209c0769229c85ac2c0392970d7920341e4,"public String alarmClock(int day, boolean vacation)
{
        alarmClock(0, true) -> ""off"";
        alarmClock(6, true) -> ""off""   
        alarmClock(1, true) -> ""10:00""
        alarmClock(2, true) -> ""10:00""
        alarmClock(3, true) -> ""10:00""
        alarmClock(4, true) -> ""10:00""
        alarmClock(5, true) -> ""10:00"" 
}
",
ec0734122f4add509acf5c24dba4d8ba253e0c85,"public int roundSum(int a, int b, int c)
{
    a = this.round10(a);
    b = this.round10(b);
    c = this.round10(c);
    
    int sum = a + b + c;
    
    return sum;
}

public int round10(int num)
{
    int remainder = num % 10;
    
    if (remainder >= 5)
    {
        // round up
        num = num + (10 - remainder);
    }
    else
    {
        // round down
        num = num - remainder;
    }
    
    return num;
}
",
da986520180a13a98bb67c061d43bd9c2686e469,"public String alarmClock(int day, boolean vacation)
{
    if (vacation) { 
        if (day == 0 || day == 6) {
            return ""off"";
        } else {
            return ""10:00"";
        }
    } else {
        if (day == 0 || day == 6) {
            return ""10:00"";
        } else {
            return ""7:00"";
        }
    }
}
",
745f12119fb1eefe0979dda6203e5cf8a5febee0,"public String getSandwich(String str)
{
    int firstBread = str.indexOf(""bread"");
    int lastBread = str.lastIndexOf(""bread"");
    if (firstBread > -1 && lastBread > -1)
        return str.substring(firstBread, lastBread);
    else
        return """"
}
",
68e3bb5f96347b10e0c0bade3bdb8460b5d95909,"public String mixString(String a, String b)
{
    String Result = """"; 
    int times = Math.min(a.length(), b.length()); 
    
    for (int i = 0; i < times; i++)
    {
        String strA = Character.toString(a.charAt(i);
        String strB = Character.toString(b.charAt(i);
                                         
        Result = Result.concat(strA);
        Result = Result.concat(strB);
        a.replaceFirst(strA, """"); 
        b.replaceFirst(strB, """");  
    }
   
    return Result; 
   	
    
}
",
69e641533574f585ccebe26430c3b79103b5c593,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
    if (isAsleep)
    {
        return false;
    }
    else if (isMorning} 
    {
        if (isMom)
        {
            return true:
        }
        else
        {
            return false;
        }
    }
    else
    {
        return true;
    }
}
",
f3f8a46c06347f005fc0c551e63762d27fb11704,"public boolean has77(int[] nums)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] == 7 && nums[i + 1] == 7)
        {
            return true;
        }
    }
    for (int i = 0; i < nums.length - 2; i++)
    {
        if (nums[i] == 7 && nums[i + 2] == 7)
        {
            return true;
        }
    }
}
",
6df6127758cd9f2ab7f4ebbed30d50f1fabcb1f1,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    int i = 0;
    if (isBirthday)
    {
        i = 5;
    }
   
    if (speed <= 60 + i)
    {
        return 0;
    }
    else if (speed >= 61 + i && speed <=80 + i )
    {
        return 1;
    }
    else
    {
        return 2;
    }
    
}
",
f31330f56c18e1f1b8fca287085661999fcfd64e,"public int blackjack(int a, int b)
{
    if (a > 21) {
    	if (b > 21) {
            return 0;
        }
        return b;
    }
    if (a < b && b <= 21) {
        return b;
    }
    else 
        return a;
}
",
0eefe10c954547a7675d5ee81f88d4d112cf44e9,"public boolean bobThere(String str)
{
    for (int i = 0; i < str.length() - 2; i++) {
        if (str.charAt(i) == 'b' && str.charAt(i + 2) == 'b') {
            return true;
        }
    }
    return false;
}
",
c4fa96f9af07e09df6d1f3cc7c42be1e2029eb72,"public boolean sameEnds(int[] nums, int n)
{
        for(int i = 0; i < n; i++) {
        if(nums[i] != nums[nums.length - n + i])
            return false;
    }
                
    return true;
}
",
b716d157ac664292fc299cd0d52fb5af40deb1e6,"public String atFirst(String str)
{
    if (str.length() == 1)
    {
        return str + ""@"";
    }
    if (str.length() == 0)
    {
        return ""@@"";
    }
    else
    {
        return str.substring(0, 2);
    }
        
}
",
a581a8a3d84b2ba650ac433de7fddce80ff00321,"public int redTicket(int a, int b, int c)
{
    /*if (b != a && c != a)
    {
     	return 0;   
    }
    if*/
    {
     	if (a == 2 && b == 2 && c == 2)
        {
         	return 10;   
        }
        else if (a == b && b == c && a == c)
        {
         	return 5;   
        }
        else 
        {
         	return 0;   
        }
    }
}
",
7ee540611323a35160a97c8f3d841b30ffcc0e49,"public int sum3(int[] nums)
{
    int sumOfArray = 0;
    for (int i : nums)
    {
        sumOfArray += i;
    }
    return sumOfArray;
}
",
a641c5efbb7e5f53f92580571992aa0a53d6cdf6,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
b1734b84d9123cc28d3f62e758b480ab26ea8fb9,"public int sortaSum(int a, int b)
{
   int sum = a + b;
   if (sum >= 10 && sum <= 19)
   {
   		return 20; 
   }
   else
   {
   		return sum;
   }
}
",
9df1cbdbe2059e87bcede6e1d1033ffff3e609ed,"public int[] withoutTen(int[] nums)
{
  	int[] result = new int[nums.length];
  	int count = 0;
  	
    for (int i = 0; i < nums.length; i++)
    {
     	if (nums[i] != 10)
        {
         	result[count] = nums[i];
            count++;
        }
    }
    for (int i = 0; i < count; i++)
    {
     	result[result.length - i] = 0;
    }
    
    return result;
}
",
62ce70304358abfdd932378fb6cd7769b980fdc9,"public int noTeenSum(int a, int b, int c)
{
	return fixTeen(a) + fixTeen(b) + fixTeen(c);
}

public int fixTeen(int n)
{
    if (13 <= n && n <= 19)
    {
        if (n != 15 || n != 16)
        {
            n = 0;
        }
        return n;
    }
}
",
3e52e3a1544f71192d5ae9883005f6c91861bff1,"public int noTeenSum(int a, int b, int c)
{
    return fixTeen(a) + fixTeen(b) + fixTeen(c);
}

public int fixTeen(int n)
{
    switch (n) {
        case 13:
        case 14:
        case 17:
        case 18:
        case 19:
            return 0;
            break;
        default:
            return n;
            break;
    }
    
}
",
b8c119c667e36132f25df0fd31ba102f94d1c6df,"public boolean evenlySpaced(int a, int b, int c)
{
    if (a != b && a != c && b != c)
    {
         return (Math.abs(b - a) == Math.abs(c - b) 
         || Math.abs(b - a) == Math.abs(c - a)
         || Math.abs(a - b) == Math.abs(c - b)
         || Math.abs(c - a) == Math.abs(b - c) 
         || a == b && b == c);
    }
    return false;
}
",
b18357d08d239c3169eb42bdabc04d80a3bba5bf,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
    if (isAsleep) 
    {
        return false;
    }
    if (isMorning && !isMom) 
    {
        return false;
    }
    return true;
}
",
9c1b24f0268b9d5238feaf59114da5d3b827e88f,"public boolean bobThere(String str)
{
    for (int i = 0; i < str.length() - 2; i++) 
    {
    if (str.charAt(i) == 'b' && str.charAt(i + 2) == 'b')
    {
        return true;
    }
    }
    return false;
}
",
1246d82dc38af3da4d77890172a9d1890cc382a1,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
d07d2f1b40602638d4c357809540b7e2870f1eb1,"public boolean cigarParty(int cigars, boolean isWeekend)
{
    if (isWeekend) 
        return cigar >=40;
    else 
        return cigar >= 40 && <= 60;
        
}
",
c0dbc4d8e7248361a8572bc2edab98f5b3c74203,"public int greenTicket(int a, int b, int c)
{
    if (a != b && b != c && a != c){
        return 0;
    } 
    if (a == b && b == c){
        return 20;
    }
    if (a == b || b == c || a == c){
        return 10;
    }
}
",
353250dbb0f7d8b1345775c3b7683b3a5c68b0d5,"public int makeChocolate(int small, int big, int goal)
{
    // small = 1 kilo each
    // big = 5 kilos each
    int numBig = 0;
    int numSmall = 0;
    numBig = goal / 5;
    numSmall = goal % 5;
    int sum = 5 * numBig + numSmall;
    
    if (numSmall > small)
    {
    	return -1;
    }
    else if (sum == goal)
    {
        return numSmall;
    }
    else
    {
        while (sum < goal && numSmall < small)
        {
            sum++;
            numSmall++;
        }
        
        if (goal == sum)
        {
            return numSmall;
        }
        else
        {
            return -1;
        }
            
    }
}
",
351839745bc2cdccbb945ecd1391b63bfee8a94a,"public boolean twoTwo(int[] nums)
{
    for (int i = 1; i < nums.length -1; i++){
        if (i ==2 && (i-1!=2 || i+1!= 2)){
                return false;
        }
    }
    return true;
}
",
bd6a0818d02de2faff72753b137582927a9653f1,"public int countClumps(int[] nums)
{
    boolean b = false;
    int a = 0;
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] == nums[i + 1] && !b)
        {
            a++;
             b = true;
        }
        else if (nums[i] != nums[i + 1])
        {
            b = false;
        }
    }
    return a;
}
",
b05268e4079f92fa8c479a385b128576976d16c9,"public String atFirst(String str)
{
    String result = str.substring(0, 2);
    
    String value = '@';
    
    if (result.length() == 0)
    {
        result.charAt(0) = '@';
        result(1) = '@';
    }
    else if (result.length() == 1)
    {
        result(1) = '@';
    }
    else
    {
        result = result;
    }
    
    return result;
}
",
8b2f2240b040ccff48ec7c89647d89e57b34ca88,"public boolean has77(int[] nums)
{
    for ( int i = 0; i < nums.length - 2; i++ ) {
        if ( nums[i] == 7 ) {
            if ( nums[i + 1] == 7 || nums[i + 2] == 7 ) {
                return true;
            }    
        }
    }
    if ( nums[nums.length - 2] == 7 && nums[nums.length - 1] == 7 )
    {
        return true;
    }
    return false;
}
",
b0114cf5376b422979e26b916e9e4831b453f91d,"public String getSandwich(String str)
{
    int firstBread = -1;
    int lastBread = -1;
    for (int i = 0; i < str.length() - 5; i++)
    {
        if (str.substring(i, i+5).equals(""bread"")
        {
        }
    }
}
",
51d726f3ba7d0bdf6df41f275be7d3e5ae0b21ed,"public String getSandwich(String str)
{
    int firstBread = -1;
    int lastBread = -1;
    for (int i = 0; i < str.length() - 5; i++)
    {
        if (str.substring(i, i+5).equals(""bread""))
        {
            firstBread = i;
            i = str.length();
        }
    }
    for (int j = str.length() - 5; j > 0; j--)
    {
        if (str.substring(j, j+5).equals(""bread""))
        {
            lastBread = j;
            j = 0;
        }
    }
    if(firstBread != -1 && lastBread != -1 && firstBread != lastBread)
        return str.substring(firstBread + 5, lastBread);
    return """";
}
",
eee0eb76d7c982f7cdbbfb86dbf032940b49e38b,"public int luckySum(int a, int b, int c)
{
    if (a == 13) // if a is equal to 13
        return 0;
    if (b == 13) // if b is equal to 13 go to the a value
        return a;
    if (c == 13) //if c is 13, only add  and b
        return (a + b);
    return (a + b + c); //if none of the others,add all the numbers
}
",
739598df6f10e1b41997fbbce33f2e2bf0fd995e,"public boolean has77(int[] nums)
{
    int x = nums.length;
    for (int i = 0; i < x; i++)
    {
        if (i < x - 1 && nums.[i] == 7 && nums.[i + 1] == 7)
        {
            return true;
        }
        if (i < x - 2 && nums.[i] == 7 && nums.[i + 2] == 7)
        {
            return true;
        }
    }
    return false;
}
",
9ba9d8618a99bf06f7c45d5ee796bf2c7bcc2325,"public boolean twoTwo(int[] nums)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] == 2)
        {
            if (nums[i + 1] != 2)
            {
                return false;
            }
            i++;
        }
    }
    if (nums. length >= 2 && nums[nums.length - 2] != 2 && nums[nums.length - 1] == 2)
    {
        return false;
    }
    return true;
}
",
fa7e52a8dd82b9e07db5c24a9f6640028d267b37,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] != val && nums[i + 1] != val)
        {
            return false;
        }
    }
    return true;
}
",
63bc9b6a7e3b8866c3ea0d84d282e25f9716e838,"public String mixString(String a, String b)
{
    String result = """"; 
    int index = 0;
    
    if (a.length() >= b.length()) {
        index = b.length(); 
    }
    if (a.length() <= b.length()) {
        index = a.length(); 
    }
    for (int i = 0; i < index; i++) {
        result += a.substring(i, i + 1) + b.substring(i, i + 1);
    }
    if (a.length() < b.length()) {
        result += b.substring(a.length(), b.length()); 
    }
    if (a.length() > b.length()) {
        result += a.substring(b.length(), a.length()); 
    }
    return result; 
}
",
a2ef5d82ffeb0d2c874c95de31b9ca6d0e3da825,"public String repeatEnd(String str, int n)
{ 	
    String res=str.substring(str.length()-n);//n = 0 return null or exception?
    for(int i=1;i<n;i++)
    {		// String res?
            res=res+str.substring(str.length()-n);
    return res;
    }
}
",
c1fdbe3e9fca73de72f1831d00c35304cb29463e,"public int[] fizzArray(int n)
{
    int[] result = new int[n];
    for (int i = 0; i < n; i++)
    {
        result[i] = i;
    }
    return result;
}
",
07e5044ee85fdfbd00a05896e4320766869d1163,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
23603f323aca762522c6fa0ba976444d4e9ddb74,"public int makeChocolate(int small, int big, int goal)
{
    int smalls = goal % big;
    if (smalls == 0)
    {
        return -1;
    }
    return smalls;
}
",
a641c5efbb7e5f53f92580571992aa0a53d6cdf6,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
1ac085374f785c20ca501ac5939ec5977db8a972,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
    if (isAsleep)
    {
        return false;
    }
    
    if (isMorning)
    {
 		return false;   
    }
    
    return true;
}
",
e22ce5e6a4c5b1b12e61c7366855f779f8ae64f3,"public String atFirst(String str)
{
    if (str.length() >= 2)
    {
        return (str.substring(0, 2));
    }
    else if (str.length() == 1)
    {
        return str + ""@"";
    }
    else
    {
        return ""@@"";
    }
}
",
7ad991a24edd45eac9dde28ce5f6b6a462d3b44f,"public String without2(String str) 
{
    String endLetters;
    endLetters = str.substring(str.length() - 1, str.length()); // I don't know how many letters there are!!
    // ^ use a method that gets the length of a string. Use "".getLength - 1"" and ""- 2?""
    String startLetters;
    startLetters = str.substring(0, 1);
    
    String middleLetters;
    middleLetters = str.substring(2, str.length() - 3);
        
    if (endLetters == startLetters)
    {
        return middleLetters;
    }
    else 
    {
        return str;
    }
}
",
3da6d13c5e129585a85f09cc153cb57358bb6316,"public String without2(String str) 
{
    if (str.length() >= 2)
    {
        if (str.substring(0,2).equals(str.substring(str.length() - 2)))
        {
            return str.substring(2);
            // if the two letters at the beginning of the word and at the end of the word are equal to each other, the string will returned with these two letters
        }
        else
        {
            return str;
            // if the two letters are not equal to each other, then the original string will be returned
        }
    }
    else
    {
        return str;
        //if the word is only two letters or less, it will return the original string 
    }
}
",
324744e665f46a82492205626535ae0a59adced1,"public int countEvens(int[] nums)
{
    int count = 0;
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] % 2 == 0)
        {
            count++;
        }
    }
    return count;
}
",
56cccc5e57b71638ae0f36747e6ae090dc81fe2d,"public int sum67(int[] nums)
{
    int count = 0;
    int seven = 0;
    
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] == 6)
        {
           for (int x = i + 1; x < nums.length; x++)
           {
               if (nums[x] != 7)
               {
                   count = count + 0;
               }
               else if (nums[x] == 7)
               {
                   count = count + 0;
                   i = i + x;
               }
           }
        
        }
        else
        {
        count = count + nums[i];
        }
        // i'm stuck on excluding numbers up till 7.
        // okay, i'm trying to say:
        // when you reach a 6, ignore the 6.
        // then, ignore each number until you reach a 7.
        
        // so perhaps the smarter way to state this is:
        // ahhh maybe a separate int to count 7's?
        
        // i'm thinking in the way the problem is laid out for me, where
        // i'm supposed to ""ignore"" sections of numbers
        
        // maybe just fucking count them all and ignore the ones in between 6 and 7
        
       
        
    }
    
    return count;
}

",
4104adb19668d1e41a0c2b2850ca3d2b45e25648,"public int[] fix45(int[] nums)
{
    int n = 0;
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] == 4)
        {
            n++;
        }
    }
    int[] nums5 = new int[n];
    int n5 = 0;
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] == 5)
        {
            nums5[n5] = i;
            n5++;
        }
    }
    int count5 = 0
    for (ints i : nums)
    {
        if (i < nums.length - 1 && nums[i] == 4 && nums[i + 1] == 5)
        {
            // no change needed
        }
        else if (i < nums.length - 1 && nums[i] == 4)
        {
            nums[nums5[count5]] = nums[i + 1];
            nums[i + 1] = 5;
            count5++;
        }
    }
    return nums;
}",
58b7922bf9cf25f01ea79cd804874a9a36ad1d1e,"public boolean xyzThere(String str)
{
    for (int i; i < str.length(); i++)
    {
        if (charAt(i).equals(""x"") && charAt(i + 1).equals(""y"") &&
            charAt(i + 2).equals(""z"")
        {
            if (charAt(i - 1).equals("".""))
            {
                return false;
            }
            return true;
        }
    }
}
",
b1ffd079f8c4294a66e06ad7d2fb2a7a8fbe7344,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
f90f4209c0769229c85ac2c0392970d7920341e4,"public String alarmClock(int day, boolean vacation)
{
        alarmClock(0, true) -> ""off"";
        alarmClock(6, true) -> ""off""   
        alarmClock(1, true) -> ""10:00""
        alarmClock(2, true) -> ""10:00""
        alarmClock(3, true) -> ""10:00""
        alarmClock(4, true) -> ""10:00""
        alarmClock(5, true) -> ""10:00"" 
}
",
532a012b0ec202d27262b383dc13089aef7e1e3b,"public int dateFashion(int you, int date)
{
   if ((you >= 2 && date >= 2) && (you >= 8 || date >= 8))
       return 2;
   if ((you >= 2 && date >= 2) && !(you >= 8 || date >= 8))
       return 1;
   return 0;
}
",
c1fdbe3e9fca73de72f1831d00c35304cb29463e,"public int[] fizzArray(int n)
{
    int[] result = new int[n];
    for (int i = 0; i < n; i++)
    {
        result[i] = i;
    }
    return result;
}
",
407ce4a7f680e3d8d40e80b3c4b7bee5814fea86,"public int sum13(int[] nums)
{
    int sum = 0;
    for (int i = 0; i < nums.length; i++) {
        if (nums[i] != 13) {
            sum += nums[i];
        }
        else {
            i += 1;
        }
        return sum;
}
",
9ba9d8618a99bf06f7c45d5ee796bf2c7bcc2325,"public boolean twoTwo(int[] nums)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] == 2)
        {
            if (nums[i + 1] != 2)
            {
                return false;
            }
            i++;
        }
    }
    if (nums. length >= 2 && nums[nums.length - 2] != 2 && nums[nums.length - 1] == 2)
    {
        return false;
    }
    return true;
}
",
3a5b1294ef5b59964830e8cf8f6219db0c34b7d8,"public int blackjack(int a, int b)
{
    double remainA;
    remainA = (a % 21); //NOTE: The '%' yields the remainder!!!!
    double remainB;
    remainB =  (b % 21);
    
    // IF the remainder is large for one number, IT IS FAR AWAY from 21.
    if (a > 21 && b > 21)
    {
        return 0;
    }
    else if (a < 21 || b < 21)
    {
        if (a < 21 && b > 21)
        {
            return a;
        }
        else
        {
            return b;
        }
    }
    else
    {
        if (remainA > remainB)
        {
            return b;
        }
        else
        {
            return a;
        }
    }
}",
dbbe2c6beeefd93c68c1cf77a6130ed4323b9aa3,"public int countEvens(int[] nums)
{
    int count = 0;
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] % 2 == 0)
        {
            count++;
        }
    }
    return count;
}
",
b1734b84d9123cc28d3f62e758b480ab26ea8fb9,"public int sortaSum(int a, int b)
{
   int sum = a + b;
   if (sum >= 10 && sum <= 19)
   {
   		return 20; 
   }
   else
   {
   		return sum;
   }
}
",
CodeStateID,Code,
dfffcbe4f68182cb544f94125537be19361aefa9,"public int[] fix45(int[] nums)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] == 4)
            nums[i + 1] = 5;
    }
    return nums
}
",
83a239f0521cd38117ddbaaf228f8523a019cc40,"public boolean endOther(String a, String b)
{
    return a.toLowerCase().endsWith(b.toLowerCase()) || b.toLowerCase().endsWith(a.toLowerCase());
}
",
353250dbb0f7d8b1345775c3b7683b3a5c68b0d5,"public int makeChocolate(int small, int big, int goal)
{
    // small = 1 kilo each
    // big = 5 kilos each
    int numBig = 0;
    int numSmall = 0;
    numBig = goal / 5;
    numSmall = goal % 5;
    int sum = 5 * numBig + numSmall;
    
    if (numSmall > small)
    {
    	return -1;
    }
    else if (sum == goal)
    {
        return numSmall;
    }
    else
    {
        while (sum < goal && numSmall < small)
        {
            sum++;
            numSmall++;
        }
        
        if (goal == sum)
        {
            return numSmall;
        }
        else
        {
            return -1;
        }
            
    }
}
",
c329134243440bf2697e3b175b55c97ed2cb647d,"public int countCode(String str)
{
    int codeCount = 0;
    if (str.length() >= 4)
    {
    for (int i = 0; i < str.length()- 4; i++)
    {
        
    	if (str.substring(i, i+2).equals(""co"") && str.substring(i + 3, i+4).equals(""e""))
            {
                
             codeCount++;   
                
                
            }
        
    }  

        
            }
            
            return codeCount;
        
    }
                                                                                                            
                                                              
    
    
}
",
7ee540611323a35160a97c8f3d841b30ffcc0e49,"public int sum3(int[] nums)
{
    int sumOfArray = 0;
    for (int i : nums)
    {
        sumOfArray += i;
    }
    return sumOfArray;
}
",
b7d5d5590bde31e23ee41e67ec8ade069279409e,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    if (isBirthday) speed >= 5;
    if (speed <= 60) return 0;
    return (speed > 60 && speed <= 80) ? 1 : 2;
}
",
b02997d91fd09f8bee8d42b148052543fc339026,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    if (isBirthday)
    {
        speed = speed - 5;
    }
    
    if (speed <= 60)
    {
        return 0;
    }
}
",
11285264b3baf07c8ff3000362055856653bccff,"public int[] withoutTen(int[] nums)
{
    int[] array = new int[nums.length];
    
    for (int i = 0; i < array.length; i++)
    {
        array[i] = 0;
    }
    
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] != 10)
        {
            array[i] = nums[i];
        }
        else
        {
            // find the next # that isn't 10
            for (int j = i + 1; j < nums.length; j++)
            {
                if (nums[j] != 10)
                {
                 	array[i] = nums[j];
                    i = j; 
                    break;
                }      
            }
        }
    }
    
    return array;
    
}
",
3da6d13c5e129585a85f09cc153cb57358bb6316,"public String without2(String str) 
{
    if (str.length() >= 2)
    {
        if (str.substring(0,2).equals(str.substring(str.length() - 2)))
        {
            return str.substring(2);
            // if the two letters at the beginning of the word and at the end of the word are equal to each other, the string will returned with these two letters
        }
        else
        {
            return str;
            // if the two letters are not equal to each other, then the original string will be returned
        }
    }
    else
    {
        return str;
        //if the word is only two letters or less, it will return the original string 
    }
}
",
69e641533574f585ccebe26430c3b79103b5c593,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
    if (isAsleep)
    {
        return false;
    }
    else if (isMorning} 
    {
        if (isMom)
        {
            return true:
        }
        else
        {
            return false;
        }
    }
    else
    {
        return true;
    }
}
",
3716e52883778fd89a65151c2b55e28aaab539b2,"public int caughtSpeeding(int speed, boolean isBirthday)
{ if (speed <= 60)
{
    return 0;
}
if (speed >= 61 && speed <= 80)
{
    return 1;
}
if (isBirthday())
{
    return 2;
}
}
",
2d93e4072a980ef993907c9526395445c01a414f,"public boolean xyBalance(String str)
{
    boolean t=true;
    for (int i=0; i<str.length()-1; i++)
    {
        if (str.charAt=='y')
        {
            t=true;
        }
        if (str.charAt=='x' && !str.charAt=='y')
        {
            t=false;
        }
    }
    return t;
}
",
a2ef5d82ffeb0d2c874c95de31b9ca6d0e3da825,"public String repeatEnd(String str, int n)
{ 	
    String res=str.substring(str.length()-n);//n = 0 return null or exception?
    for(int i=1;i<n;i++)
    {		// String res?
            res=res+str.substring(str.length()-n);
    return res;
    }
}
",
dea353e4fa8946278ebcfad2f8039a9f72b55b28,"public int sum3(int[] nums)
{
 return nums[0] + nums[1] + nums[2];   
}
",
372645503350c2f98b54e8893d8beaf699d30377,"public int greenTicket(int a, int b, int c)
{
 if (a == b || b ==c )
 {
     return 20;
 }
    else if (a == b || a == c || b == c)
    {
        return 10;
        
    }
    else 
    {
        return 0;
    }
}
",
73ed1de85d5b22771d0d401395f97178f38186a0,"public int centeredAverage(int[] nums)
{
    int max = nums[0];
	int min = nums[0];
	int sum = nums[0];
	for (int i = 1; i < nums.length; i++)
	{
		sum += nums[i];
		if (nums[i] > max)
        {
			max = nums[i];
        }
		else if(nums[i] < min)
        {
			min = nums[i];
        }
	}
	return (sum - max - min) / (nums.length - 2)
}
",
e05151e763b22c6322f72dd9558578b0970a10d6,"public boolean canBalance(int[] nums)
{
    double sum = 0;
    for (int n : nums) {
        sum += n;
    }
    
    double target = sum / 2;
    sum = 0;
    
    for (int i : nums) {
        sum += i;
        if (sum == target) {
            return true;
        }
    }
    return false;
}
",
94c122a021a2cf0d8bce563a59aea25bbb53928a,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++) {
        if (val != nums[i] && val!= nums[i+1]) {
            return false;
        }
    }
    return true;
}
",
54f16f3c5196c9d23444381409e354f9fae465c0,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
0eefe10c954547a7675d5ee81f88d4d112cf44e9,"public boolean bobThere(String str)
{
    for (int i = 0; i < str.length() - 2; i++) {
        if (str.charAt(i) == 'b' && str.charAt(i + 2) == 'b') {
            return true;
        }
    }
    return false;
}
",
6a200d12723f9e254906a4c4d6061927e68dbe5d,"public int caughtSpeeding(int speed, boolean isBirthday)
{
	int value = 0; 
  
	if (isBirthday) {
    	speed += 5;
 	}
  	if ( speed <= 60 ) {
    	return 0;
  	}
  	if (speed >= 61 && speed <= 80) {
    	return 1;
  	}
  	if (speed >= 81) { 
    	return 2;
  	} 
  	return value;
}
",
a2ef5d82ffeb0d2c874c95de31b9ca6d0e3da825,"public String repeatEnd(String str, int n)
{ 	
    String res=str.substring(str.length()-n);//n = 0 return null or exception?
    for(int i=1;i<n;i++)
    {		// String res?
            res=res+str.substring(str.length()-n);
    return res;
    }
}
",
37483792e65efa307aab5d74a47b4a1dbe36e195,"public boolean bobThere(String str)
{
    //int firstB = str.indexOf(""b"");
   // int secondB = str.lastIndexOf(""b"");
    //if (secondB == firstB + 2)
    //    return true;
   // return false;
    for (int n == 0; n < str.length(); n++)
    {
        if ((str.charAt(n) == str.indexOf(""b"") && (str.charAt(n + 2) == str.indexOf(""b"", n))
        {
            return true;
        }
                
    }//end for loop
    return false;
}
",
d3bbd5372c67b93d7e4c5f3425ac793bb5763980,"public int sortaSum(int a, int b)
{
    int sum = a + b;
    if (sum >= 10 && sum <= 19)
        return 20;
    return sum;
}
",
9ba9d8618a99bf06f7c45d5ee796bf2c7bcc2325,"public boolean twoTwo(int[] nums)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] == 2)
        {
            if (nums[i + 1] != 2)
            {
                return false;
            }
            i++;
        }
    }
    if (nums. length >= 2 && nums[nums.length - 2] != 2 && nums[nums.length - 1] == 2)
    {
        return false;
    }
    return true;
}
",
ba64e188a7ff94c5ca147732e34becd1b2436677,"public String atFirst(String str)
{
    String result = str.substring(0, 2);
    
    return result;
}
",
b1ffd079f8c4294a66e06ad7d2fb2a7a8fbe7344,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
e73e062870f1d171b59cd904b257c0d67d7c10f8,"public int[] seriesUp(int n)
{
    int[] result = new int[n * (n + 1)/2];
    if (n == 0)
    {
        return result;
    }
    for	(int i = 1;i <= n; i++)
    {
        for (int a = 1; a <= i; a++)
        {
            result[i + a - 1] = a;
        }
    }
    return result;
}
",
a641c5efbb7e5f53f92580571992aa0a53d6cdf6,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
33e1684529896667b663d935101657bf9205ef10,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] != val && nums[i + 1] != val)
            return false;
    }
    return true;
}
",
3d4c98b74adf52d4ca5fe21febb24b1a8f6a6120,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++) {
        if (nums[i] != val && nums[i + 1] != val) {
            return false;
        }
    }
    return true;
}
",
d07d2f1b40602638d4c357809540b7e2870f1eb1,"public boolean cigarParty(int cigars, boolean isWeekend)
{
    if (isWeekend) 
        return cigar >=40;
    else 
        return cigar >= 40 && <= 60;
        
}
",
eee0eb76d7c982f7cdbbfb86dbf032940b49e38b,"public int luckySum(int a, int b, int c)
{
    if (a == 13) // if a is equal to 13
        return 0;
    if (b == 13) // if b is equal to 13 go to the a value
        return a;
    if (c == 13) //if c is 13, only add  and b
        return (a + b);
    return (a + b + c); //if none of the others,add all the numbers
}
",
dbbe2c6beeefd93c68c1cf77a6130ed4323b9aa3,"public int countEvens(int[] nums)
{
    int count = 0;
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] % 2 == 0)
        {
            count++;
        }
    }
    return count;
}
",
dc77d9f47e20012cfdff686d71cf058927245c62,"public int roundSum(int a, int b, int c)
    return round10(a) + round10(b) + round10(c));

public int round10(int num)
{
    int digit = num % 10;
	if (digit >= 5)
        return num = (10 - digit);
    return num - digit;
}
",
04d3dc5f15435b8116c064824aae98cef0971263,"public int sortaSum(int a, int b)
{
    private int sum
    sum = a + b;
    if (sum >= 10 && sum <= 19)
    {
     	return 20;   
    }
    else
    {
     	return sum;   
    }
}
",
ecef8ffff5f622c9ab6799c53c46541bd578254a,"public int sum67(int[] nums)
{
    int sum = 0;
    boolean ifSix = false;
    for (int i = 0; i < nums.length; i++)
    {
        if (ifSix)
        {
            if (nums[i] == 7)
                ifSix = false;
        }
        else if (nums[i] == 6)
        {
            ifSix = true;
        }
        //if ifSix is true, then it goes back into the for loop 
        //and the first if statement becomes true
        else
        {
            sum = sum + nums[i];
        }
        //takes the sum of the numbers when there is no linee of numbers starting
        //with a 6 and ending with a 7
    }
    return sum;
}
",
96649403e3463cc1c05171bea6b6b5e9d2710fe4,"public boolean isEverywhere(int[] nums, int val)
{
//    for (int i = 0; i < nums.length; i++)
//    {
  //   	if (nums[i] != val || nums[i++] != val)
    //    {
      //      return false;
        //}
    //}
    //return true;
    
    for (int i = 0; i <=nums.length-2;i++)

{

if ( nums[i] != val && nums[i+1] != val)

result = false;

}

  return result;

}
",
b1734b84d9123cc28d3f62e758b480ab26ea8fb9,"public int sortaSum(int a, int b)
{
   int sum = a + b;
   if (sum >= 10 && sum <= 19)
   {
   		return 20; 
   }
   else
   {
   		return sum;
   }
}
",
b03f6ee58d1c2efbc298c1b090d888a47d5425a9,"public boolean evenlySpaced(int a, int b, int c)
{
    if (b-a <= 1 && c-a >= 2 && c-b >= 2 
        || b-a >= 2 && c-a <= 1 && c-b >=2
        || b-a >=2 && c-a >= 2 && c-b <= 1)
        return true;
    return false;
}
",
21e89b678cc68f8c7a4233261dc10576fa87b0ae,"public int[] seriesUp(int n)
{
    int[] result = new int[n * (n + 1)/2];
    if (n == 0)
    {
        return result;
    }
    for	(int i = 1;i <= n; i++)
    {
        for (int a = 1; a <= i; a++)
        {
            result[i + a - 2] = a;
        }
    }
    return result;
}
",
07e5044ee85fdfbd00a05896e4320766869d1163,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
ecd2767c2649044a0da26903ef340674e89f1009,"public int[] fix45(int[] nums) {
  int[] result = nums;
  for(int i = 0; i < result.length; i++) {
      if(result[i] == 4 && i != result.length) {
          int index = findIndexOfValidFive(result);
           
          if(index != -1) {
              int temp = result[i + 1];
              result[i + 1] = result[index];
              result[index] = temp;
          }
      }
  }  
   
  return result;
}
 
public int findIndexOfValidFive(int[] nums) {
    for(int i = 0; i < nums.length; i++) {
        if((i == 0 && nums[i] == 5) || (nums[i] == 5 && nums[i - 1] != 4)) {
            return i;
        }
    }
     
    return -1;",
a43f9daaa9b5cc98acfe197b9157d9de345febf6,"public int[] frontPiece(int[] nums)
{
    for (int numbers: nums; int i = 0; i < 2; i++)
    {
        int number[i] = numbers;
    }
    return number;
}
",
0808dca8b4a525f8b42f6b75f66b3b1d93c3c6cc,"public int sum13(int[] nums)
{
    int sum = 0;
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] != 13 && nums[i - 1] != 13)
        {
            sum += nums[i];
        }
    }
    return sum;
}
",
3d4c98b74adf52d4ca5fe21febb24b1a8f6a6120,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++) {
        if (nums[i] != val && nums[i + 1] != val) {
            return false;
        }
    }
    return true;
}
",
b1ffd079f8c4294a66e06ad7d2fb2a7a8fbe7344,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
2b92c031167d3664a0be5ab4cee6d5ad678ce824,"public int sum67(int[] nums)
{
    int count = 0;
    int seven = 0;
    
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] == 6)
        {
           for (int x = i; x < nums.length; x++)
           {
               if (nums[x] != 7)
               {
                   count = count + 0;
               }
               else if (nums[x] == 7)
               {
                   count = count + 0;
                   i = i + x;
               }
           }
        
        }
        
        count = count + nums[i];
        // i'm stuck on excluding numbers up till 7.
        // okay, i'm trying to say:
        // when you reach a 6, ignore the 6.
        // then, ignore each number until you reach a 7.
        
        // so perhaps the smarter way to state this is:
        // ahhh maybe a separate int to count 7's?
        
        // i'm thinking in the way the problem is laid out for me, where
        // i'm supposed to ""ignore"" sections of numbers
        
        // maybe just fucking count them all and ignore the ones in between 6 and 7
        
       
        
    }
    
    return count;
}

",
56cccc5e57b71638ae0f36747e6ae090dc81fe2d,"public int sum67(int[] nums)
{
    int count = 0;
    int seven = 0;
    
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] == 6)
        {
           for (int x = i + 1; x < nums.length; x++)
           {
               if (nums[x] != 7)
               {
                   count = count + 0;
               }
               else if (nums[x] == 7)
               {
                   count = count + 0;
                   i = i + x;
               }
           }
        
        }
        else
        {
        count = count + nums[i];
        }
        // i'm stuck on excluding numbers up till 7.
        // okay, i'm trying to say:
        // when you reach a 6, ignore the 6.
        // then, ignore each number until you reach a 7.
        
        // so perhaps the smarter way to state this is:
        // ahhh maybe a separate int to count 7's?
        
        // i'm thinking in the way the problem is laid out for me, where
        // i'm supposed to ""ignore"" sections of numbers
        
        // maybe just fucking count them all and ignore the ones in between 6 and 7
        
       
        
    }
    
    return count;
}

",
f3f8a46c06347f005fc0c551e63762d27fb11704,"public boolean has77(int[] nums)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] == 7 && nums[i + 1] == 7)
        {
            return true;
        }
    }
    for (int i = 0; i < nums.length - 2; i++)
    {
        if (nums[i] == 7 && nums[i + 2] == 7)
        {
            return true;
        }
    }
}
",
324744e665f46a82492205626535ae0a59adced1,"public int countEvens(int[] nums)
{
    int count = 0;
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] % 2 == 0)
        {
            count++;
        }
    }
    return count;
}
",
ec03a0ab16a221fcf9292fec81dde347af81b619,"public String repeatEnd(String str, int n)
{
StringBuffer result = new StringBuffer();
String end = str.substring(str.length() - n);

for(int i = 0; i < n; i++)
result.append(end);

return result.toString(
}
",
739598df6f10e1b41997fbbce33f2e2bf0fd995e,"public boolean has77(int[] nums)
{
    int x = nums.length;
    for (int i = 0; i < x; i++)
    {
        if (i < x - 1 && nums.[i] == 7 && nums.[i + 1] == 7)
        {
            return true;
        }
        if (i < x - 2 && nums.[i] == 7 && nums.[i + 2] == 7)
        {
            return true;
        }
    }
    return false;
}
",
eb9d1e97323f6c0c1410dd8ae35aa261280fc389,"public boolean endOther(String a, String b)
{
    a = a.toLowerCase();
    b = a.toLowerCase();
    return(a.endsWith(b) || b.endsWith(a));
    
    
}
",
94c122a021a2cf0d8bce563a59aea25bbb53928a,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++) {
        if (val != nums[i] && val!= nums[i+1]) {
            return false;
        }
    }
    return true;
}
",
c1fdbe3e9fca73de72f1831d00c35304cb29463e,"public int[] fizzArray(int n)
{
    int[] result = new int[n];
    for (int i = 0; i < n; i++)
    {
        result[i] = i;
    }
    return result;
}
",
a641c5efbb7e5f53f92580571992aa0a53d6cdf6,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
c9864807562ce05a0e1872a9d5d2eae382cb6654,"public boolean canBalance(int[] nums)
{
    boolean result = false;
        int nums1 = 0;
    	int nums2 = 0;
        for (int i = 0; i < nums.length / 2; i++)
        {
            nums1 += nums[i];
        }
        
        for (int j = (nums.length / 2 ) + 1; j < nums.length; j++)
        {
            nums2 += nums[j];
        }
        
        if (nums1 == nums2)
        {
            result = true;
        }
    return result;
}
",
c4cd9fb76f3a67d4e774521d2a07bd1fe7cd0b11,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
0808dca8b4a525f8b42f6b75f66b3b1d93c3c6cc,"public int sum13(int[] nums)
{
    int sum = 0;
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] != 13 && nums[i - 1] != 13)
        {
            sum += nums[i];
        }
    }
    return sum;
}
",
bc411f1d4fdc4db77fce57a6a849ec3ecc76f9f9,"public boolean isEverywhere(int[] nums, int val)
{
    boolean result = true
    for (int i; i < nums.length; i++)
    {
        if (nums[i] == val)
        {
            return result;
        }
        else if (nums[i+1] == val)
        {
            return result;
        }
        else
        {
            result = false;
        }
    }
    return result;
}
",
59a0088f887207b9450033d0bec152a0c9e18bab,"public int[] shiftLeft(int[] nums)
{
    int[] result = new int[nums.length]; 
    result[nums.length - 1] = nums[0]; 
    int j = 0; 
    for (int i = 1; i < nums.length - 1; i++)
    {
        result[j] = nums[i];
        j++; 
    }
    
    return result; 
}
",
4969ff57664d96172e1d837e2441b526164e9da1,"public int greenTicket(int a, int b, int c)
{
    if (a != b && b != c && a != c)
    {
        return 0;
    }
    else if (a == b && b == c)
    {
        return 20;
    }
    else
    {
        return 10;
    }
}
",
e9a643c862a4712528df227bd0c86412692f6215,"public String zipZap(String str)
{
	String result = """";

	for (int i = 0; i < str.length() - 2; i++)
    {
		if (i == 0 || i % 3 == 0) 
        {
			result += str.substring(i + 1, i + 3);
			result += str.charAt(i);
		}
	}
return result;
}
",
62ce70304358abfdd932378fb6cd7769b980fdc9,"public int noTeenSum(int a, int b, int c)
{
	return fixTeen(a) + fixTeen(b) + fixTeen(c);
}

public int fixTeen(int n)
{
    if (13 <= n && n <= 19)
    {
        if (n != 15 || n != 16)
        {
            n = 0;
        }
        return n;
    }
}
",
51cd81eddc2c0304f6f4b44ade4bf6e3c8a6aff8,"public String alarmClock(int day, boolean vacation)
{
    if (day >=1 && day <= 5)
    {
        return vacation ? ""10:00"" : ""7:00"";
    }
    
    else
    {
        return vacation ? ""off"" : ""10:00""
    }

    
}
",
9050b974ad390bfb7881add0a55419bac94d1aff,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 1; i < nums.length - 1; i++)
    {
    	if (nums[i -1] == val || nums[i + 1] == val)
        {
        	return true;
        }
    }
}
",
a43f9daaa9b5cc98acfe197b9157d9de345febf6,"public int[] frontPiece(int[] nums)
{
    for (int numbers: nums; int i = 0; i < 2; i++)
    {
        int number[i] = numbers;
    }
    return number;
}
",
715aa81924a59b597d7a7341eacca1e319779951,"public boolean xyzThere(String str)
{
    for(int i = 0; i < str.length() - 3; i++)
    {
        if (str.substring(i, i + 3).equals(""xyz"")) //&& !str.charAt(i-1).equals('.'))
        {
            return true;
        }
    }
}
",
92e2c7db539611643d15e879f2157e4a51220854,"public boolean xyBalance(String str)
{
    if (str.contains('x'))
    {
        return str.charAt();
    }
}
",
a3cfe4acc0878f7a98ccbc168df9dff28266dbd7,"public int[] frontPiece(int[] nums)
{
    int [] grid = new int[2];
    
    // establish logi for checking nums.
    // add the proper elements of nums into a new array 
    if (nums.length == 1)
    {
        return grid[0] = nums[0];
    }
    else if (nums.length == 0)
    {
        return grid;
    }
    else
    {
        return grid[nums[0], nums[1]];
    }
}
",
56ac97e6ac311645870c594b750311820db92f19,"public int noTeenSum(int a, int b, int c)
{
    return fixTeen(a) + fixTeen(b) + fixTeen(c);
}

public int fixTeen(int n)
{
    if (n >= 13 && n <= 19 && n != 15 && n != 16)
    {
        n = 0;
}
",
324744e665f46a82492205626535ae0a59adced1,"public int countEvens(int[] nums)
{
    int count = 0;
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] % 2 == 0)
        {
            count++;
        }
    }
    return count;
}
",
e449000228690301ed3d3de32e7ccd3ba51bef53,"public String alarmClock(int day, boolean vacation)
{
    if (vacation)
    {
        if (day >= 1 && day <= 5)
        {
            return alarmClock;
        }
    }
}
",
33e1684529896667b663d935101657bf9205ef10,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] != val && nums[i + 1] != val)
            return false;
    }
    return true;
}
",
8ce774ddf43260b9faa39499c3a67d91f71fc099,"public boolean squirrelPlay(int temp, boolean isSummer)
{
    { if (!isSummer && temp >= 60 && <= 90)
    {
        return true;
    }}
}
",
b6c8be2f5f7309923ebb19a0553979d7cc50dce9,"public String zipZap(String str)
{
    for (int i = 0; i < str.length() - 2; i++) 
    {
    if (str.charAt(i) == 'z' && str.charAt(i + 2) == 'p')
    {
        str.replace(str.substring(i + 1), """");
    }
    }
    return str;
}
",
4465ac2e7e70f3ac5ddbd490bd262cc0c4f6249d,"public int[] frontPiece(int[] nums)
{
    int [] grid = new int[2];
    
    // establish logi for checking nums.
    // add the proper elements of nums into a new array 
    if (nums.length == 1)
    {
        return grid[0] = nums[0];
    }
    else if (nums.length == 0)
    {
        return grid;
    }
    else
    {
        grid[0] = nums[0];
        grid[1] = nums[1];
        return grid[];
    }
}
",
f1f0a6448bfe3ad005796a40633fc50d6ffa6023,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
4a9806e5d979032eadab4c8d23dec29284441f09,"public int greenTicket(int a, int b, int c)
{	
   	int result = 10;
    if (a != b && b != c && a != c)
    {    
        result = 0;
    }
    else if (a == b && b == c)
    {
        result = 20;
    }
    return result;
}
",
