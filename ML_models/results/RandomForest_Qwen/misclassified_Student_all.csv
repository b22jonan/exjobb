ID,Code,Prompt
dea353e4fa8946278ebcfad2f8039a9f72b55b28,"public int sum3(int[] nums)
{
 return nums[0] + nums[1] + nums[2];   
}
",
6b9f55c88028fdb9f9e0adbb7f59b28fb9564c5a,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] != val)
        {
            if (i < nums.length - 1)
            {
                if (nums[i + 1] != val)
                {
                    return false;
                }
            }
        }
        
    }
    return true;
}
",
9e81d1a2a7638c14b721846f5090b36ad07ab308,"public int[] seriesUp(int n)
{
    int[] result = new int[(n * (n + 1)) / 2];
    int count = 1;
    int index = 0;
    for (int i = 0; i < result.length; i++)
    {
        for (int j = 0; j < count; j++)
        {
            result[index] = j;
        	index++;
        }
        count++;
    }
}
",
739598df6f10e1b41997fbbce33f2e2bf0fd995e,"public boolean has77(int[] nums)
{
    int x = nums.length;
    for (int i = 0; i < x; i++)
    {
        if (i < x - 1 && nums.[i] == 7 && nums.[i + 1] == 7)
        {
            return true;
        }
        if (i < x - 2 && nums.[i] == 7 && nums.[i + 2] == 7)
        {
            return true;
        }
    }
    return false;
}
",
c1fdbe3e9fca73de72f1831d00c35304cb29463e,"public int[] fizzArray(int n)
{
    int[] result = new int[n];
    for (int i = 0; i < n; i++)
    {
        result[i] = i;
    }
    return result;
}
",
a3cfe4acc0878f7a98ccbc168df9dff28266dbd7,"public int[] frontPiece(int[] nums)
{
    int [] grid = new int[2];
    
    // establish logi for checking nums.
    // add the proper elements of nums into a new array 
    if (nums.length == 1)
    {
        return grid[0] = nums[0];
    }
    else if (nums.length == 0)
    {
        return grid;
    }
    else
    {
        return grid[nums[0], nums[1]];
    }
}
",
c6e135a8d819808a2e86f6eb184fd9701ef4cea6,"public int[] withoutTen(int[] nums)
{
    //creates new array
    int[] newArray = new int[nums.length];
	int j = 0;
	for(int i = 0; i < nums.length; i++)
	{
		if(nums[i] != 10)
		{
			newArray[j] = nums[i];
			j++;
		}
	}
	// returns the new array
	return newArray;
}
",
7862665265faf85e50ada49c030c401c79b4301c,"public boolean sameEnds(int[] nums, int n)
{
    for (int i = 0; i < n; i++)
    {
        if (nums[i] != nums[nums.length - (n - i)])
        {
            return false;
        }
    }
    
    return true;
}
",
b1734b84d9123cc28d3f62e758b480ab26ea8fb9,"public int sortaSum(int a, int b)
{
   int sum = a + b;
   if (sum >= 10 && sum <= 19)
   {
   		return 20; 
   }
   else
   {
   		return sum;
   }
}
",
8f6dbd26c957f489904930b7ed0aa2950cd254af,"public String repeatEnd(String str, int n)
{
    String repeat = str.substring(str.length() - n);
    for (int i = 1; i < n; i++)
        //starts with the first letter of the string
    {
        repeat = repeat + str.substring(str.length() - n);
        //gets the part of the word that needs to be returned
    }
    return repeat;
    //returns the string made out of the n repetitions
}
",
eee0eb76d7c982f7cdbbfb86dbf032940b49e38b,"public int luckySum(int a, int b, int c)
{
    if (a == 13) // if a is equal to 13
        return 0;
    if (b == 13) // if b is equal to 13 go to the a value
        return a;
    if (c == 13) //if c is 13, only add  and b
        return (a + b);
    return (a + b + c); //if none of the others,add all the numbers
}
",
67e32e60ccf94c9e237b1ee60eec88d54337ee46,"public int noTeenSum(int a, int b, int c)
{
	return fixTeen(a) + fixTeen(b) + fixTeen(c);
}

public int fixTeen(int n)
{
    if (( n > 12 && n < 15) ||( n > 16 && n < 20 )) {
     return 0;
   }
   return n;
}
",
3d43326dee371edda05d72f06584270628b5ceac,"public int dateFashion(int you, int date)
{
    if(you <= 2 || date <= 2)
		return 0;
	if(you >= 8 || date >= 8)
		return 2;
	return 1;
}
",
f8a88d04552686ba064b8db06f097f9921d6b1eb,"public boolean in1To10(int n, boolean outsideMode)
{
    if (outsideMode)
		return (n <= 1 || n >= 10);
	else
    return (n >= 1 && n <= 10);
}
",
eb9d1e97323f6c0c1410dd8ae35aa261280fc389,"public boolean endOther(String a, String b)
{
    a = a.toLowerCase();
    b = a.toLowerCase();
    return(a.endsWith(b) || b.endsWith(a));
    
    
}
",
3d4c98b74adf52d4ca5fe21febb24b1a8f6a6120,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++) {
        if (nums[i] != val && nums[i + 1] != val) {
            return false;
        }
    }
    return true;
}
",
3716e52883778fd89a65151c2b55e28aaab539b2,"public int caughtSpeeding(int speed, boolean isBirthday)
{ if (speed <= 60)
{
    return 0;
}
if (speed >= 61 && speed <= 80)
{
    return 1;
}
if (isBirthday())
{
    return 2;
}
}
",
d3bbd5372c67b93d7e4c5f3425ac793bb5763980,"public int sortaSum(int a, int b)
{
    int sum = a + b;
    if (sum >= 10 && sum <= 19)
        return 20;
    return sum;
}
",
f5f288de072cdea03fa5b7f5f63fef9bb6c804a6,"public int dateFashion(int you, int date)
{
    if(you <= 2 || date <= 2)
		return 0;
	if(you >= 8 || date >= 8)
		return 2;
	return 1;
}
",
c3f23ac2ec5c833dc9221dad8b3933a5ab317603,"public boolean cigarParty(int cigars, boolean isWeekend)
{
    if (isWeekend)
        return (cigars >= 40);
    return (cigars >= 40 && cigars <= 60);
    
          
}
",
f8a88d04552686ba064b8db06f097f9921d6b1eb,"public boolean in1To10(int n, boolean outsideMode)
{
    if (outsideMode)
		return (n <= 1 || n >= 10);
	else
    return (n >= 1 && n <= 10);
}
",
a641c5efbb7e5f53f92580571992aa0a53d6cdf6,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
ecd2767c2649044a0da26903ef340674e89f1009,"public int[] fix45(int[] nums) {
  int[] result = nums;
  for(int i = 0; i < result.length; i++) {
      if(result[i] == 4 && i != result.length) {
          int index = findIndexOfValidFive(result);
           
          if(index != -1) {
              int temp = result[i + 1];
              result[i + 1] = result[index];
              result[index] = temp;
          }
      }
  }  
   
  return result;
}
 
public int findIndexOfValidFive(int[] nums) {
    for(int i = 0; i < nums.length; i++) {
        if((i == 0 && nums[i] == 5) || (nums[i] == 5 && nums[i - 1] != 4)) {
            return i;
        }
    }
     
    return -1;",
83a239f0521cd38117ddbaaf228f8523a019cc40,"public boolean endOther(String a, String b)
{
    return a.toLowerCase().endsWith(b.toLowerCase()) || b.toLowerCase().endsWith(a.toLowerCase());
}
",
db19ea5f1cabdb8d39c12a6acfc593bd85bf4f95,"public int[] tenRun(int[] nums)
{
    for (int i = 0; i < nums.length; i++)
    {
    	if (nums[i] % 10 == 0)
    	{
     	   for (int j = i + 1; j < nums.length && nums[j] % 10 != 0; j++)
           {
            	nums[j] = nums[i];   
           }
    	}
    }
    return nums;
}
",
afec4a1fda7760651e34095e9ceef8a8483018be,"public boolean sameEnds(int[] nums, int n)
{
    
    for (int i = 0; i <= n; i++)
    {
        if (nums[i] != nums[nums.length - n + i - 1])
        {
            return false;
        }
    }
    return true;
}
",
f0c481a9e07c60bea12e78a5079713f14b24c2a9,"public int blackjack(int a, int b)
{
    if(b > 21 && a < 21)
        return a;
    if(a>21 && b < 21)
        return b;
    if(a > b)
        return a;
    if (b > a)
        return a;
    return 0;
}
",
6ccaf37a8d9757fc57014287316ecd9409820fe7,"public int sortaSum(int a, int b)
{
    int sum = a + b;
    
    if (sum >= 10 || sum <= 19)
        return 20;
    else
        return sum;
    
}
",
c4cd9fb76f3a67d4e774521d2a07bd1fe7cd0b11,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
0eefe10c954547a7675d5ee81f88d4d112cf44e9,"public boolean bobThere(String str)
{
    for (int i = 0; i < str.length() - 2; i++) {
        if (str.charAt(i) == 'b' && str.charAt(i + 2) == 'b') {
            return true;
        }
    }
    return false;
}
",
56cccc5e57b71638ae0f36747e6ae090dc81fe2d,"public int sum67(int[] nums)
{
    int count = 0;
    int seven = 0;
    
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] == 6)
        {
           for (int x = i + 1; x < nums.length; x++)
           {
               if (nums[x] != 7)
               {
                   count = count + 0;
               }
               else if (nums[x] == 7)
               {
                   count = count + 0;
                   i = i + x;
               }
           }
        
        }
        else
        {
        count = count + nums[i];
        }
        // i'm stuck on excluding numbers up till 7.
        // okay, i'm trying to say:
        // when you reach a 6, ignore the 6.
        // then, ignore each number until you reach a 7.
        
        // so perhaps the smarter way to state this is:
        // ahhh maybe a separate int to count 7's?
        
        // i'm thinking in the way the problem is laid out for me, where
        // i'm supposed to ""ignore"" sections of numbers
        
        // maybe just fucking count them all and ignore the ones in between 6 and 7
        
       
        
    }
    
    return count;
}

",
8a784cb08df86d4814219f2b557c5cfa0f28180c,"public boolean cigarParty(int cigars, boolean isWeekend)
{
    if (isWeekend)
    {
        return (cigars >= 40);
    else
    {
        return (cigars >= 40 && cigars <= 60);
    }
}
",
5774f2b700d8dfc9f30cd922b782e6b4d38d8924,"public boolean in1To10(int n, boolean outsideMode)
{
    if (outsideMode)
    {
        return (n <= 1 || n >= 10);
    }
    
    return (n >= 1 && n <= 10);
}
",
07e5044ee85fdfbd00a05896e4320766869d1163,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
4465ac2e7e70f3ac5ddbd490bd262cc0c4f6249d,"public int[] frontPiece(int[] nums)
{
    int [] grid = new int[2];
    
    // establish logi for checking nums.
    // add the proper elements of nums into a new array 
    if (nums.length == 1)
    {
        return grid[0] = nums[0];
    }
    else if (nums.length == 0)
    {
        return grid;
    }
    else
    {
        grid[0] = nums[0];
        grid[1] = nums[1];
        return grid[];
    }
}
",
afec4a1fda7760651e34095e9ceef8a8483018be,"public boolean sameEnds(int[] nums, int n)
{
    
    for (int i = 0; i <= n; i++)
    {
        if (nums[i] != nums[nums.length - n + i - 1])
        {
            return false;
        }
    }
    return true;
}
",
f1f0a6448bfe3ad005796a40633fc50d6ffa6023,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
45bb0c43390b2898deab9a359cdda85e43e43e39,"public int[] shiftLeft(int[] nums)
{
    int[] result = new int[nums.length];
    for (int i = 0; i< nums.length - 1; i++)
    {
		result[i] = nums[i+1];
    }
    result[nums.length - 1] = nums[0];
    
    return result;
}
",
2ab613317018e535c7c370e1bf3fb0d86c7a9f9b,"public int[] tenRun(int[] nums)
{
    int[] result = new int[nums.length];
    int input;
    int value = -1;
    
    for (int i = 0; i < nums.length; i++)
    {
        input = nums[i];
        
        if (input % 10 == 0 && input > value)
        {
            value = input;
        }
        
        if (value == -1)
        {
            result[i] = input;
        }
        else
        {
            result[i] = value;
        }
    }
    
    return result;
}
",
b7d5d5590bde31e23ee41e67ec8ade069279409e,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    if (isBirthday) speed >= 5;
    if (speed <= 60) return 0;
    return (speed > 60 && speed <= 80) ? 1 : 2;
}
",
93d04bbaaacbdc2e43e79af8101e3443d99f3216,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
9c1b24f0268b9d5238feaf59114da5d3b827e88f,"public boolean bobThere(String str)
{
    for (int i = 0; i < str.length() - 2; i++) 
    {
    if (str.charAt(i) == 'b' && str.charAt(i + 2) == 'b')
    {
        return true;
    }
    }
    return false;
}
",
14ced47f38f6da0c3afcc08c0bcb9ed96b5c73fe,"public String getSandwich(String str)
{
    if (str.indexOf(""bread"") > 0) // if there are two peices of bread
    {
         System.out.print(str.indexOf(""bread""));
        return ""no"";
    }
    else
    {
        return """";
    }
}
",
3716e52883778fd89a65151c2b55e28aaab539b2,"public int caughtSpeeding(int speed, boolean isBirthday)
{ if (speed <= 60)
{
    return 0;
}
if (speed >= 61 && speed <= 80)
{
    return 1;
}
if (isBirthday())
{
    return 2;
}
}
",
f8a88d04552686ba064b8db06f097f9921d6b1eb,"public boolean in1To10(int n, boolean outsideMode)
{
    if (outsideMode)
		return (n <= 1 || n >= 10);
	else
    return (n >= 1 && n <= 10);
}
",
ec03a0ab16a221fcf9292fec81dde347af81b619,"public String repeatEnd(String str, int n)
{
StringBuffer result = new StringBuffer();
String end = str.substring(str.length() - n);

for(int i = 0; i < n; i++)
result.append(end);

return result.toString(
}
",
0e68a96660515e0852bbeffb5ec3b3954d4b1625,"public int[] seriesUp(int n)
{
     int[] result = new int[n * (n + 1) / 2];
 	 int initial = 0;
 	 for (int j = 1; j <= n; j++)
     {
    	for (int k = 1; k <= j; k++)
        {
      		result[initial ++] = k;
        }
     }
  return result;

}
",
cdf42d5c2d560cf867cc0f628e892b8731b4a6c5,"public boolean twoTwo(int[] nums)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] == 2 && nums[i+1] == 2)
        {
            return true;
        }
    }
    return false;;
}
",
CodeStateID,Code,
e05151e763b22c6322f72dd9558578b0970a10d6,"public boolean canBalance(int[] nums)
{
    double sum = 0;
    for (int n : nums) {
        sum += n;
    }
    
    double target = sum / 2;
    sum = 0;
    
    for (int i : nums) {
        sum += i;
        if (sum == target) {
            return true;
        }
    }
    return false;
}
",
ec0734122f4add509acf5c24dba4d8ba253e0c85,"public int roundSum(int a, int b, int c)
{
    a = this.round10(a);
    b = this.round10(b);
    c = this.round10(c);
    
    int sum = a + b + c;
    
    return sum;
}

public int round10(int num)
{
    int remainder = num % 10;
    
    if (remainder >= 5)
    {
        // round up
        num = num + (10 - remainder);
    }
    else
    {
        // round down
        num = num - remainder;
    }
    
    return num;
}
",
100f26d18ee4e0e1619542ed10f1e83b537d6b04,"public int sum3(int[] nums)
{
    sum = sum3[0];
    sum+=sum3[1];
    sum+=sum3[2];
    return sum;
}
",
9df1cbdbe2059e87bcede6e1d1033ffff3e609ed,"public int[] withoutTen(int[] nums)
{
  	int[] result = new int[nums.length];
  	int count = 0;
  	
    for (int i = 0; i < nums.length; i++)
    {
     	if (nums[i] != 10)
        {
         	result[count] = nums[i];
            count++;
        }
    }
    for (int i = 0; i < count; i++)
    {
     	result[result.length - i] = 0;
    }
    
    return result;
}
",
948b5b2528e52a0cd157a7b353521353f3da1fef,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
     return (isMom || (!(isAsleep)));

}
",
c3f23ac2ec5c833dc9221dad8b3933a5ab317603,"public boolean cigarParty(int cigars, boolean isWeekend)
{
    if (isWeekend)
        return (cigars >= 40);
    return (cigars >= 40 && cigars <= 60);
    
          
}
",
a25d96e68f85135afbfbaadb5ab9a2778d293053,"public int blackjack(int a, int b)
{
    if (a > 21 && b > 21)
        return 0;
    if(a < b && b <= 21)
		return b;
	return a;
}
",
5774f2b700d8dfc9f30cd922b782e6b4d38d8924,"public boolean in1To10(int n, boolean outsideMode)
{
    if (outsideMode)
    {
        return (n <= 1 || n >= 10);
    }
    
    return (n >= 1 && n <= 10);
}
",
d3bbd5372c67b93d7e4c5f3425ac793bb5763980,"public int sortaSum(int a, int b)
{
    int sum = a + b;
    if (sum >= 10 && sum <= 19)
        return 20;
    return sum;
}
",
708073e053068889622d8588b7bec2ceea644404,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
07e5044ee85fdfbd00a05896e4320766869d1163,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
98b41121a7f0c87d5746dc0ae2746596c4a8bb37,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
54f16f3c5196c9d23444381409e354f9fae465c0,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
ecef8ffff5f622c9ab6799c53c46541bd578254a,"public int sum67(int[] nums)
{
    int sum = 0;
    boolean ifSix = false;
    for (int i = 0; i < nums.length; i++)
    {
        if (ifSix)
        {
            if (nums[i] == 7)
                ifSix = false;
        }
        else if (nums[i] == 6)
        {
            ifSix = true;
        }
        //if ifSix is true, then it goes back into the for loop 
        //and the first if statement becomes true
        else
        {
            sum = sum + nums[i];
        }
        //takes the sum of the numbers when there is no linee of numbers starting
        //with a 6 and ending with a 7
    }
    return sum;
}
",
e1377201338b35fe171b9444b54cc7c825b47de7,"public int greenTicket(int a, int b, int c)
{
    if (a == b && b == c) //if two numbers are the same
        return 20;
    if (a == b || a == c || b == c) //if all the numbers are the same
        return 10;
    else //none of the numbers are the same
        return 0;
}
",
f8a88d04552686ba064b8db06f097f9921d6b1eb,"public boolean in1To10(int n, boolean outsideMode)
{
    if (outsideMode)
		return (n <= 1 || n >= 10);
	else
    return (n >= 1 && n <= 10);
}
",
c32e8df18759f85c9ca9cc1ff3051aa396bf5a33,"public boolean evenlySpaced(int a, int b, int c)
{
    int[3] arrInOrder;
    arrInOrder[0] = a;
    arrInOrder[1] = b;
    arrInOrder[2] = c;
    
    int small;
    int med, big;
   /**
    if ((a > b) && (a > c)) // if a is the biggest
   {
		if (b > c)
        {
            big = a;
            med = b;
            small = c;
        }
       else
       {
           
       }
       
   }
   */
}
",
a3cfe4acc0878f7a98ccbc168df9dff28266dbd7,"public int[] frontPiece(int[] nums)
{
    int [] grid = new int[2];
    
    // establish logi for checking nums.
    // add the proper elements of nums into a new array 
    if (nums.length == 1)
    {
        return grid[0] = nums[0];
    }
    else if (nums.length == 0)
    {
        return grid;
    }
    else
    {
        return grid[nums[0], nums[1]];
    }
}
",
eb9d1e97323f6c0c1410dd8ae35aa261280fc389,"public boolean endOther(String a, String b)
{
    a = a.toLowerCase();
    b = a.toLowerCase();
    return(a.endsWith(b) || b.endsWith(a));
    
    
}
",
ec0734122f4add509acf5c24dba4d8ba253e0c85,"public int roundSum(int a, int b, int c)
{
    a = this.round10(a);
    b = this.round10(b);
    c = this.round10(c);
    
    int sum = a + b + c;
    
    return sum;
}

public int round10(int num)
{
    int remainder = num % 10;
    
    if (remainder >= 5)
    {
        // round up
        num = num + (10 - remainder);
    }
    else
    {
        // round down
        num = num - remainder;
    }
    
    return num;
}
",
c6e135a8d819808a2e86f6eb184fd9701ef4cea6,"public int[] withoutTen(int[] nums)
{
    //creates new array
    int[] newArray = new int[nums.length];
	int j = 0;
	for(int i = 0; i < nums.length; i++)
	{
		if(nums[i] != 10)
		{
			newArray[j] = nums[i];
			j++;
		}
	}
	// returns the new array
	return newArray;
}
",
3da6d13c5e129585a85f09cc153cb57358bb6316,"public String without2(String str) 
{
    if (str.length() >= 2)
    {
        if (str.substring(0,2).equals(str.substring(str.length() - 2)))
        {
            return str.substring(2);
            // if the two letters at the beginning of the word and at the end of the word are equal to each other, the string will returned with these two letters
        }
        else
        {
            return str;
            // if the two letters are not equal to each other, then the original string will be returned
        }
    }
    else
    {
        return str;
        //if the word is only two letters or less, it will return the original string 
    }
}
",
98b41121a7f0c87d5746dc0ae2746596c4a8bb37,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
a730369051672c668c3efc03eb8dcc6956e9beb3,"public int[] withoutTen(int[] nums)
{
    int[] arr = new int[nums.length];
	int p = 0;
	for(int i = 0; i < nums.length; i++)
	{
		if(nums[i] != 10)
		{
			arr[p] = nums[i];
			p++;
		}
	}
	// Java arrays are initialized to 0 so no need to set the last elements to 0
	return arr;
}
",
8a4197cd94d2fc278a10045f02c9323393eb70ad,"public boolean sameEnds(int[] nums, int n)
{
    for (int i = 0; i < n; i++)
    {
        if (nums[i] != nums[nums.length - n + i])
            return false;
    }
    return true;
}
",
6f326caf302bdfdbefc02faf1dc435ba9d9f04d6,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if ((nums[i] != val) && (nums[i + 1] != val))
        {
            return false;
        }          
        
    }
     return true;
}
",
c32e8df18759f85c9ca9cc1ff3051aa396bf5a33,"public boolean evenlySpaced(int a, int b, int c)
{
    int[3] arrInOrder;
    arrInOrder[0] = a;
    arrInOrder[1] = b;
    arrInOrder[2] = c;
    
    int small;
    int med, big;
   /**
    if ((a > b) && (a > c)) // if a is the biggest
   {
		if (b > c)
        {
            big = a;
            med = b;
            small = c;
        }
       else
       {
           
       }
       
   }
   */
}
",
f720cc450f616d826f746ce4609c79ab1860b68a,"public int[] fizzArray(int n)
{
    int[] result = new int[n];
        for (int i = 0; i<n.length;i++)
        {
            result[i-1] = i;
        }
    return result;
}
",
44401b7a795caa5e1f94585e15dc8c88bdb84119,"public boolean isEverywhere(int[] nums, int val)
{	
    for (int i = 0; i < nums.length - 1; i++)
    {
        if ( nums[i] != val && nums[i+1] != val)
        {
            return false;
        }
    }
    return true;
}
",
faa6cc44696d72e0fa85cc561584a1de159a4aa5,"public int dateFashion(int you, int date)
{
    if (you <= 2 || date <= 2)
        return 0;
    if (you >= 8 || date >= 8)
        return 2;
    return 1;
}
",
cfc6cb87b23f11a2f4bbbf92a708643e8012b8fb,"public int countEvens(int[] nums)
{	
    int count = 0;
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] % 2 == 0))
        {
            count++;
        }
    }
    return count;
}
",
c4cd9fb76f3a67d4e774521d2a07bd1fe7cd0b11,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
b7d5d5590bde31e23ee41e67ec8ade069279409e,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    if (isBirthday) speed >= 5;
    if (speed <= 60) return 0;
    return (speed > 60 && speed <= 80) ? 1 : 2;
}
",
b05268e4079f92fa8c479a385b128576976d16c9,"public String atFirst(String str)
{
    String result = str.substring(0, 2);
    
    String value = '@';
    
    if (result.length() == 0)
    {
        result.charAt(0) = '@';
        result(1) = '@';
    }
    else if (result.length() == 1)
    {
        result(1) = '@';
    }
    else
    {
        result = result;
    }
    
    return result;
}
",
0eefe10c954547a7675d5ee81f88d4d112cf44e9,"public boolean bobThere(String str)
{
    for (int i = 0; i < str.length() - 2; i++) {
        if (str.charAt(i) == 'b' && str.charAt(i + 2) == 'b') {
            return true;
        }
    }
    return false;
}
",
83a239f0521cd38117ddbaaf228f8523a019cc40,"public boolean endOther(String a, String b)
{
    return a.toLowerCase().endsWith(b.toLowerCase()) || b.toLowerCase().endsWith(a.toLowerCase());
}
",
2b92c031167d3664a0be5ab4cee6d5ad678ce824,"public int sum67(int[] nums)
{
    int count = 0;
    int seven = 0;
    
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] == 6)
        {
           for (int x = i; x < nums.length; x++)
           {
               if (nums[x] != 7)
               {
                   count = count + 0;
               }
               else if (nums[x] == 7)
               {
                   count = count + 0;
                   i = i + x;
               }
           }
        
        }
        
        count = count + nums[i];
        // i'm stuck on excluding numbers up till 7.
        // okay, i'm trying to say:
        // when you reach a 6, ignore the 6.
        // then, ignore each number until you reach a 7.
        
        // so perhaps the smarter way to state this is:
        // ahhh maybe a separate int to count 7's?
        
        // i'm thinking in the way the problem is laid out for me, where
        // i'm supposed to ""ignore"" sections of numbers
        
        // maybe just fucking count them all and ignore the ones in between 6 and 7
        
       
        
    }
    
    return count;
}

",
c32e8df18759f85c9ca9cc1ff3051aa396bf5a33,"public boolean evenlySpaced(int a, int b, int c)
{
    int[3] arrInOrder;
    arrInOrder[0] = a;
    arrInOrder[1] = b;
    arrInOrder[2] = c;
    
    int small;
    int med, big;
   /**
    if ((a > b) && (a > c)) // if a is the biggest
   {
		if (b > c)
        {
            big = a;
            med = b;
            small = c;
        }
       else
       {
           
       }
       
   }
   */
}
",
8a784cb08df86d4814219f2b557c5cfa0f28180c,"public boolean cigarParty(int cigars, boolean isWeekend)
{
    if (isWeekend)
    {
        return (cigars >= 40);
    else
    {
        return (cigars >= 40 && cigars <= 60);
    }
}
",
6ccaf37a8d9757fc57014287316ecd9409820fe7,"public int sortaSum(int a, int b)
{
    int sum = a + b;
    
    if (sum >= 10 || sum <= 19)
        return 20;
    else
        return sum;
    
}
",
1246d82dc38af3da4d77890172a9d1890cc382a1,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
f8a88d04552686ba064b8db06f097f9921d6b1eb,"public boolean in1To10(int n, boolean outsideMode)
{
    if (outsideMode)
		return (n <= 1 || n >= 10);
	else
    return (n >= 1 && n <= 10);
}
",
8ea0e17b60756ae019215592cbd3e7a8e04b0965,"public int countClumps(int[] nums)
{
    int clumps = 0;
    boolean isClump = false;
    for (int i = 0; i < nums.length - 1; i += 1) {
         if (isClump) {
             if {nums[i] != num[i + 1]) {
                 isClump = false;
             }
             else {
                 isClump = true;
                 clumps += 1;
             }
                }
         }
         return clumps;
}
",
a641c5efbb7e5f53f92580571992aa0a53d6cdf6,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
ecef8ffff5f622c9ab6799c53c46541bd578254a,"public int sum67(int[] nums)
{
    int sum = 0;
    boolean ifSix = false;
    for (int i = 0; i < nums.length; i++)
    {
        if (ifSix)
        {
            if (nums[i] == 7)
                ifSix = false;
        }
        else if (nums[i] == 6)
        {
            ifSix = true;
        }
        //if ifSix is true, then it goes back into the for loop 
        //and the first if statement becomes true
        else
        {
            sum = sum + nums[i];
        }
        //takes the sum of the numbers when there is no linee of numbers starting
        //with a 6 and ending with a 7
    }
    return sum;
}
",
33e1684529896667b663d935101657bf9205ef10,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] != val && nums[i + 1] != val)
            return false;
    }
    return true;
}
",
7ad991a24edd45eac9dde28ce5f6b6a462d3b44f,"public String without2(String str) 
{
    String endLetters;
    endLetters = str.substring(str.length() - 1, str.length()); // I don't know how many letters there are!!
    // ^ use a method that gets the length of a string. Use "".getLength - 1"" and ""- 2?""
    String startLetters;
    startLetters = str.substring(0, 1);
    
    String middleLetters;
    middleLetters = str.substring(2, str.length() - 3);
        
    if (endLetters == startLetters)
    {
        return middleLetters;
    }
    else 
    {
        return str;
    }
}
",
948b5b2528e52a0cd157a7b353521353f3da1fef,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
     return (isMom || (!(isAsleep)));

}
",
c6e135a8d819808a2e86f6eb184fd9701ef4cea6,"public int[] withoutTen(int[] nums)
{
    //creates new array
    int[] newArray = new int[nums.length];
	int j = 0;
	for(int i = 0; i < nums.length; i++)
	{
		if(nums[i] != 10)
		{
			newArray[j] = nums[i];
			j++;
		}
	}
	// returns the new array
	return newArray;
}
",
3da6d13c5e129585a85f09cc153cb57358bb6316,"public String without2(String str) 
{
    if (str.length() >= 2)
    {
        if (str.substring(0,2).equals(str.substring(str.length() - 2)))
        {
            return str.substring(2);
            // if the two letters at the beginning of the word and at the end of the word are equal to each other, the string will returned with these two letters
        }
        else
        {
            return str;
            // if the two letters are not equal to each other, then the original string will be returned
        }
    }
    else
    {
        return str;
        //if the word is only two letters or less, it will return the original string 
    }
}
",
e1377201338b35fe171b9444b54cc7c825b47de7,"public int greenTicket(int a, int b, int c)
{
    if (a == b && b == c) //if two numbers are the same
        return 20;
    if (a == b || a == c || b == c) //if all the numbers are the same
        return 10;
    else //none of the numbers are the same
        return 0;
}
",
dd09babe580586f1680177c5f9004d2f1f2011bf,"public boolean has77(int[] nums)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] == 7 && nums[i + 1] == 7)
            return true;
        if (nums[i] < nums.length - 2 && nums[i] == 7 && nums[i + 2] == 7)
            return true;
    }
    return false;
}
",
e782e855c718d5d72eb1c47b31cc0c9050d6b269,"public String without2(String str) 
{
    // Given a string, if a length 2 substring appears at both its beginning and end,
// return a string without the substring at the beginning, so ""HelloHe"" yields ""lloHe"".
// The substring may overlap with itself, so ""Hi"" yields """". Otherwise, return the original string unchanged.
public String without2(String str)
{
	int len = str.length();
	if(len >= 2)
	{
		if(str.substring(0,2).equals(str.substring(len-2, len)))
			return str.substring(2);
		else
			return str;
	}
	else
		return str;
}
}
",
d3bbd5372c67b93d7e4c5f3425ac793bb5763980,"public int sortaSum(int a, int b)
{
    int sum = a + b;
    if (sum >= 10 && sum <= 19)
        return 20;
    return sum;
}
",
6e2e62d18f30974998599ac300549d4eb85fb22c,"public static int[] fizzArray(int n) {

//initializing integer array with size n

int[] result = new int[n];

for (int i = 0; i < n; i++){

result[i] = i;

}

return result;

}
",
eee0eb76d7c982f7cdbbfb86dbf032940b49e38b,"public int luckySum(int a, int b, int c)
{
    if (a == 13) // if a is equal to 13
        return 0;
    if (b == 13) // if b is equal to 13 go to the a value
        return a;
    if (c == 13) //if c is 13, only add  and b
        return (a + b);
    return (a + b + c); //if none of the others,add all the numbers
}
",
9e81d1a2a7638c14b721846f5090b36ad07ab308,"public int[] seriesUp(int n)
{
    int[] result = new int[(n * (n + 1)) / 2];
    int count = 1;
    int index = 0;
    for (int i = 0; i < result.length; i++)
    {
        for (int j = 0; j < count; j++)
        {
            result[index] = j;
        	index++;
        }
        count++;
    }
}
",
98b41121a7f0c87d5746dc0ae2746596c4a8bb37,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
3a5b1294ef5b59964830e8cf8f6219db0c34b7d8,"public int blackjack(int a, int b)
{
    double remainA;
    remainA = (a % 21); //NOTE: The '%' yields the remainder!!!!
    double remainB;
    remainB =  (b % 21);
    
    // IF the remainder is large for one number, IT IS FAR AWAY from 21.
    if (a > 21 && b > 21)
    {
        return 0;
    }
    else if (a < 21 || b < 21)
    {
        if (a < 21 && b > 21)
        {
            return a;
        }
        else
        {
            return b;
        }
    }
    else
    {
        if (remainA > remainB)
        {
            return b;
        }
        else
        {
            return a;
        }
    }
}",
c4cd9fb76f3a67d4e774521d2a07bd1fe7cd0b11,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
59a0088f887207b9450033d0bec152a0c9e18bab,"public int[] shiftLeft(int[] nums)
{
    int[] result = new int[nums.length]; 
    result[nums.length - 1] = nums[0]; 
    int j = 0; 
    for (int i = 1; i < nums.length - 1; i++)
    {
        result[j] = nums[i];
        j++; 
    }
    
    return result; 
}
",
93d04bbaaacbdc2e43e79af8101e3443d99f3216,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
fa7e52a8dd82b9e07db5c24a9f6640028d267b37,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] != val && nums[i + 1] != val)
        {
            return false;
        }
    }
    return true;
}
",
07e5044ee85fdfbd00a05896e4320766869d1163,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
db19ea5f1cabdb8d39c12a6acfc593bd85bf4f95,"public int[] tenRun(int[] nums)
{
    for (int i = 0; i < nums.length; i++)
    {
    	if (nums[i] % 10 == 0)
    	{
     	   for (int j = i + 1; j < nums.length && nums[j] % 10 != 0; j++)
           {
            	nums[j] = nums[i];   
           }
    	}
    }
    return nums;
}
",
a641c5efbb7e5f53f92580571992aa0a53d6cdf6,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
6ccaf37a8d9757fc57014287316ecd9409820fe7,"public int sortaSum(int a, int b)
{
    int sum = a + b;
    
    if (sum >= 10 || sum <= 19)
        return 20;
    else
        return sum;
    
}
",
afec4a1fda7760651e34095e9ceef8a8483018be,"public boolean sameEnds(int[] nums, int n)
{
    
    for (int i = 0; i <= n; i++)
    {
        if (nums[i] != nums[nums.length - n + i - 1])
        {
            return false;
        }
    }
    return true;
}
",
f720cc450f616d826f746ce4609c79ab1860b68a,"public int[] fizzArray(int n)
{
    int[] result = new int[n];
        for (int i = 0; i<n.length;i++)
        {
            result[i-1] = i;
        }
    return result;
}
",
f33160f9d8c1a76b2c1ada81ffc8fe471a18ac18,"public int makeChocolate(int small, int big, int goal)
{
    int num = goal % 5; // small needed with enough big
    int num2 = goal / 5; // big needed exculeding small
    int count = 0;
    
    if (num > small || (num2 > big) && ((goal - (big * 5)) - small > 0)) 
    {
        return -1;
    }
    else if (num2 <= big) 
    {
        while (goal > 0 && big > 0)
        {
            goal = goal - 5;
            big --;
        }
        
        while (goal > 0)
        {
            goal --;
            count ++'
        }
    }
    else
    {
       return -2;
    }
}
",
0e68a96660515e0852bbeffb5ec3b3954d4b1625,"public int[] seriesUp(int n)
{
     int[] result = new int[n * (n + 1) / 2];
 	 int initial = 0;
 	 for (int j = 1; j <= n; j++)
     {
    	for (int k = 1; k <= j; k++)
        {
      		result[initial ++] = k;
        }
     }
  return result;

}
",
ec0734122f4add509acf5c24dba4d8ba253e0c85,"public int roundSum(int a, int b, int c)
{
    a = this.round10(a);
    b = this.round10(b);
    c = this.round10(c);
    
    int sum = a + b + c;
    
    return sum;
}

public int round10(int num)
{
    int remainder = num % 10;
    
    if (remainder >= 5)
    {
        // round up
        num = num + (10 - remainder);
    }
    else
    {
        // round down
        num = num - remainder;
    }
    
    return num;
}
",
532a012b0ec202d27262b383dc13089aef7e1e3b,"public int dateFashion(int you, int date)
{
   if ((you >= 2 && date >= 2) && (you >= 8 || date >= 8))
       return 2;
   if ((you >= 2 && date >= 2) && !(you >= 8 || date >= 8))
       return 1;
   return 0;
}
",
ecd2767c2649044a0da26903ef340674e89f1009,"public int[] fix45(int[] nums) {
  int[] result = nums;
  for(int i = 0; i < result.length; i++) {
      if(result[i] == 4 && i != result.length) {
          int index = findIndexOfValidFive(result);
           
          if(index != -1) {
              int temp = result[i + 1];
              result[i + 1] = result[index];
              result[index] = temp;
          }
      }
  }  
   
  return result;
}
 
public int findIndexOfValidFive(int[] nums) {
    for(int i = 0; i < nums.length; i++) {
        if((i == 0 && nums[i] == 5) || (nums[i] == 5 && nums[i - 1] != 4)) {
            return i;
        }
    }
     
    return -1;",
b1ffd079f8c4294a66e06ad7d2fb2a7a8fbe7344,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
0eefe10c954547a7675d5ee81f88d4d112cf44e9,"public boolean bobThere(String str)
{
    for (int i = 0; i < str.length() - 2; i++) {
        if (str.charAt(i) == 'b' && str.charAt(i + 2) == 'b') {
            return true;
        }
    }
    return false;
}
",
dea353e4fa8946278ebcfad2f8039a9f72b55b28,"public int sum3(int[] nums)
{
 return nums[0] + nums[1] + nums[2];   
}
",
f0c481a9e07c60bea12e78a5079713f14b24c2a9,"public int blackjack(int a, int b)
{
    if(b > 21 && a < 21)
        return a;
    if(a>21 && b < 21)
        return b;
    if(a > b)
        return a;
    if (b > a)
        return a;
    return 0;
}
",
c64c9e9c0a786ef3732a68209a390d30d8284fd4,"public int dateFashion(int you, int date)
{
   if ((you >= 2 || date >= 2) && (you >= 8 || date >= 8))
       return 2;
   if ((you >= 2 || date >= 2) && !(you >= 8 || date >= 8))
       return 1;
   return 0;
}
",
56cccc5e57b71638ae0f36747e6ae090dc81fe2d,"public int sum67(int[] nums)
{
    int count = 0;
    int seven = 0;
    
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] == 6)
        {
           for (int x = i + 1; x < nums.length; x++)
           {
               if (nums[x] != 7)
               {
                   count = count + 0;
               }
               else if (nums[x] == 7)
               {
                   count = count + 0;
                   i = i + x;
               }
           }
        
        }
        else
        {
        count = count + nums[i];
        }
        // i'm stuck on excluding numbers up till 7.
        // okay, i'm trying to say:
        // when you reach a 6, ignore the 6.
        // then, ignore each number until you reach a 7.
        
        // so perhaps the smarter way to state this is:
        // ahhh maybe a separate int to count 7's?
        
        // i'm thinking in the way the problem is laid out for me, where
        // i'm supposed to ""ignore"" sections of numbers
        
        // maybe just fucking count them all and ignore the ones in between 6 and 7
        
       
        
    }
    
    return count;
}

",
98b41121a7f0c87d5746dc0ae2746596c4a8bb37,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
9e81d1a2a7638c14b721846f5090b36ad07ab308,"public int[] seriesUp(int n)
{
    int[] result = new int[(n * (n + 1)) / 2];
    int count = 1;
    int index = 0;
    for (int i = 0; i < result.length; i++)
    {
        for (int j = 0; j < count; j++)
        {
            result[index] = j;
        	index++;
        }
        count++;
    }
}
",
45bb0c43390b2898deab9a359cdda85e43e43e39,"public int[] shiftLeft(int[] nums)
{
    int[] result = new int[nums.length];
    for (int i = 0; i< nums.length - 1; i++)
    {
		result[i] = nums[i+1];
    }
    result[nums.length - 1] = nums[0];
    
    return result;
}
",
14ced47f38f6da0c3afcc08c0bcb9ed96b5c73fe,"public String getSandwich(String str)
{
    if (str.indexOf(""bread"") > 0) // if there are two peices of bread
    {
         System.out.print(str.indexOf(""bread""));
        return ""no"";
    }
    else
    {
        return """";
    }
}
",
a730369051672c668c3efc03eb8dcc6956e9beb3,"public int[] withoutTen(int[] nums)
{
    int[] arr = new int[nums.length];
	int p = 0;
	for(int i = 0; i < nums.length; i++)
	{
		if(nums[i] != 10)
		{
			arr[p] = nums[i];
			p++;
		}
	}
	// Java arrays are initialized to 0 so no need to set the last elements to 0
	return arr;
}
",
1ac085374f785c20ca501ac5939ec5977db8a972,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
    if (isAsleep)
    {
        return false;
    }
    
    if (isMorning)
    {
 		return false;   
    }
    
    return true;
}
",
324744e665f46a82492205626535ae0a59adced1,"public int countEvens(int[] nums)
{
    int count = 0;
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] % 2 == 0)
        {
            count++;
        }
    }
    return count;
}
",
3da6d13c5e129585a85f09cc153cb57358bb6316,"public String without2(String str) 
{
    if (str.length() >= 2)
    {
        if (str.substring(0,2).equals(str.substring(str.length() - 2)))
        {
            return str.substring(2);
            // if the two letters at the beginning of the word and at the end of the word are equal to each other, the string will returned with these two letters
        }
        else
        {
            return str;
            // if the two letters are not equal to each other, then the original string will be returned
        }
    }
    else
    {
        return str;
        //if the word is only two letters or less, it will return the original string 
    }
}
",
37483792e65efa307aab5d74a47b4a1dbe36e195,"public boolean bobThere(String str)
{
    //int firstB = str.indexOf(""b"");
   // int secondB = str.lastIndexOf(""b"");
    //if (secondB == firstB + 2)
    //    return true;
   // return false;
    for (int n == 0; n < str.length(); n++)
    {
        if ((str.charAt(n) == str.indexOf(""b"") && (str.charAt(n + 2) == str.indexOf(""b"", n))
        {
            return true;
        }
                
    }//end for loop
    return false;
}
",
948b5b2528e52a0cd157a7b353521353f3da1fef,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
     return (isMom || (!(isAsleep)));

}
",
07e5044ee85fdfbd00a05896e4320766869d1163,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
8a4197cd94d2fc278a10045f02c9323393eb70ad,"public boolean sameEnds(int[] nums, int n)
{
    for (int i = 0; i < n; i++)
    {
        if (nums[i] != nums[nums.length - n + i])
            return false;
    }
    return true;
}
",
dea353e4fa8946278ebcfad2f8039a9f72b55b28,"public int sum3(int[] nums)
{
 return nums[0] + nums[1] + nums[2];   
}
",
98b41121a7f0c87d5746dc0ae2746596c4a8bb37,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
9e81d1a2a7638c14b721846f5090b36ad07ab308,"public int[] seriesUp(int n)
{
    int[] result = new int[(n * (n + 1)) / 2];
    int count = 1;
    int index = 0;
    for (int i = 0; i < result.length; i++)
    {
        for (int j = 0; j < count; j++)
        {
            result[index] = j;
        	index++;
        }
        count++;
    }
}
",
cfc6cb87b23f11a2f4bbbf92a708643e8012b8fb,"public int countEvens(int[] nums)
{	
    int count = 0;
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] % 2 == 0))
        {
            count++;
        }
    }
    return count;
}
",
da986520180a13a98bb67c061d43bd9c2686e469,"public String alarmClock(int day, boolean vacation)
{
    if (vacation) { 
        if (day == 0 || day == 6) {
            return ""off"";
        } else {
            return ""10:00"";
        }
    } else {
        if (day == 0 || day == 6) {
            return ""10:00"";
        } else {
            return ""7:00"";
        }
    }
}
",
dbbe2c6beeefd93c68c1cf77a6130ed4323b9aa3,"public int countEvens(int[] nums)
{
    int count = 0;
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] % 2 == 0)
        {
            count++;
        }
    }
    return count;
}
",
c32e8df18759f85c9ca9cc1ff3051aa396bf5a33,"public boolean evenlySpaced(int a, int b, int c)
{
    int[3] arrInOrder;
    arrInOrder[0] = a;
    arrInOrder[1] = b;
    arrInOrder[2] = c;
    
    int small;
    int med, big;
   /**
    if ((a > b) && (a > c)) // if a is the biggest
   {
		if (b > c)
        {
            big = a;
            med = b;
            small = c;
        }
       else
       {
           
       }
       
   }
   */
}
",
948b5b2528e52a0cd157a7b353521353f3da1fef,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
     return (isMom || (!(isAsleep)));

}
",
c6e135a8d819808a2e86f6eb184fd9701ef4cea6,"public int[] withoutTen(int[] nums)
{
    //creates new array
    int[] newArray = new int[nums.length];
	int j = 0;
	for(int i = 0; i < nums.length; i++)
	{
		if(nums[i] != 10)
		{
			newArray[j] = nums[i];
			j++;
		}
	}
	// returns the new array
	return newArray;
}
",
ec03a0ab16a221fcf9292fec81dde347af81b619,"public String repeatEnd(String str, int n)
{
StringBuffer result = new StringBuffer();
String end = str.substring(str.length() - n);

for(int i = 0; i < n; i++)
result.append(end);

return result.toString(
}
",
a730369051672c668c3efc03eb8dcc6956e9beb3,"public int[] withoutTen(int[] nums)
{
    int[] arr = new int[nums.length];
	int p = 0;
	for(int i = 0; i < nums.length; i++)
	{
		if(nums[i] != 10)
		{
			arr[p] = nums[i];
			p++;
		}
	}
	// Java arrays are initialized to 0 so no need to set the last elements to 0
	return arr;
}
",
afec4a1fda7760651e34095e9ceef8a8483018be,"public boolean sameEnds(int[] nums, int n)
{
    
    for (int i = 0; i <= n; i++)
    {
        if (nums[i] != nums[nums.length - n + i - 1])
        {
            return false;
        }
    }
    return true;
}
",
b7d5d5590bde31e23ee41e67ec8ade069279409e,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    if (isBirthday) speed >= 5;
    if (speed <= 60) return 0;
    return (speed > 60 && speed <= 80) ? 1 : 2;
}
",
b1734b84d9123cc28d3f62e758b480ab26ea8fb9,"public int sortaSum(int a, int b)
{
   int sum = a + b;
   if (sum >= 10 && sum <= 19)
   {
   		return 20; 
   }
   else
   {
   		return sum;
   }
}
",
6f326caf302bdfdbefc02faf1dc435ba9d9f04d6,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if ((nums[i] != val) && (nums[i + 1] != val))
        {
            return false;
        }          
        
    }
     return true;
}
",
1246d82dc38af3da4d77890172a9d1890cc382a1,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
62ce70304358abfdd932378fb6cd7769b980fdc9,"public int noTeenSum(int a, int b, int c)
{
	return fixTeen(a) + fixTeen(b) + fixTeen(c);
}

public int fixTeen(int n)
{
    if (13 <= n && n <= 19)
    {
        if (n != 15 || n != 16)
        {
            n = 0;
        }
        return n;
    }
}
",
eb9d1e97323f6c0c1410dd8ae35aa261280fc389,"public boolean endOther(String a, String b)
{
    a = a.toLowerCase();
    b = a.toLowerCase();
    return(a.endsWith(b) || b.endsWith(a));
    
    
}
",
f33160f9d8c1a76b2c1ada81ffc8fe471a18ac18,"public int makeChocolate(int small, int big, int goal)
{
    int num = goal % 5; // small needed with enough big
    int num2 = goal / 5; // big needed exculeding small
    int count = 0;
    
    if (num > small || (num2 > big) && ((goal - (big * 5)) - small > 0)) 
    {
        return -1;
    }
    else if (num2 <= big) 
    {
        while (goal > 0 && big > 0)
        {
            goal = goal - 5;
            big --;
        }
        
        while (goal > 0)
        {
            goal --;
            count ++'
        }
    }
    else
    {
       return -2;
    }
}
",
9a762998ef3f0abdaeaa9e34d97d58d792cb6be4,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
    if (isAsleep)
        return false;
    if (isMom)
        return true;
    return (!isMorning);
}
",
c1fdbe3e9fca73de72f1831d00c35304cb29463e,"public int[] fizzArray(int n)
{
    int[] result = new int[n];
    for (int i = 0; i < n; i++)
    {
        result[i] = i;
    }
    return result;
}
",
9df1cbdbe2059e87bcede6e1d1033ffff3e609ed,"public int[] withoutTen(int[] nums)
{
  	int[] result = new int[nums.length];
  	int count = 0;
  	
    for (int i = 0; i < nums.length; i++)
    {
     	if (nums[i] != 10)
        {
         	result[count] = nums[i];
            count++;
        }
    }
    for (int i = 0; i < count; i++)
    {
     	result[result.length - i] = 0;
    }
    
    return result;
}
",
708073e053068889622d8588b7bec2ceea644404,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
a3cfe4acc0878f7a98ccbc168df9dff28266dbd7,"public int[] frontPiece(int[] nums)
{
    int [] grid = new int[2];
    
    // establish logi for checking nums.
    // add the proper elements of nums into a new array 
    if (nums.length == 1)
    {
        return grid[0] = nums[0];
    }
    else if (nums.length == 0)
    {
        return grid;
    }
    else
    {
        return grid[nums[0], nums[1]];
    }
}
",
da986520180a13a98bb67c061d43bd9c2686e469,"public String alarmClock(int day, boolean vacation)
{
    if (vacation) { 
        if (day == 0 || day == 6) {
            return ""off"";
        } else {
            return ""10:00"";
        }
    } else {
        if (day == 0 || day == 6) {
            return ""10:00"";
        } else {
            return ""7:00"";
        }
    }
}
",
44401b7a795caa5e1f94585e15dc8c88bdb84119,"public boolean isEverywhere(int[] nums, int val)
{	
    for (int i = 0; i < nums.length - 1; i++)
    {
        if ( nums[i] != val && nums[i+1] != val)
        {
            return false;
        }
    }
    return true;
}
",
dd09babe580586f1680177c5f9004d2f1f2011bf,"public boolean has77(int[] nums)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] == 7 && nums[i + 1] == 7)
            return true;
        if (nums[i] < nums.length - 2 && nums[i] == 7 && nums[i + 2] == 7)
            return true;
    }
    return false;
}
",
0eefe10c954547a7675d5ee81f88d4d112cf44e9,"public boolean bobThere(String str)
{
    for (int i = 0; i < str.length() - 2; i++) {
        if (str.charAt(i) == 'b' && str.charAt(i + 2) == 'b') {
            return true;
        }
    }
    return false;
}
",
c4cd9fb76f3a67d4e774521d2a07bd1fe7cd0b11,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
a9e28b208ebd799c89289ae125794d7301b373d2,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 1; i < nums.length() - 1; i++)
    {
        if (nums[i - 1] != val && nums[i + 1] != val)
            return false;
    }
    return true;
}
",
f1f0a6448bfe3ad005796a40633fc50d6ffa6023,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
d3bbd5372c67b93d7e4c5f3425ac793bb5763980,"public int sortaSum(int a, int b)
{
    int sum = a + b;
    if (sum >= 10 && sum <= 19)
        return 20;
    return sum;
}
",
93d04bbaaacbdc2e43e79af8101e3443d99f3216,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
c1fdbe3e9fca73de72f1831d00c35304cb29463e,"public int[] fizzArray(int n)
{
    int[] result = new int[n];
    for (int i = 0; i < n; i++)
    {
        result[i] = i;
    }
    return result;
}
",
c3f23ac2ec5c833dc9221dad8b3933a5ab317603,"public boolean cigarParty(int cigars, boolean isWeekend)
{
    if (isWeekend)
        return (cigars >= 40);
    return (cigars >= 40 && cigars <= 60);
    
          
}
",
eee0eb76d7c982f7cdbbfb86dbf032940b49e38b,"public int luckySum(int a, int b, int c)
{
    if (a == 13) // if a is equal to 13
        return 0;
    if (b == 13) // if b is equal to 13 go to the a value
        return a;
    if (c == 13) //if c is 13, only add  and b
        return (a + b);
    return (a + b + c); //if none of the others,add all the numbers
}
",
cdf42d5c2d560cf867cc0f628e892b8731b4a6c5,"public boolean twoTwo(int[] nums)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] == 2 && nums[i+1] == 2)
        {
            return true;
        }
    }
    return false;;
}
",
f8a88d04552686ba064b8db06f097f9921d6b1eb,"public boolean in1To10(int n, boolean outsideMode)
{
    if (outsideMode)
		return (n <= 1 || n >= 10);
	else
    return (n >= 1 && n <= 10);
}
",
f7613e1314baffe2be7c9164f5586a14e6e82fd6,"public int countCode(String str)
{
    int count = 0;
    for (int i = 0; i < str.length() - 4; i++) {
        if (str.substring(i, i + 1).equals(""co"") && str.charAt(i + 3) == 'e') {
            count++;
        }
    }
    return count;
}
",
9a762998ef3f0abdaeaa9e34d97d58d792cb6be4,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
    if (isAsleep)
        return false;
    if (isMom)
        return true;
    return (!isMorning);
}
",
3d4c98b74adf52d4ca5fe21febb24b1a8f6a6120,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++) {
        if (nums[i] != val && nums[i + 1] != val) {
            return false;
        }
    }
    return true;
}
",
f33160f9d8c1a76b2c1ada81ffc8fe471a18ac18,"public int makeChocolate(int small, int big, int goal)
{
    int num = goal % 5; // small needed with enough big
    int num2 = goal / 5; // big needed exculeding small
    int count = 0;
    
    if (num > small || (num2 > big) && ((goal - (big * 5)) - small > 0)) 
    {
        return -1;
    }
    else if (num2 <= big) 
    {
        while (goal > 0 && big > 0)
        {
            goal = goal - 5;
            big --;
        }
        
        while (goal > 0)
        {
            goal --;
            count ++'
        }
    }
    else
    {
       return -2;
    }
}
",
a641c5efbb7e5f53f92580571992aa0a53d6cdf6,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
e782e855c718d5d72eb1c47b31cc0c9050d6b269,"public String without2(String str) 
{
    // Given a string, if a length 2 substring appears at both its beginning and end,
// return a string without the substring at the beginning, so ""HelloHe"" yields ""lloHe"".
// The substring may overlap with itself, so ""Hi"" yields """". Otherwise, return the original string unchanged.
public String without2(String str)
{
	int len = str.length();
	if(len >= 2)
	{
		if(str.substring(0,2).equals(str.substring(len-2, len)))
			return str.substring(2);
		else
			return str;
	}
	else
		return str;
}
}
",
9a762998ef3f0abdaeaa9e34d97d58d792cb6be4,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
    if (isAsleep)
        return false;
    if (isMom)
        return true;
    return (!isMorning);
}
",
e22ce5e6a4c5b1b12e61c7366855f779f8ae64f3,"public String atFirst(String str)
{
    if (str.length() >= 2)
    {
        return (str.substring(0, 2));
    }
    else if (str.length() == 1)
    {
        return str + ""@"";
    }
    else
    {
        return ""@@"";
    }
}
",
8a784cb08df86d4814219f2b557c5cfa0f28180c,"public boolean cigarParty(int cigars, boolean isWeekend)
{
    if (isWeekend)
    {
        return (cigars >= 40);
    else
    {
        return (cigars >= 40 && cigars <= 60);
    }
}
",
708073e053068889622d8588b7bec2ceea644404,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
67e32e60ccf94c9e237b1ee60eec88d54337ee46,"public int noTeenSum(int a, int b, int c)
{
	return fixTeen(a) + fixTeen(b) + fixTeen(c);
}

public int fixTeen(int n)
{
    if (( n > 12 && n < 15) ||( n > 16 && n < 20 )) {
     return 0;
   }
   return n;
}
",
948b5b2528e52a0cd157a7b353521353f3da1fef,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
     return (isMom || (!(isAsleep)));

}
",
faa6cc44696d72e0fa85cc561584a1de159a4aa5,"public int dateFashion(int you, int date)
{
    if (you <= 2 || date <= 2)
        return 0;
    if (you >= 8 || date >= 8)
        return 2;
    return 1;
}
",
1ac085374f785c20ca501ac5939ec5977db8a972,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
    if (isAsleep)
    {
        return false;
    }
    
    if (isMorning)
    {
 		return false;   
    }
    
    return true;
}
",
b7d5d5590bde31e23ee41e67ec8ade069279409e,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    if (isBirthday) speed >= 5;
    if (speed <= 60) return 0;
    return (speed > 60 && speed <= 80) ? 1 : 2;
}
",
3da6d13c5e129585a85f09cc153cb57358bb6316,"public String without2(String str) 
{
    if (str.length() >= 2)
    {
        if (str.substring(0,2).equals(str.substring(str.length() - 2)))
        {
            return str.substring(2);
            // if the two letters at the beginning of the word and at the end of the word are equal to each other, the string will returned with these two letters
        }
        else
        {
            return str;
            // if the two letters are not equal to each other, then the original string will be returned
        }
    }
    else
    {
        return str;
        //if the word is only two letters or less, it will return the original string 
    }
}
",
56cccc5e57b71638ae0f36747e6ae090dc81fe2d,"public int sum67(int[] nums)
{
    int count = 0;
    int seven = 0;
    
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] == 6)
        {
           for (int x = i + 1; x < nums.length; x++)
           {
               if (nums[x] != 7)
               {
                   count = count + 0;
               }
               else if (nums[x] == 7)
               {
                   count = count + 0;
                   i = i + x;
               }
           }
        
        }
        else
        {
        count = count + nums[i];
        }
        // i'm stuck on excluding numbers up till 7.
        // okay, i'm trying to say:
        // when you reach a 6, ignore the 6.
        // then, ignore each number until you reach a 7.
        
        // so perhaps the smarter way to state this is:
        // ahhh maybe a separate int to count 7's?
        
        // i'm thinking in the way the problem is laid out for me, where
        // i'm supposed to ""ignore"" sections of numbers
        
        // maybe just fucking count them all and ignore the ones in between 6 and 7
        
       
        
    }
    
    return count;
}

",
c4cd9fb76f3a67d4e774521d2a07bd1fe7cd0b11,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
2b92c031167d3664a0be5ab4cee6d5ad678ce824,"public int sum67(int[] nums)
{
    int count = 0;
    int seven = 0;
    
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] == 6)
        {
           for (int x = i; x < nums.length; x++)
           {
               if (nums[x] != 7)
               {
                   count = count + 0;
               }
               else if (nums[x] == 7)
               {
                   count = count + 0;
                   i = i + x;
               }
           }
        
        }
        
        count = count + nums[i];
        // i'm stuck on excluding numbers up till 7.
        // okay, i'm trying to say:
        // when you reach a 6, ignore the 6.
        // then, ignore each number until you reach a 7.
        
        // so perhaps the smarter way to state this is:
        // ahhh maybe a separate int to count 7's?
        
        // i'm thinking in the way the problem is laid out for me, where
        // i'm supposed to ""ignore"" sections of numbers
        
        // maybe just fucking count them all and ignore the ones in between 6 and 7
        
       
        
    }
    
    return count;
}

",
56cccc5e57b71638ae0f36747e6ae090dc81fe2d,"public int sum67(int[] nums)
{
    int count = 0;
    int seven = 0;
    
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] == 6)
        {
           for (int x = i + 1; x < nums.length; x++)
           {
               if (nums[x] != 7)
               {
                   count = count + 0;
               }
               else if (nums[x] == 7)
               {
                   count = count + 0;
                   i = i + x;
               }
           }
        
        }
        else
        {
        count = count + nums[i];
        }
        // i'm stuck on excluding numbers up till 7.
        // okay, i'm trying to say:
        // when you reach a 6, ignore the 6.
        // then, ignore each number until you reach a 7.
        
        // so perhaps the smarter way to state this is:
        // ahhh maybe a separate int to count 7's?
        
        // i'm thinking in the way the problem is laid out for me, where
        // i'm supposed to ""ignore"" sections of numbers
        
        // maybe just fucking count them all and ignore the ones in between 6 and 7
        
       
        
    }
    
    return count;
}

",
e1377201338b35fe171b9444b54cc7c825b47de7,"public int greenTicket(int a, int b, int c)
{
    if (a == b && b == c) //if two numbers are the same
        return 20;
    if (a == b || a == c || b == c) //if all the numbers are the same
        return 10;
    else //none of the numbers are the same
        return 0;
}
",
ecef8ffff5f622c9ab6799c53c46541bd578254a,"public int sum67(int[] nums)
{
    int sum = 0;
    boolean ifSix = false;
    for (int i = 0; i < nums.length; i++)
    {
        if (ifSix)
        {
            if (nums[i] == 7)
                ifSix = false;
        }
        else if (nums[i] == 6)
        {
            ifSix = true;
        }
        //if ifSix is true, then it goes back into the for loop 
        //and the first if statement becomes true
        else
        {
            sum = sum + nums[i];
        }
        //takes the sum of the numbers when there is no linee of numbers starting
        //with a 6 and ending with a 7
    }
    return sum;
}
",
4465ac2e7e70f3ac5ddbd490bd262cc0c4f6249d,"public int[] frontPiece(int[] nums)
{
    int [] grid = new int[2];
    
    // establish logi for checking nums.
    // add the proper elements of nums into a new array 
    if (nums.length == 1)
    {
        return grid[0] = nums[0];
    }
    else if (nums.length == 0)
    {
        return grid;
    }
    else
    {
        grid[0] = nums[0];
        grid[1] = nums[1];
        return grid[];
    }
}
",
e782e855c718d5d72eb1c47b31cc0c9050d6b269,"public String without2(String str) 
{
    // Given a string, if a length 2 substring appears at both its beginning and end,
// return a string without the substring at the beginning, so ""HelloHe"" yields ""lloHe"".
// The substring may overlap with itself, so ""Hi"" yields """". Otherwise, return the original string unchanged.
public String without2(String str)
{
	int len = str.length();
	if(len >= 2)
	{
		if(str.substring(0,2).equals(str.substring(len-2, len)))
			return str.substring(2);
		else
			return str;
	}
	else
		return str;
}
}
",
e05151e763b22c6322f72dd9558578b0970a10d6,"public boolean canBalance(int[] nums)
{
    double sum = 0;
    for (int n : nums) {
        sum += n;
    }
    
    double target = sum / 2;
    sum = 0;
    
    for (int i : nums) {
        sum += i;
        if (sum == target) {
            return true;
        }
    }
    return false;
}
",
9a762998ef3f0abdaeaa9e34d97d58d792cb6be4,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
    if (isAsleep)
        return false;
    if (isMom)
        return true;
    return (!isMorning);
}
",
c4cd9fb76f3a67d4e774521d2a07bd1fe7cd0b11,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
6ccaf37a8d9757fc57014287316ecd9409820fe7,"public int sortaSum(int a, int b)
{
    int sum = a + b;
    
    if (sum >= 10 || sum <= 19)
        return 20;
    else
        return sum;
    
}
",
ec03a0ab16a221fcf9292fec81dde347af81b619,"public String repeatEnd(String str, int n)
{
StringBuffer result = new StringBuffer();
String end = str.substring(str.length() - n);

for(int i = 0; i < n; i++)
result.append(end);

return result.toString(
}
",
83a239f0521cd38117ddbaaf228f8523a019cc40,"public boolean endOther(String a, String b)
{
    return a.toLowerCase().endsWith(b.toLowerCase()) || b.toLowerCase().endsWith(a.toLowerCase());
}
",
1ac085374f785c20ca501ac5939ec5977db8a972,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
    if (isAsleep)
    {
        return false;
    }
    
    if (isMorning)
    {
 		return false;   
    }
    
    return true;
}
",
37483792e65efa307aab5d74a47b4a1dbe36e195,"public boolean bobThere(String str)
{
    //int firstB = str.indexOf(""b"");
   // int secondB = str.lastIndexOf(""b"");
    //if (secondB == firstB + 2)
    //    return true;
   // return false;
    for (int n == 0; n < str.length(); n++)
    {
        if ((str.charAt(n) == str.indexOf(""b"") && (str.charAt(n + 2) == str.indexOf(""b"", n))
        {
            return true;
        }
                
    }//end for loop
    return false;
}
",
eb9d1e97323f6c0c1410dd8ae35aa261280fc389,"public boolean endOther(String a, String b)
{
    a = a.toLowerCase();
    b = a.toLowerCase();
    return(a.endsWith(b) || b.endsWith(a));
    
    
}
",
a641c5efbb7e5f53f92580571992aa0a53d6cdf6,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
f8a88d04552686ba064b8db06f097f9921d6b1eb,"public boolean in1To10(int n, boolean outsideMode)
{
    if (outsideMode)
		return (n <= 1 || n >= 10);
	else
    return (n >= 1 && n <= 10);
}
",
b7d5d5590bde31e23ee41e67ec8ade069279409e,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    if (isBirthday) speed >= 5;
    if (speed <= 60) return 0;
    return (speed > 60 && speed <= 80) ? 1 : 2;
}
",
afec4a1fda7760651e34095e9ceef8a8483018be,"public boolean sameEnds(int[] nums, int n)
{
    
    for (int i = 0; i <= n; i++)
    {
        if (nums[i] != nums[nums.length - n + i - 1])
        {
            return false;
        }
    }
    return true;
}
",
dea353e4fa8946278ebcfad2f8039a9f72b55b28,"public int sum3(int[] nums)
{
 return nums[0] + nums[1] + nums[2];   
}
",
67e32e60ccf94c9e237b1ee60eec88d54337ee46,"public int noTeenSum(int a, int b, int c)
{
	return fixTeen(a) + fixTeen(b) + fixTeen(c);
}

public int fixTeen(int n)
{
    if (( n > 12 && n < 15) ||( n > 16 && n < 20 )) {
     return 0;
   }
   return n;
}
",
a3cfe4acc0878f7a98ccbc168df9dff28266dbd7,"public int[] frontPiece(int[] nums)
{
    int [] grid = new int[2];
    
    // establish logi for checking nums.
    // add the proper elements of nums into a new array 
    if (nums.length == 1)
    {
        return grid[0] = nums[0];
    }
    else if (nums.length == 0)
    {
        return grid;
    }
    else
    {
        return grid[nums[0], nums[1]];
    }
}
",
6e2e62d18f30974998599ac300549d4eb85fb22c,"public static int[] fizzArray(int n) {

//initializing integer array with size n

int[] result = new int[n];

for (int i = 0; i < n; i++){

result[i] = i;

}

return result;

}
",
e782e855c718d5d72eb1c47b31cc0c9050d6b269,"public String without2(String str) 
{
    // Given a string, if a length 2 substring appears at both its beginning and end,
// return a string without the substring at the beginning, so ""HelloHe"" yields ""lloHe"".
// The substring may overlap with itself, so ""Hi"" yields """". Otherwise, return the original string unchanged.
public String without2(String str)
{
	int len = str.length();
	if(len >= 2)
	{
		if(str.substring(0,2).equals(str.substring(len-2, len)))
			return str.substring(2);
		else
			return str;
	}
	else
		return str;
}
}
",
f0c481a9e07c60bea12e78a5079713f14b24c2a9,"public int blackjack(int a, int b)
{
    if(b > 21 && a < 21)
        return a;
    if(a>21 && b < 21)
        return b;
    if(a > b)
        return a;
    if (b > a)
        return a;
    return 0;
}
",
93d04bbaaacbdc2e43e79af8101e3443d99f3216,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
33e1684529896667b663d935101657bf9205ef10,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] != val && nums[i + 1] != val)
            return false;
    }
    return true;
}
",
1ac085374f785c20ca501ac5939ec5977db8a972,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
    if (isAsleep)
    {
        return false;
    }
    
    if (isMorning)
    {
 		return false;   
    }
    
    return true;
}
",
a3cfe4acc0878f7a98ccbc168df9dff28266dbd7,"public int[] frontPiece(int[] nums)
{
    int [] grid = new int[2];
    
    // establish logi for checking nums.
    // add the proper elements of nums into a new array 
    if (nums.length == 1)
    {
        return grid[0] = nums[0];
    }
    else if (nums.length == 0)
    {
        return grid;
    }
    else
    {
        return grid[nums[0], nums[1]];
    }
}
",
a730369051672c668c3efc03eb8dcc6956e9beb3,"public int[] withoutTen(int[] nums)
{
    int[] arr = new int[nums.length];
	int p = 0;
	for(int i = 0; i < nums.length; i++)
	{
		if(nums[i] != 10)
		{
			arr[p] = nums[i];
			p++;
		}
	}
	// Java arrays are initialized to 0 so no need to set the last elements to 0
	return arr;
}
",
7862665265faf85e50ada49c030c401c79b4301c,"public boolean sameEnds(int[] nums, int n)
{
    for (int i = 0; i < n; i++)
    {
        if (nums[i] != nums[nums.length - (n - i)])
        {
            return false;
        }
    }
    
    return true;
}
",
1246d82dc38af3da4d77890172a9d1890cc382a1,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
b1ffd079f8c4294a66e06ad7d2fb2a7a8fbe7344,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
faa6cc44696d72e0fa85cc561584a1de159a4aa5,"public int dateFashion(int you, int date)
{
    if (you <= 2 || date <= 2)
        return 0;
    if (you >= 8 || date >= 8)
        return 2;
    return 1;
}
",
bbf414c607917bae018f323952576cc4855d0403,"public int[] fix45(int[] nums)
{
    int[] fours = new int [3];
    int[] fives = new int[3];
    int index4=0;
    int index5 = 0;
    for (int i=0; i<nums.length;i++)
    {
        if (nums[i] == 4)
        {
            fours[index4] = i;
            index4++;
        }
        else if (nums[i] == 5)
        {
            fives[index5] = i;
            index5++;
        }
    }
    for (int i = index5-1; i>=0;i--)
    {
        if (nums[fours[i]+1]!=5)
        {
        	nums[fives[i]] = nums[fours[i]+1];
        	nums[fours[i]+1] = 5;
        }
    }
    
    
    
    
    //int start = 0;
    //int skip = -1;
    //for (int i=0; i<nums.length;i++)
    //{
    //    if (nums[i] == 4)
    //    {
    //        for (int j=start; j<nums.length;j++)
   	//		{
    //            if (j!=skip && nums[j]==5)
    //            {
    //                nums[j]=nums[i+1];
    //                nums[i+1]=5;
    //                skip = i+1;
    //                break;
    //            }
    //        }
    //    }
    //}
    return nums;
}
",
e05151e763b22c6322f72dd9558578b0970a10d6,"public boolean canBalance(int[] nums)
{
    double sum = 0;
    for (int n : nums) {
        sum += n;
    }
    
    double target = sum / 2;
    sum = 0;
    
    for (int i : nums) {
        sum += i;
        if (sum == target) {
            return true;
        }
    }
    return false;
}
",
59a0088f887207b9450033d0bec152a0c9e18bab,"public int[] shiftLeft(int[] nums)
{
    int[] result = new int[nums.length]; 
    result[nums.length - 1] = nums[0]; 
    int j = 0; 
    for (int i = 1; i < nums.length - 1; i++)
    {
        result[j] = nums[i];
        j++; 
    }
    
    return result; 
}
",
d3bbd5372c67b93d7e4c5f3425ac793bb5763980,"public int sortaSum(int a, int b)
{
    int sum = a + b;
    if (sum >= 10 && sum <= 19)
        return 20;
    return sum;
}
",
4465ac2e7e70f3ac5ddbd490bd262cc0c4f6249d,"public int[] frontPiece(int[] nums)
{
    int [] grid = new int[2];
    
    // establish logi for checking nums.
    // add the proper elements of nums into a new array 
    if (nums.length == 1)
    {
        return grid[0] = nums[0];
    }
    else if (nums.length == 0)
    {
        return grid;
    }
    else
    {
        grid[0] = nums[0];
        grid[1] = nums[1];
        return grid[];
    }
}
",
948b5b2528e52a0cd157a7b353521353f3da1fef,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
     return (isMom || (!(isAsleep)));

}
",
e782e855c718d5d72eb1c47b31cc0c9050d6b269,"public String without2(String str) 
{
    // Given a string, if a length 2 substring appears at both its beginning and end,
// return a string without the substring at the beginning, so ""HelloHe"" yields ""lloHe"".
// The substring may overlap with itself, so ""Hi"" yields """". Otherwise, return the original string unchanged.
public String without2(String str)
{
	int len = str.length();
	if(len >= 2)
	{
		if(str.substring(0,2).equals(str.substring(len-2, len)))
			return str.substring(2);
		else
			return str;
	}
	else
		return str;
}
}
",
9df1cbdbe2059e87bcede6e1d1033ffff3e609ed,"public int[] withoutTen(int[] nums)
{
  	int[] result = new int[nums.length];
  	int count = 0;
  	
    for (int i = 0; i < nums.length; i++)
    {
     	if (nums[i] != 10)
        {
         	result[count] = nums[i];
            count++;
        }
    }
    for (int i = 0; i < count; i++)
    {
     	result[result.length - i] = 0;
    }
    
    return result;
}
",
c1fdbe3e9fca73de72f1831d00c35304cb29463e,"public int[] fizzArray(int n)
{
    int[] result = new int[n];
    for (int i = 0; i < n; i++)
    {
        result[i] = i;
    }
    return result;
}
",
3da6d13c5e129585a85f09cc153cb57358bb6316,"public String without2(String str) 
{
    if (str.length() >= 2)
    {
        if (str.substring(0,2).equals(str.substring(str.length() - 2)))
        {
            return str.substring(2);
            // if the two letters at the beginning of the word and at the end of the word are equal to each other, the string will returned with these two letters
        }
        else
        {
            return str;
            // if the two letters are not equal to each other, then the original string will be returned
        }
    }
    else
    {
        return str;
        //if the word is only two letters or less, it will return the original string 
    }
}
",
dea353e4fa8946278ebcfad2f8039a9f72b55b28,"public int sum3(int[] nums)
{
 return nums[0] + nums[1] + nums[2];   
}
",
e05151e763b22c6322f72dd9558578b0970a10d6,"public boolean canBalance(int[] nums)
{
    double sum = 0;
    for (int n : nums) {
        sum += n;
    }
    
    double target = sum / 2;
    sum = 0;
    
    for (int i : nums) {
        sum += i;
        if (sum == target) {
            return true;
        }
    }
    return false;
}
",
9e81d1a2a7638c14b721846f5090b36ad07ab308,"public int[] seriesUp(int n)
{
    int[] result = new int[(n * (n + 1)) / 2];
    int count = 1;
    int index = 0;
    for (int i = 0; i < result.length; i++)
    {
        for (int j = 0; j < count; j++)
        {
            result[index] = j;
        	index++;
        }
        count++;
    }
}
",
987f265fb4f09a7db40586aa6a321d7c612fa526,"public boolean has77(int[] nums)
{
    int count = 0;
    
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] == 7 && nums[i+1] == 7)
        {
            count = 1;
        }
        else if (nums[i] == 7 && nums[i+2] == 7 && i < nums.length - 3)
        {
            count = 1;
        }
    }
    // okay, another approach is to check if there are two 7's.
    // if there are, store their [] as variables
    // if the difference between them is greater than 2, then false
    
    return (count == 1);
}
",
afec4a1fda7760651e34095e9ceef8a8483018be,"public boolean sameEnds(int[] nums, int n)
{
    
    for (int i = 0; i <= n; i++)
    {
        if (nums[i] != nums[nums.length - n + i - 1])
        {
            return false;
        }
    }
    return true;
}
",
ecef8ffff5f622c9ab6799c53c46541bd578254a,"public int sum67(int[] nums)
{
    int sum = 0;
    boolean ifSix = false;
    for (int i = 0; i < nums.length; i++)
    {
        if (ifSix)
        {
            if (nums[i] == 7)
                ifSix = false;
        }
        else if (nums[i] == 6)
        {
            ifSix = true;
        }
        //if ifSix is true, then it goes back into the for loop 
        //and the first if statement becomes true
        else
        {
            sum = sum + nums[i];
        }
        //takes the sum of the numbers when there is no linee of numbers starting
        //with a 6 and ending with a 7
    }
    return sum;
}
",
3d4c98b74adf52d4ca5fe21febb24b1a8f6a6120,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++) {
        if (nums[i] != val && nums[i + 1] != val) {
            return false;
        }
    }
    return true;
}
",
f720cc450f616d826f746ce4609c79ab1860b68a,"public int[] fizzArray(int n)
{
    int[] result = new int[n];
        for (int i = 0; i<n.length;i++)
        {
            result[i-1] = i;
        }
    return result;
}
",
0eefe10c954547a7675d5ee81f88d4d112cf44e9,"public boolean bobThere(String str)
{
    for (int i = 0; i < str.length() - 2; i++) {
        if (str.charAt(i) == 'b' && str.charAt(i + 2) == 'b') {
            return true;
        }
    }
    return false;
}
",
1ac085374f785c20ca501ac5939ec5977db8a972,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
    if (isAsleep)
    {
        return false;
    }
    
    if (isMorning)
    {
 		return false;   
    }
    
    return true;
}
",
c6e135a8d819808a2e86f6eb184fd9701ef4cea6,"public int[] withoutTen(int[] nums)
{
    //creates new array
    int[] newArray = new int[nums.length];
	int j = 0;
	for(int i = 0; i < nums.length; i++)
	{
		if(nums[i] != 10)
		{
			newArray[j] = nums[i];
			j++;
		}
	}
	// returns the new array
	return newArray;
}
",
bbf414c607917bae018f323952576cc4855d0403,"public int[] fix45(int[] nums)
{
    int[] fours = new int [3];
    int[] fives = new int[3];
    int index4=0;
    int index5 = 0;
    for (int i=0; i<nums.length;i++)
    {
        if (nums[i] == 4)
        {
            fours[index4] = i;
            index4++;
        }
        else if (nums[i] == 5)
        {
            fives[index5] = i;
            index5++;
        }
    }
    for (int i = index5-1; i>=0;i--)
    {
        if (nums[fours[i]+1]!=5)
        {
        	nums[fives[i]] = nums[fours[i]+1];
        	nums[fours[i]+1] = 5;
        }
    }
    
    
    
    
    //int start = 0;
    //int skip = -1;
    //for (int i=0; i<nums.length;i++)
    //{
    //    if (nums[i] == 4)
    //    {
    //        for (int j=start; j<nums.length;j++)
   	//		{
    //            if (j!=skip && nums[j]==5)
    //            {
    //                nums[j]=nums[i+1];
    //                nums[i+1]=5;
    //                skip = i+1;
    //                break;
    //            }
    //        }
    //    }
    //}
    return nums;
}
",
987f265fb4f09a7db40586aa6a321d7c612fa526,"public boolean has77(int[] nums)
{
    int count = 0;
    
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] == 7 && nums[i+1] == 7)
        {
            count = 1;
        }
        else if (nums[i] == 7 && nums[i+2] == 7 && i < nums.length - 3)
        {
            count = 1;
        }
    }
    // okay, another approach is to check if there are two 7's.
    // if there are, store their [] as variables
    // if the difference between them is greater than 2, then false
    
    return (count == 1);
}
",
f720cc450f616d826f746ce4609c79ab1860b68a,"public int[] fizzArray(int n)
{
    int[] result = new int[n];
        for (int i = 0; i<n.length;i++)
        {
            result[i-1] = i;
        }
    return result;
}
",
07e5044ee85fdfbd00a05896e4320766869d1163,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
3d4c98b74adf52d4ca5fe21febb24b1a8f6a6120,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++) {
        if (nums[i] != val && nums[i + 1] != val) {
            return false;
        }
    }
    return true;
}
",
9c1b24f0268b9d5238feaf59114da5d3b827e88f,"public boolean bobThere(String str)
{
    for (int i = 0; i < str.length() - 2; i++) 
    {
    if (str.charAt(i) == 'b' && str.charAt(i + 2) == 'b')
    {
        return true;
    }
    }
    return false;
}
",
f7613e1314baffe2be7c9164f5586a14e6e82fd6,"public int countCode(String str)
{
    int count = 0;
    for (int i = 0; i < str.length() - 4; i++) {
        if (str.substring(i, i + 1).equals(""co"") && str.charAt(i + 3) == 'e') {
            count++;
        }
    }
    return count;
}
",
56cccc5e57b71638ae0f36747e6ae090dc81fe2d,"public int sum67(int[] nums)
{
    int count = 0;
    int seven = 0;
    
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] == 6)
        {
           for (int x = i + 1; x < nums.length; x++)
           {
               if (nums[x] != 7)
               {
                   count = count + 0;
               }
               else if (nums[x] == 7)
               {
                   count = count + 0;
                   i = i + x;
               }
           }
        
        }
        else
        {
        count = count + nums[i];
        }
        // i'm stuck on excluding numbers up till 7.
        // okay, i'm trying to say:
        // when you reach a 6, ignore the 6.
        // then, ignore each number until you reach a 7.
        
        // so perhaps the smarter way to state this is:
        // ahhh maybe a separate int to count 7's?
        
        // i'm thinking in the way the problem is laid out for me, where
        // i'm supposed to ""ignore"" sections of numbers
        
        // maybe just fucking count them all and ignore the ones in between 6 and 7
        
       
        
    }
    
    return count;
}

",
c1fdbe3e9fca73de72f1831d00c35304cb29463e,"public int[] fizzArray(int n)
{
    int[] result = new int[n];
    for (int i = 0; i < n; i++)
    {
        result[i] = i;
    }
    return result;
}
",
eee0eb76d7c982f7cdbbfb86dbf032940b49e38b,"public int luckySum(int a, int b, int c)
{
    if (a == 13) // if a is equal to 13
        return 0;
    if (b == 13) // if b is equal to 13 go to the a value
        return a;
    if (c == 13) //if c is 13, only add  and b
        return (a + b);
    return (a + b + c); //if none of the others,add all the numbers
}
",
eb9d1e97323f6c0c1410dd8ae35aa261280fc389,"public boolean endOther(String a, String b)
{
    a = a.toLowerCase();
    b = a.toLowerCase();
    return(a.endsWith(b) || b.endsWith(a));
    
    
}
",
3da6d13c5e129585a85f09cc153cb57358bb6316,"public String without2(String str) 
{
    if (str.length() >= 2)
    {
        if (str.substring(0,2).equals(str.substring(str.length() - 2)))
        {
            return str.substring(2);
            // if the two letters at the beginning of the word and at the end of the word are equal to each other, the string will returned with these two letters
        }
        else
        {
            return str;
            // if the two letters are not equal to each other, then the original string will be returned
        }
    }
    else
    {
        return str;
        //if the word is only two letters or less, it will return the original string 
    }
}
",
a641c5efbb7e5f53f92580571992aa0a53d6cdf6,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
3a5b1294ef5b59964830e8cf8f6219db0c34b7d8,"public int blackjack(int a, int b)
{
    double remainA;
    remainA = (a % 21); //NOTE: The '%' yields the remainder!!!!
    double remainB;
    remainB =  (b % 21);
    
    // IF the remainder is large for one number, IT IS FAR AWAY from 21.
    if (a > 21 && b > 21)
    {
        return 0;
    }
    else if (a < 21 || b < 21)
    {
        if (a < 21 && b > 21)
        {
            return a;
        }
        else
        {
            return b;
        }
    }
    else
    {
        if (remainA > remainB)
        {
            return b;
        }
        else
        {
            return a;
        }
    }
}",
7862665265faf85e50ada49c030c401c79b4301c,"public boolean sameEnds(int[] nums, int n)
{
    for (int i = 0; i < n; i++)
    {
        if (nums[i] != nums[nums.length - (n - i)])
        {
            return false;
        }
    }
    
    return true;
}
",
eb9d1e97323f6c0c1410dd8ae35aa261280fc389,"public boolean endOther(String a, String b)
{
    a = a.toLowerCase();
    b = a.toLowerCase();
    return(a.endsWith(b) || b.endsWith(a));
    
    
}
",
f720cc450f616d826f746ce4609c79ab1860b68a,"public int[] fizzArray(int n)
{
    int[] result = new int[n];
        for (int i = 0; i<n.length;i++)
        {
            result[i-1] = i;
        }
    return result;
}
",
afec4a1fda7760651e34095e9ceef8a8483018be,"public boolean sameEnds(int[] nums, int n)
{
    
    for (int i = 0; i <= n; i++)
    {
        if (nums[i] != nums[nums.length - n + i - 1])
        {
            return false;
        }
    }
    return true;
}
",
708073e053068889622d8588b7bec2ceea644404,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
5774f2b700d8dfc9f30cd922b782e6b4d38d8924,"public boolean in1To10(int n, boolean outsideMode)
{
    if (outsideMode)
    {
        return (n <= 1 || n >= 10);
    }
    
    return (n >= 1 && n <= 10);
}
",
eee0eb76d7c982f7cdbbfb86dbf032940b49e38b,"public int luckySum(int a, int b, int c)
{
    if (a == 13) // if a is equal to 13
        return 0;
    if (b == 13) // if b is equal to 13 go to the a value
        return a;
    if (c == 13) //if c is 13, only add  and b
        return (a + b);
    return (a + b + c); //if none of the others,add all the numbers
}
",
0eefe10c954547a7675d5ee81f88d4d112cf44e9,"public boolean bobThere(String str)
{
    for (int i = 0; i < str.length() - 2; i++) {
        if (str.charAt(i) == 'b' && str.charAt(i + 2) == 'b') {
            return true;
        }
    }
    return false;
}
",
14ced47f38f6da0c3afcc08c0bcb9ed96b5c73fe,"public String getSandwich(String str)
{
    if (str.indexOf(""bread"") > 0) // if there are two peices of bread
    {
         System.out.print(str.indexOf(""bread""));
        return ""no"";
    }
    else
    {
        return """";
    }
}
",
ec03a0ab16a221fcf9292fec81dde347af81b619,"public String repeatEnd(String str, int n)
{
StringBuffer result = new StringBuffer();
String end = str.substring(str.length() - n);

for(int i = 0; i < n; i++)
result.append(end);

return result.toString(
}
",
45bb0c43390b2898deab9a359cdda85e43e43e39,"public int[] shiftLeft(int[] nums)
{
    int[] result = new int[nums.length];
    for (int i = 0; i< nums.length - 1; i++)
    {
		result[i] = nums[i+1];
    }
    result[nums.length - 1] = nums[0];
    
    return result;
}
",
e05151e763b22c6322f72dd9558578b0970a10d6,"public boolean canBalance(int[] nums)
{
    double sum = 0;
    for (int n : nums) {
        sum += n;
    }
    
    double target = sum / 2;
    sum = 0;
    
    for (int i : nums) {
        sum += i;
        if (sum == target) {
            return true;
        }
    }
    return false;
}
",
b1734b84d9123cc28d3f62e758b480ab26ea8fb9,"public int sortaSum(int a, int b)
{
   int sum = a + b;
   if (sum >= 10 && sum <= 19)
   {
   		return 20; 
   }
   else
   {
   		return sum;
   }
}
",
de2b521aa2c62ce8dcb54219041aa20489dda3f4,"public int loneSum(int a, int b, int c)
{
    if (a == b && b == c)
        return 0;
    if (a == b)
        return c;
    if (b == c)
        return a;
    if (a == c)
        return b;
    return a + b + c;
}
",
98b41121a7f0c87d5746dc0ae2746596c4a8bb37,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
7ad991a24edd45eac9dde28ce5f6b6a462d3b44f,"public String without2(String str) 
{
    String endLetters;
    endLetters = str.substring(str.length() - 1, str.length()); // I don't know how many letters there are!!
    // ^ use a method that gets the length of a string. Use "".getLength - 1"" and ""- 2?""
    String startLetters;
    startLetters = str.substring(0, 1);
    
    String middleLetters;
    middleLetters = str.substring(2, str.length() - 3);
        
    if (endLetters == startLetters)
    {
        return middleLetters;
    }
    else 
    {
        return str;
    }
}
",
33e1684529896667b663d935101657bf9205ef10,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] != val && nums[i + 1] != val)
            return false;
    }
    return true;
}
",
6f326caf302bdfdbefc02faf1dc435ba9d9f04d6,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if ((nums[i] != val) && (nums[i + 1] != val))
        {
            return false;
        }          
        
    }
     return true;
}
",
2b92c031167d3664a0be5ab4cee6d5ad678ce824,"public int sum67(int[] nums)
{
    int count = 0;
    int seven = 0;
    
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] == 6)
        {
           for (int x = i; x < nums.length; x++)
           {
               if (nums[x] != 7)
               {
                   count = count + 0;
               }
               else if (nums[x] == 7)
               {
                   count = count + 0;
                   i = i + x;
               }
           }
        
        }
        
        count = count + nums[i];
        // i'm stuck on excluding numbers up till 7.
        // okay, i'm trying to say:
        // when you reach a 6, ignore the 6.
        // then, ignore each number until you reach a 7.
        
        // so perhaps the smarter way to state this is:
        // ahhh maybe a separate int to count 7's?
        
        // i'm thinking in the way the problem is laid out for me, where
        // i'm supposed to ""ignore"" sections of numbers
        
        // maybe just fucking count them all and ignore the ones in between 6 and 7
        
       
        
    }
    
    return count;
}

",
f8a88d04552686ba064b8db06f097f9921d6b1eb,"public boolean in1To10(int n, boolean outsideMode)
{
    if (outsideMode)
		return (n <= 1 || n >= 10);
	else
    return (n >= 1 && n <= 10);
}
",
b1ffd079f8c4294a66e06ad7d2fb2a7a8fbe7344,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
1246d82dc38af3da4d77890172a9d1890cc382a1,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
e782e855c718d5d72eb1c47b31cc0c9050d6b269,"public String without2(String str) 
{
    // Given a string, if a length 2 substring appears at both its beginning and end,
// return a string without the substring at the beginning, so ""HelloHe"" yields ""lloHe"".
// The substring may overlap with itself, so ""Hi"" yields """". Otherwise, return the original string unchanged.
public String without2(String str)
{
	int len = str.length();
	if(len >= 2)
	{
		if(str.substring(0,2).equals(str.substring(len-2, len)))
			return str.substring(2);
		else
			return str;
	}
	else
		return str;
}
}
",
dbbe2c6beeefd93c68c1cf77a6130ed4323b9aa3,"public int countEvens(int[] nums)
{
    int count = 0;
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] % 2 == 0)
        {
            count++;
        }
    }
    return count;
}
",
948b5b2528e52a0cd157a7b353521353f3da1fef,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
     return (isMom || (!(isAsleep)));

}
",
de2b521aa2c62ce8dcb54219041aa20489dda3f4,"public int loneSum(int a, int b, int c)
{
    if (a == b && b == c)
        return 0;
    if (a == b)
        return c;
    if (b == c)
        return a;
    if (a == c)
        return b;
    return a + b + c;
}
",
3da6d13c5e129585a85f09cc153cb57358bb6316,"public String without2(String str) 
{
    if (str.length() >= 2)
    {
        if (str.substring(0,2).equals(str.substring(str.length() - 2)))
        {
            return str.substring(2);
            // if the two letters at the beginning of the word and at the end of the word are equal to each other, the string will returned with these two letters
        }
        else
        {
            return str;
            // if the two letters are not equal to each other, then the original string will be returned
        }
    }
    else
    {
        return str;
        //if the word is only two letters or less, it will return the original string 
    }
}
",
56cccc5e57b71638ae0f36747e6ae090dc81fe2d,"public int sum67(int[] nums)
{
    int count = 0;
    int seven = 0;
    
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] == 6)
        {
           for (int x = i + 1; x < nums.length; x++)
           {
               if (nums[x] != 7)
               {
                   count = count + 0;
               }
               else if (nums[x] == 7)
               {
                   count = count + 0;
                   i = i + x;
               }
           }
        
        }
        else
        {
        count = count + nums[i];
        }
        // i'm stuck on excluding numbers up till 7.
        // okay, i'm trying to say:
        // when you reach a 6, ignore the 6.
        // then, ignore each number until you reach a 7.
        
        // so perhaps the smarter way to state this is:
        // ahhh maybe a separate int to count 7's?
        
        // i'm thinking in the way the problem is laid out for me, where
        // i'm supposed to ""ignore"" sections of numbers
        
        // maybe just fucking count them all and ignore the ones in between 6 and 7
        
       
        
    }
    
    return count;
}

",
faa6cc44696d72e0fa85cc561584a1de159a4aa5,"public int dateFashion(int you, int date)
{
    if (you <= 2 || date <= 2)
        return 0;
    if (you >= 8 || date >= 8)
        return 2;
    return 1;
}
",
59a0088f887207b9450033d0bec152a0c9e18bab,"public int[] shiftLeft(int[] nums)
{
    int[] result = new int[nums.length]; 
    result[nums.length - 1] = nums[0]; 
    int j = 0; 
    for (int i = 1; i < nums.length - 1; i++)
    {
        result[j] = nums[i];
        j++; 
    }
    
    return result; 
}
",
14ced47f38f6da0c3afcc08c0bcb9ed96b5c73fe,"public String getSandwich(String str)
{
    if (str.indexOf(""bread"") > 0) // if there are two peices of bread
    {
         System.out.print(str.indexOf(""bread""));
        return ""no"";
    }
    else
    {
        return """";
    }
}
",
324744e665f46a82492205626535ae0a59adced1,"public int countEvens(int[] nums)
{
    int count = 0;
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] % 2 == 0)
        {
            count++;
        }
    }
    return count;
}
",
83a239f0521cd38117ddbaaf228f8523a019cc40,"public boolean endOther(String a, String b)
{
    return a.toLowerCase().endsWith(b.toLowerCase()) || b.toLowerCase().endsWith(a.toLowerCase());
}
",
80b80a660b8113337e5dc1d8d8d78cd8c918c58c,"public int[] seriesUp(int n)
{
    int[] result = new int[n*(n+1)/2];
    int m = 0;
    for (int i = 0;i<=n;i++)
    {
        for (int j = 1;j<i;j++, m++)
        {
            result[m] = j;
        }
        return result;
    }
}",
b05268e4079f92fa8c479a385b128576976d16c9,"public String atFirst(String str)
{
    String result = str.substring(0, 2);
    
    String value = '@';
    
    if (result.length() == 0)
    {
        result.charAt(0) = '@';
        result(1) = '@';
    }
    else if (result.length() == 1)
    {
        result(1) = '@';
    }
    else
    {
        result = result;
    }
    
    return result;
}
",
cdf42d5c2d560cf867cc0f628e892b8731b4a6c5,"public boolean twoTwo(int[] nums)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] == 2 && nums[i+1] == 2)
        {
            return true;
        }
    }
    return false;;
}
",
9e81d1a2a7638c14b721846f5090b36ad07ab308,"public int[] seriesUp(int n)
{
    int[] result = new int[(n * (n + 1)) / 2];
    int count = 1;
    int index = 0;
    for (int i = 0; i < result.length; i++)
    {
        for (int j = 0; j < count; j++)
        {
            result[index] = j;
        	index++;
        }
        count++;
    }
}
",
9df1cbdbe2059e87bcede6e1d1033ffff3e609ed,"public int[] withoutTen(int[] nums)
{
  	int[] result = new int[nums.length];
  	int count = 0;
  	
    for (int i = 0; i < nums.length; i++)
    {
     	if (nums[i] != 10)
        {
         	result[count] = nums[i];
            count++;
        }
    }
    for (int i = 0; i < count; i++)
    {
     	result[result.length - i] = 0;
    }
    
    return result;
}
",
f8a88d04552686ba064b8db06f097f9921d6b1eb,"public boolean in1To10(int n, boolean outsideMode)
{
    if (outsideMode)
		return (n <= 1 || n >= 10);
	else
    return (n >= 1 && n <= 10);
}
",
4465ac2e7e70f3ac5ddbd490bd262cc0c4f6249d,"public int[] frontPiece(int[] nums)
{
    int [] grid = new int[2];
    
    // establish logi for checking nums.
    // add the proper elements of nums into a new array 
    if (nums.length == 1)
    {
        return grid[0] = nums[0];
    }
    else if (nums.length == 0)
    {
        return grid;
    }
    else
    {
        grid[0] = nums[0];
        grid[1] = nums[1];
        return grid[];
    }
}
",
b1734b84d9123cc28d3f62e758b480ab26ea8fb9,"public int sortaSum(int a, int b)
{
   int sum = a + b;
   if (sum >= 10 && sum <= 19)
   {
   		return 20; 
   }
   else
   {
   		return sum;
   }
}
",
8a784cb08df86d4814219f2b557c5cfa0f28180c,"public boolean cigarParty(int cigars, boolean isWeekend)
{
    if (isWeekend)
    {
        return (cigars >= 40);
    else
    {
        return (cigars >= 40 && cigars <= 60);
    }
}
",
ecd2767c2649044a0da26903ef340674e89f1009,"public int[] fix45(int[] nums) {
  int[] result = nums;
  for(int i = 0; i < result.length; i++) {
      if(result[i] == 4 && i != result.length) {
          int index = findIndexOfValidFive(result);
           
          if(index != -1) {
              int temp = result[i + 1];
              result[i + 1] = result[index];
              result[index] = temp;
          }
      }
  }  
   
  return result;
}
 
public int findIndexOfValidFive(int[] nums) {
    for(int i = 0; i < nums.length; i++) {
        if((i == 0 && nums[i] == 5) || (nums[i] == 5 && nums[i - 1] != 4)) {
            return i;
        }
    }
     
    return -1;",
708073e053068889622d8588b7bec2ceea644404,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
324744e665f46a82492205626535ae0a59adced1,"public int countEvens(int[] nums)
{
    int count = 0;
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] % 2 == 0)
        {
            count++;
        }
    }
    return count;
}
",
e1377201338b35fe171b9444b54cc7c825b47de7,"public int greenTicket(int a, int b, int c)
{
    if (a == b && b == c) //if two numbers are the same
        return 20;
    if (a == b || a == c || b == c) //if all the numbers are the same
        return 10;
    else //none of the numbers are the same
        return 0;
}
",
1246d82dc38af3da4d77890172a9d1890cc382a1,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
c4cd9fb76f3a67d4e774521d2a07bd1fe7cd0b11,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
948b5b2528e52a0cd157a7b353521353f3da1fef,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
     return (isMom || (!(isAsleep)));

}
",
3da6d13c5e129585a85f09cc153cb57358bb6316,"public String without2(String str) 
{
    if (str.length() >= 2)
    {
        if (str.substring(0,2).equals(str.substring(str.length() - 2)))
        {
            return str.substring(2);
            // if the two letters at the beginning of the word and at the end of the word are equal to each other, the string will returned with these two letters
        }
        else
        {
            return str;
            // if the two letters are not equal to each other, then the original string will be returned
        }
    }
    else
    {
        return str;
        //if the word is only two letters or less, it will return the original string 
    }
}
",
2ab613317018e535c7c370e1bf3fb0d86c7a9f9b,"public int[] tenRun(int[] nums)
{
    int[] result = new int[nums.length];
    int input;
    int value = -1;
    
    for (int i = 0; i < nums.length; i++)
    {
        input = nums[i];
        
        if (input % 10 == 0 && input > value)
        {
            value = input;
        }
        
        if (value == -1)
        {
            result[i] = input;
        }
        else
        {
            result[i] = value;
        }
    }
    
    return result;
}
",
f720cc450f616d826f746ce4609c79ab1860b68a,"public int[] fizzArray(int n)
{
    int[] result = new int[n];
        for (int i = 0; i<n.length;i++)
        {
            result[i-1] = i;
        }
    return result;
}
",
cfc6cb87b23f11a2f4bbbf92a708643e8012b8fb,"public int countEvens(int[] nums)
{	
    int count = 0;
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] % 2 == 0))
        {
            count++;
        }
    }
    return count;
}
",
4c1142050564d6fd24a50c0eba830e56d9f3c3cb,"public int sum3(int[] nums)
{
    int total = nums[1] + nums[2] + nums[3];
    return total;
}
",
db19ea5f1cabdb8d39c12a6acfc593bd85bf4f95,"public int[] tenRun(int[] nums)
{
    for (int i = 0; i < nums.length; i++)
    {
    	if (nums[i] % 10 == 0)
    	{
     	   for (int j = i + 1; j < nums.length && nums[j] % 10 != 0; j++)
           {
            	nums[j] = nums[i];   
           }
    	}
    }
    return nums;
}
",
fa7e52a8dd82b9e07db5c24a9f6640028d267b37,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] != val && nums[i + 1] != val)
        {
            return false;
        }
    }
    return true;
}
",
b18357d08d239c3169eb42bdabc04d80a3bba5bf,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
    if (isAsleep) 
    {
        return false;
    }
    if (isMorning && !isMom) 
    {
        return false;
    }
    return true;
}
",
9c1b24f0268b9d5238feaf59114da5d3b827e88f,"public boolean bobThere(String str)
{
    for (int i = 0; i < str.length() - 2; i++) 
    {
    if (str.charAt(i) == 'b' && str.charAt(i + 2) == 'b')
    {
        return true;
    }
    }
    return false;
}
",
93d04bbaaacbdc2e43e79af8101e3443d99f3216,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
eee0eb76d7c982f7cdbbfb86dbf032940b49e38b,"public int luckySum(int a, int b, int c)
{
    if (a == 13) // if a is equal to 13
        return 0;
    if (b == 13) // if b is equal to 13 go to the a value
        return a;
    if (c == 13) //if c is 13, only add  and b
        return (a + b);
    return (a + b + c); //if none of the others,add all the numbers
}
",
6e2e62d18f30974998599ac300549d4eb85fb22c,"public static int[] fizzArray(int n) {

//initializing integer array with size n

int[] result = new int[n];

for (int i = 0; i < n; i++){

result[i] = i;

}

return result;

}
",
c3f23ac2ec5c833dc9221dad8b3933a5ab317603,"public boolean cigarParty(int cigars, boolean isWeekend)
{
    if (isWeekend)
        return (cigars >= 40);
    return (cigars >= 40 && cigars <= 60);
    
          
}
",
bbf414c607917bae018f323952576cc4855d0403,"public int[] fix45(int[] nums)
{
    int[] fours = new int [3];
    int[] fives = new int[3];
    int index4=0;
    int index5 = 0;
    for (int i=0; i<nums.length;i++)
    {
        if (nums[i] == 4)
        {
            fours[index4] = i;
            index4++;
        }
        else if (nums[i] == 5)
        {
            fives[index5] = i;
            index5++;
        }
    }
    for (int i = index5-1; i>=0;i--)
    {
        if (nums[fours[i]+1]!=5)
        {
        	nums[fives[i]] = nums[fours[i]+1];
        	nums[fours[i]+1] = 5;
        }
    }
    
    
    
    
    //int start = 0;
    //int skip = -1;
    //for (int i=0; i<nums.length;i++)
    //{
    //    if (nums[i] == 4)
    //    {
    //        for (int j=start; j<nums.length;j++)
   	//		{
    //            if (j!=skip && nums[j]==5)
    //            {
    //                nums[j]=nums[i+1];
    //                nums[i+1]=5;
    //                skip = i+1;
    //                break;
    //            }
    //        }
    //    }
    //}
    return nums;
}
",
07e5044ee85fdfbd00a05896e4320766869d1163,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
14ced47f38f6da0c3afcc08c0bcb9ed96b5c73fe,"public String getSandwich(String str)
{
    if (str.indexOf(""bread"") > 0) // if there are two peices of bread
    {
         System.out.print(str.indexOf(""bread""));
        return ""no"";
    }
    else
    {
        return """";
    }
}
",
a641c5efbb7e5f53f92580571992aa0a53d6cdf6,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
45bb0c43390b2898deab9a359cdda85e43e43e39,"public int[] shiftLeft(int[] nums)
{
    int[] result = new int[nums.length];
    for (int i = 0; i< nums.length - 1; i++)
    {
		result[i] = nums[i+1];
    }
    result[nums.length - 1] = nums[0];
    
    return result;
}
",
f1f0a6448bfe3ad005796a40633fc50d6ffa6023,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
d3bbd5372c67b93d7e4c5f3425ac793bb5763980,"public int sortaSum(int a, int b)
{
    int sum = a + b;
    if (sum >= 10 && sum <= 19)
        return 20;
    return sum;
}
",
ec03a0ab16a221fcf9292fec81dde347af81b619,"public String repeatEnd(String str, int n)
{
StringBuffer result = new StringBuffer();
String end = str.substring(str.length() - n);

for(int i = 0; i < n; i++)
result.append(end);

return result.toString(
}
",
100f26d18ee4e0e1619542ed10f1e83b537d6b04,"public int sum3(int[] nums)
{
    sum = sum3[0];
    sum+=sum3[1];
    sum+=sum3[2];
    return sum;
}
",
7ad991a24edd45eac9dde28ce5f6b6a462d3b44f,"public String without2(String str) 
{
    String endLetters;
    endLetters = str.substring(str.length() - 1, str.length()); // I don't know how many letters there are!!
    // ^ use a method that gets the length of a string. Use "".getLength - 1"" and ""- 2?""
    String startLetters;
    startLetters = str.substring(0, 1);
    
    String middleLetters;
    middleLetters = str.substring(2, str.length() - 3);
        
    if (endLetters == startLetters)
    {
        return middleLetters;
    }
    else 
    {
        return str;
    }
}
",
3da6d13c5e129585a85f09cc153cb57358bb6316,"public String without2(String str) 
{
    if (str.length() >= 2)
    {
        if (str.substring(0,2).equals(str.substring(str.length() - 2)))
        {
            return str.substring(2);
            // if the two letters at the beginning of the word and at the end of the word are equal to each other, the string will returned with these two letters
        }
        else
        {
            return str;
            // if the two letters are not equal to each other, then the original string will be returned
        }
    }
    else
    {
        return str;
        //if the word is only two letters or less, it will return the original string 
    }
}
",
f7613e1314baffe2be7c9164f5586a14e6e82fd6,"public int countCode(String str)
{
    int count = 0;
    for (int i = 0; i < str.length() - 4; i++) {
        if (str.substring(i, i + 1).equals(""co"") && str.charAt(i + 3) == 'e') {
            count++;
        }
    }
    return count;
}
",
faa6cc44696d72e0fa85cc561584a1de159a4aa5,"public int dateFashion(int you, int date)
{
    if (you <= 2 || date <= 2)
        return 0;
    if (you >= 8 || date >= 8)
        return 2;
    return 1;
}
",
f720cc450f616d826f746ce4609c79ab1860b68a,"public int[] fizzArray(int n)
{
    int[] result = new int[n];
        for (int i = 0; i<n.length;i++)
        {
            result[i-1] = i;
        }
    return result;
}
",
1ac085374f785c20ca501ac5939ec5977db8a972,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
    if (isAsleep)
    {
        return false;
    }
    
    if (isMorning)
    {
 		return false;   
    }
    
    return true;
}
",
dc8066a4ce0e948c3507c575f5e9322070445254,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
    if (!isAsleep) {
        if (isMom || !isMorning) {
            return true;
        }
        return false;
    }
    return false;
}
",
54f16f3c5196c9d23444381409e354f9fae465c0,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
83a9aaf35a8972085b71c5e056de43a7db192899,"public int[] fizzArray(int n)
{
    int[] result = new int[n];
        for (int i = 0; i<n;i++)
        {
            result[i-1] = i;
        }
    return result;
}
",
c80cbf206a19a4ae8b3792d3f4b4c3252c0e3b34,"public int[] fizzArray(int n) {

    int[] result = new int[n];

    for (int i = 0; i < n; i++)

        result[i] = i;

    return result;

}
",
0e68a96660515e0852bbeffb5ec3b3954d4b1625,"public int[] seriesUp(int n)
{
     int[] result = new int[n * (n + 1) / 2];
 	 int initial = 0;
 	 for (int j = 1; j <= n; j++)
     {
    	for (int k = 1; k <= j; k++)
        {
      		result[initial ++] = k;
        }
     }
  return result;

}
",
948b5b2528e52a0cd157a7b353521353f3da1fef,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
     return (isMom || (!(isAsleep)));

}
",
6e2e62d18f30974998599ac300549d4eb85fb22c,"public static int[] fizzArray(int n) {

//initializing integer array with size n

int[] result = new int[n];

for (int i = 0; i < n; i++){

result[i] = i;

}

return result;

}
",
b1734b84d9123cc28d3f62e758b480ab26ea8fb9,"public int sortaSum(int a, int b)
{
   int sum = a + b;
   if (sum >= 10 && sum <= 19)
   {
   		return 20; 
   }
   else
   {
   		return sum;
   }
}
",
b18357d08d239c3169eb42bdabc04d80a3bba5bf,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
    if (isAsleep) 
    {
        return false;
    }
    if (isMorning && !isMom) 
    {
        return false;
    }
    return true;
}
",
8c0f9dcd704011cbf52cb5dc21ee56f487e61fcd,"public int sortaSum(int a, int b)
{
int sum = a + b;
	if(sum >= 10 && sum <= 19)
		return 20;
	return sum;
    
}
",
4ba46181a66bb2f3cf45d38876db8736b1ebda46,"public boolean in1To10(int n, boolean outsideMode)
{
    return ((n >= 1 && n<=10 && !outsideMode) || (n > 10 || n < 1 && outsideMode));
}
",
362a2f0a626da6c1866ddc7e6c299b4172cc1539,"public int sortaSum(int a, int b)
{
	int sum = a + b;
	if(sum >= 10 && sum <= 19)
		return 20;
	return sum;
}
",
33e1684529896667b663d935101657bf9205ef10,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] != val && nums[i + 1] != val)
            return false;
    }
    return true;
}
",
9e81d1a2a7638c14b721846f5090b36ad07ab308,"public int[] seriesUp(int n)
{
    int[] result = new int[(n * (n + 1)) / 2];
    int count = 1;
    int index = 0;
    for (int i = 0; i < result.length; i++)
    {
        for (int j = 0; j < count; j++)
        {
            result[index] = j;
        	index++;
        }
        count++;
    }
}
",
07e5044ee85fdfbd00a05896e4320766869d1163,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
23b5ec2ba8fe6b1ec171faaa28bcd140793480f8,"public int[] seriesUp(int n) {
  int[] result = new int[n * (n + 1) / 2];
  int i = 0;
  for (int j = 1; j <= n; ++j)
    for (int k = 1; k <= j; ++k)
      result[i++] = k;
  return result;
}",
7d2cc44f9ddcd55a93d3738c84d32d272d1abe0d,"public int[] seriesUp(int n)
{
     int[] result = new int[n * (n + 1) / 2];
 	 int i = 0;
 	 for (int j = 1; j <= n; j++)
     {
    	for (int k = 1; k <= j; k++)
        {
      		result[i++] = k;
        }
     }
  return result;

}
",
987f265fb4f09a7db40586aa6a321d7c612fa526,"public boolean has77(int[] nums)
{
    int count = 0;
    
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] == 7 && nums[i+1] == 7)
        {
            count = 1;
        }
        else if (nums[i] == 7 && nums[i+2] == 7 && i < nums.length - 3)
        {
            count = 1;
        }
    }
    // okay, another approach is to check if there are two 7's.
    // if there are, store their [] as variables
    // if the difference between them is greater than 2, then false
    
    return (count == 1);
}
",
9df1cbdbe2059e87bcede6e1d1033ffff3e609ed,"public int[] withoutTen(int[] nums)
{
  	int[] result = new int[nums.length];
  	int count = 0;
  	
    for (int i = 0; i < nums.length; i++)
    {
     	if (nums[i] != 10)
        {
         	result[count] = nums[i];
            count++;
        }
    }
    for (int i = 0; i < count; i++)
    {
     	result[result.length - i] = 0;
    }
    
    return result;
}
",
dfebf4d3ccb1c45c713e88e11542556ee4a55d1e,"public int[] seriesUp(int n)
{
    int[] result = new int[n * (n + 1)/2];
    int k = 0;
	for(int i = 1; i <= n; i++)
	{
		for(int j = 1; j <= i; j++)
        {
			result[k] = j;
            k++;
        }
	}
    return result;
}
",
93d04bbaaacbdc2e43e79af8101e3443d99f3216,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
faa6cc44696d72e0fa85cc561584a1de159a4aa5,"public int dateFashion(int you, int date)
{
    if (you <= 2 || date <= 2)
        return 0;
    if (you >= 8 || date >= 8)
        return 2;
    return 1;
}
",
59a0088f887207b9450033d0bec152a0c9e18bab,"public int[] shiftLeft(int[] nums)
{
    int[] result = new int[nums.length]; 
    result[nums.length - 1] = nums[0]; 
    int j = 0; 
    for (int i = 1; i < nums.length - 1; i++)
    {
        result[j] = nums[i];
        j++; 
    }
    
    return result; 
}
",
db19ea5f1cabdb8d39c12a6acfc593bd85bf4f95,"public int[] tenRun(int[] nums)
{
    for (int i = 0; i < nums.length; i++)
    {
    	if (nums[i] % 10 == 0)
    	{
     	   for (int j = i + 1; j < nums.length && nums[j] % 10 != 0; j++)
           {
            	nums[j] = nums[i];   
           }
    	}
    }
    return nums;
}
",
f8a88d04552686ba064b8db06f097f9921d6b1eb,"public boolean in1To10(int n, boolean outsideMode)
{
    if (outsideMode)
		return (n <= 1 || n >= 10);
	else
    return (n >= 1 && n <= 10);
}
",
44401b7a795caa5e1f94585e15dc8c88bdb84119,"public boolean isEverywhere(int[] nums, int val)
{	
    for (int i = 0; i < nums.length - 1; i++)
    {
        if ( nums[i] != val && nums[i+1] != val)
        {
            return false;
        }
    }
    return true;
}
",
a641c5efbb7e5f53f92580571992aa0a53d6cdf6,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
cfc6cb87b23f11a2f4bbbf92a708643e8012b8fb,"public int countEvens(int[] nums)
{	
    int count = 0;
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] % 2 == 0))
        {
            count++;
        }
    }
    return count;
}
",
708073e053068889622d8588b7bec2ceea644404,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
3da6d13c5e129585a85f09cc153cb57358bb6316,"public String without2(String str) 
{
    if (str.length() >= 2)
    {
        if (str.substring(0,2).equals(str.substring(str.length() - 2)))
        {
            return str.substring(2);
            // if the two letters at the beginning of the word and at the end of the word are equal to each other, the string will returned with these two letters
        }
        else
        {
            return str;
            // if the two letters are not equal to each other, then the original string will be returned
        }
    }
    else
    {
        return str;
        //if the word is only two letters or less, it will return the original string 
    }
}
",
a3cfe4acc0878f7a98ccbc168df9dff28266dbd7,"public int[] frontPiece(int[] nums)
{
    int [] grid = new int[2];
    
    // establish logi for checking nums.
    // add the proper elements of nums into a new array 
    if (nums.length == 1)
    {
        return grid[0] = nums[0];
    }
    else if (nums.length == 0)
    {
        return grid;
    }
    else
    {
        return grid[nums[0], nums[1]];
    }
}
",
f8a88d04552686ba064b8db06f097f9921d6b1eb,"public boolean in1To10(int n, boolean outsideMode)
{
    if (outsideMode)
		return (n <= 1 || n >= 10);
	else
    return (n >= 1 && n <= 10);
}
",
0eefe10c954547a7675d5ee81f88d4d112cf44e9,"public boolean bobThere(String str)
{
    for (int i = 0; i < str.length() - 2; i++) {
        if (str.charAt(i) == 'b' && str.charAt(i + 2) == 'b') {
            return true;
        }
    }
    return false;
}
",
07e5044ee85fdfbd00a05896e4320766869d1163,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
b1734b84d9123cc28d3f62e758b480ab26ea8fb9,"public int sortaSum(int a, int b)
{
   int sum = a + b;
   if (sum >= 10 && sum <= 19)
   {
   		return 20; 
   }
   else
   {
   		return sum;
   }
}
",
3d4c98b74adf52d4ca5fe21febb24b1a8f6a6120,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++) {
        if (nums[i] != val && nums[i + 1] != val) {
            return false;
        }
    }
    return true;
}
",
dea353e4fa8946278ebcfad2f8039a9f72b55b28,"public int sum3(int[] nums)
{
 return nums[0] + nums[1] + nums[2];   
}
",
987f265fb4f09a7db40586aa6a321d7c612fa526,"public boolean has77(int[] nums)
{
    int count = 0;
    
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] == 7 && nums[i+1] == 7)
        {
            count = 1;
        }
        else if (nums[i] == 7 && nums[i+2] == 7 && i < nums.length - 3)
        {
            count = 1;
        }
    }
    // okay, another approach is to check if there are two 7's.
    // if there are, store their [] as variables
    // if the difference between them is greater than 2, then false
    
    return (count == 1);
}
",
da986520180a13a98bb67c061d43bd9c2686e469,"public String alarmClock(int day, boolean vacation)
{
    if (vacation) { 
        if (day == 0 || day == 6) {
            return ""off"";
        } else {
            return ""10:00"";
        }
    } else {
        if (day == 0 || day == 6) {
            return ""10:00"";
        } else {
            return ""7:00"";
        }
    }
}
",
b7d5d5590bde31e23ee41e67ec8ade069279409e,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    if (isBirthday) speed >= 5;
    if (speed <= 60) return 0;
    return (speed > 60 && speed <= 80) ? 1 : 2;
}
",
8a4197cd94d2fc278a10045f02c9323393eb70ad,"public boolean sameEnds(int[] nums, int n)
{
    for (int i = 0; i < n; i++)
    {
        if (nums[i] != nums[nums.length - n + i])
            return false;
    }
    return true;
}
",
f1f0a6448bfe3ad005796a40633fc50d6ffa6023,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
9e81d1a2a7638c14b721846f5090b36ad07ab308,"public int[] seriesUp(int n)
{
    int[] result = new int[(n * (n + 1)) / 2];
    int count = 1;
    int index = 0;
    for (int i = 0; i < result.length; i++)
    {
        for (int j = 0; j < count; j++)
        {
            result[index] = j;
        	index++;
        }
        count++;
    }
}
",
21e89b678cc68f8c7a4233261dc10576fa87b0ae,"public int[] seriesUp(int n)
{
    int[] result = new int[n * (n + 1)/2];
    if (n == 0)
    {
        return result;
    }
    for	(int i = 1;i <= n; i++)
    {
        for (int a = 1; a <= i; a++)
        {
            result[i + a - 2] = a;
        }
    }
    return result;
}
",
45bb0c43390b2898deab9a359cdda85e43e43e39,"public int[] shiftLeft(int[] nums)
{
    int[] result = new int[nums.length];
    for (int i = 0; i< nums.length - 1; i++)
    {
		result[i] = nums[i+1];
    }
    result[nums.length - 1] = nums[0];
    
    return result;
}
",
e73e062870f1d171b59cd904b257c0d67d7c10f8,"public int[] seriesUp(int n)
{
    int[] result = new int[n * (n + 1)/2];
    if (n == 0)
    {
        return result;
    }
    for	(int i = 1;i <= n; i++)
    {
        for (int a = 1; a <= i; a++)
        {
            result[i + a - 1] = a;
        }
    }
    return result;
}
",
98b41121a7f0c87d5746dc0ae2746596c4a8bb37,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
db19ea5f1cabdb8d39c12a6acfc593bd85bf4f95,"public int[] tenRun(int[] nums)
{
    for (int i = 0; i < nums.length; i++)
    {
    	if (nums[i] % 10 == 0)
    	{
     	   for (int j = i + 1; j < nums.length && nums[j] % 10 != 0; j++)
           {
            	nums[j] = nums[i];   
           }
    	}
    }
    return nums;
}
",
f7613e1314baffe2be7c9164f5586a14e6e82fd6,"public int countCode(String str)
{
    int count = 0;
    for (int i = 0; i < str.length() - 4; i++) {
        if (str.substring(i, i + 1).equals(""co"") && str.charAt(i + 3) == 'e') {
            count++;
        }
    }
    return count;
}
",
a730369051672c668c3efc03eb8dcc6956e9beb3,"public int[] withoutTen(int[] nums)
{
    int[] arr = new int[nums.length];
	int p = 0;
	for(int i = 0; i < nums.length; i++)
	{
		if(nums[i] != 10)
		{
			arr[p] = nums[i];
			p++;
		}
	}
	// Java arrays are initialized to 0 so no need to set the last elements to 0
	return arr;
}
",
2b92c031167d3664a0be5ab4cee6d5ad678ce824,"public int sum67(int[] nums)
{
    int count = 0;
    int seven = 0;
    
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] == 6)
        {
           for (int x = i; x < nums.length; x++)
           {
               if (nums[x] != 7)
               {
                   count = count + 0;
               }
               else if (nums[x] == 7)
               {
                   count = count + 0;
                   i = i + x;
               }
           }
        
        }
        
        count = count + nums[i];
        // i'm stuck on excluding numbers up till 7.
        // okay, i'm trying to say:
        // when you reach a 6, ignore the 6.
        // then, ignore each number until you reach a 7.
        
        // so perhaps the smarter way to state this is:
        // ahhh maybe a separate int to count 7's?
        
        // i'm thinking in the way the problem is laid out for me, where
        // i'm supposed to ""ignore"" sections of numbers
        
        // maybe just fucking count them all and ignore the ones in between 6 and 7
        
       
        
    }
    
    return count;
}

",
9c1b24f0268b9d5238feaf59114da5d3b827e88f,"public boolean bobThere(String str)
{
    for (int i = 0; i < str.length() - 2; i++) 
    {
    if (str.charAt(i) == 'b' && str.charAt(i + 2) == 'b')
    {
        return true;
    }
    }
    return false;
}
",
c4fa96f9af07e09df6d1f3cc7c42be1e2029eb72,"public boolean sameEnds(int[] nums, int n)
{
        for(int i = 0; i < n; i++) {
        if(nums[i] != nums[nums.length - n + i])
            return false;
    }
                
    return true;
}
",
4ba46181a66bb2f3cf45d38876db8736b1ebda46,"public boolean in1To10(int n, boolean outsideMode)
{
    return ((n >= 1 && n<=10 && !outsideMode) || (n > 10 || n < 1 && outsideMode));
}
",
324744e665f46a82492205626535ae0a59adced1,"public int countEvens(int[] nums)
{
    int count = 0;
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] % 2 == 0)
        {
            count++;
        }
    }
    return count;
}
",
1246d82dc38af3da4d77890172a9d1890cc382a1,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
f0965dc5b01333c0db74c3b81e48129583709ad9,"public int sortaSum(int a, int b)
{
    int sum = (a + b);
    if (10 <= sum && sum <= 19)
    {
        return 20;
    }
    return sum;
}
",
9c1b24f0268b9d5238feaf59114da5d3b827e88f,"public boolean bobThere(String str)
{
    for (int i = 0; i < str.length() - 2; i++) 
    {
    if (str.charAt(i) == 'b' && str.charAt(i + 2) == 'b')
    {
        return true;
    }
    }
    return false;
}
",
a3cfe4acc0878f7a98ccbc168df9dff28266dbd7,"public int[] frontPiece(int[] nums)
{
    int [] grid = new int[2];
    
    // establish logi for checking nums.
    // add the proper elements of nums into a new array 
    if (nums.length == 1)
    {
        return grid[0] = nums[0];
    }
    else if (nums.length == 0)
    {
        return grid;
    }
    else
    {
        return grid[nums[0], nums[1]];
    }
}
",
37483792e65efa307aab5d74a47b4a1dbe36e195,"public boolean bobThere(String str)
{
    //int firstB = str.indexOf(""b"");
   // int secondB = str.lastIndexOf(""b"");
    //if (secondB == firstB + 2)
    //    return true;
   // return false;
    for (int n == 0; n < str.length(); n++)
    {
        if ((str.charAt(n) == str.indexOf(""b"") && (str.charAt(n + 2) == str.indexOf(""b"", n))
        {
            return true;
        }
                
    }//end for loop
    return false;
}
",
f0c481a9e07c60bea12e78a5079713f14b24c2a9,"public int blackjack(int a, int b)
{
    if(b > 21 && a < 21)
        return a;
    if(a>21 && b < 21)
        return b;
    if(a > b)
        return a;
    if (b > a)
        return a;
    return 0;
}
",
0eefe10c954547a7675d5ee81f88d4d112cf44e9,"public boolean bobThere(String str)
{
    for (int i = 0; i < str.length() - 2; i++) {
        if (str.charAt(i) == 'b' && str.charAt(i + 2) == 'b') {
            return true;
        }
    }
    return false;
}
",
f1f0a6448bfe3ad005796a40633fc50d6ffa6023,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
8a4197cd94d2fc278a10045f02c9323393eb70ad,"public boolean sameEnds(int[] nums, int n)
{
    for (int i = 0; i < n; i++)
    {
        if (nums[i] != nums[nums.length - n + i])
            return false;
    }
    return true;
}
",
faa6cc44696d72e0fa85cc561584a1de159a4aa5,"public int dateFashion(int you, int date)
{
    if (you <= 2 || date <= 2)
        return 0;
    if (you >= 8 || date >= 8)
        return 2;
    return 1;
}
",
f7613e1314baffe2be7c9164f5586a14e6e82fd6,"public int countCode(String str)
{
    int count = 0;
    for (int i = 0; i < str.length() - 4; i++) {
        if (str.substring(i, i + 1).equals(""co"") && str.charAt(i + 3) == 'e') {
            count++;
        }
    }
    return count;
}
",
dbbe2c6beeefd93c68c1cf77a6130ed4323b9aa3,"public int countEvens(int[] nums)
{
    int count = 0;
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] % 2 == 0)
        {
            count++;
        }
    }
    return count;
}
",
eb9d1e97323f6c0c1410dd8ae35aa261280fc389,"public boolean endOther(String a, String b)
{
    a = a.toLowerCase();
    b = a.toLowerCase();
    return(a.endsWith(b) || b.endsWith(a));
    
    
}
",
a730369051672c668c3efc03eb8dcc6956e9beb3,"public int[] withoutTen(int[] nums)
{
    int[] arr = new int[nums.length];
	int p = 0;
	for(int i = 0; i < nums.length; i++)
	{
		if(nums[i] != 10)
		{
			arr[p] = nums[i];
			p++;
		}
	}
	// Java arrays are initialized to 0 so no need to set the last elements to 0
	return arr;
}
",
afec4a1fda7760651e34095e9ceef8a8483018be,"public boolean sameEnds(int[] nums, int n)
{
    
    for (int i = 0; i <= n; i++)
    {
        if (nums[i] != nums[nums.length - n + i - 1])
        {
            return false;
        }
    }
    return true;
}
",
a730369051672c668c3efc03eb8dcc6956e9beb3,"public int[] withoutTen(int[] nums)
{
    int[] arr = new int[nums.length];
	int p = 0;
	for(int i = 0; i < nums.length; i++)
	{
		if(nums[i] != 10)
		{
			arr[p] = nums[i];
			p++;
		}
	}
	// Java arrays are initialized to 0 so no need to set the last elements to 0
	return arr;
}
",
6e2e62d18f30974998599ac300549d4eb85fb22c,"public static int[] fizzArray(int n) {

//initializing integer array with size n

int[] result = new int[n];

for (int i = 0; i < n; i++){

result[i] = i;

}

return result;

}
",
c80cbf206a19a4ae8b3792d3f4b4c3252c0e3b34,"public int[] fizzArray(int n) {

    int[] result = new int[n];

    for (int i = 0; i < n; i++)

        result[i] = i;

    return result;

}
",
9df1cbdbe2059e87bcede6e1d1033ffff3e609ed,"public int[] withoutTen(int[] nums)
{
  	int[] result = new int[nums.length];
  	int count = 0;
  	
    for (int i = 0; i < nums.length; i++)
    {
     	if (nums[i] != 10)
        {
         	result[count] = nums[i];
            count++;
        }
    }
    for (int i = 0; i < count; i++)
    {
     	result[result.length - i] = 0;
    }
    
    return result;
}
",
67e32e60ccf94c9e237b1ee60eec88d54337ee46,"public int noTeenSum(int a, int b, int c)
{
	return fixTeen(a) + fixTeen(b) + fixTeen(c);
}

public int fixTeen(int n)
{
    if (( n > 12 && n < 15) ||( n > 16 && n < 20 )) {
     return 0;
   }
   return n;
}
",
b7d5d5590bde31e23ee41e67ec8ade069279409e,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    if (isBirthday) speed >= 5;
    if (speed <= 60) return 0;
    return (speed > 60 && speed <= 80) ? 1 : 2;
}
",
ecef8ffff5f622c9ab6799c53c46541bd578254a,"public int sum67(int[] nums)
{
    int sum = 0;
    boolean ifSix = false;
    for (int i = 0; i < nums.length; i++)
    {
        if (ifSix)
        {
            if (nums[i] == 7)
                ifSix = false;
        }
        else if (nums[i] == 6)
        {
            ifSix = true;
        }
        //if ifSix is true, then it goes back into the for loop 
        //and the first if statement becomes true
        else
        {
            sum = sum + nums[i];
        }
        //takes the sum of the numbers when there is no linee of numbers starting
        //with a 6 and ending with a 7
    }
    return sum;
}
",
4ba46181a66bb2f3cf45d38876db8736b1ebda46,"public boolean in1To10(int n, boolean outsideMode)
{
    return ((n >= 1 && n<=10 && !outsideMode) || (n > 10 || n < 1 && outsideMode));
}
",
dbbe2c6beeefd93c68c1cf77a6130ed4323b9aa3,"public int countEvens(int[] nums)
{
    int count = 0;
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] % 2 == 0)
        {
            count++;
        }
    }
    return count;
}
",
1ac085374f785c20ca501ac5939ec5977db8a972,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
    if (isAsleep)
    {
        return false;
    }
    
    if (isMorning)
    {
 		return false;   
    }
    
    return true;
}
",
03847fc873ee3a75107c8aed7dbcefc0b1eac14a,"public int[] fizzArray(int n)
{

int[] result = new int[n];

for (int i = 0; i < n; i++){

	result[i] = i;

}

return result;
}
",
7862665265faf85e50ada49c030c401c79b4301c,"public boolean sameEnds(int[] nums, int n)
{
    for (int i = 0; i < n; i++)
    {
        if (nums[i] != nums[nums.length - (n - i)])
        {
            return false;
        }
    }
    
    return true;
}
",
9a762998ef3f0abdaeaa9e34d97d58d792cb6be4,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
    if (isAsleep)
        return false;
    if (isMom)
        return true;
    return (!isMorning);
}
",
1202d346fcf0db46d6a29cff9b13366969ee2df1,"public String atFirst(String str)
{
    if (str.length() >= 2)
    {
        return (str.substring(0,2));
    }
    else if (str.length() == 1)
    {
        return (str + ""@"");
    }
    else
    {
        return (""@@"");
    }
}
",
3da6d13c5e129585a85f09cc153cb57358bb6316,"public String without2(String str) 
{
    if (str.length() >= 2)
    {
        if (str.substring(0,2).equals(str.substring(str.length() - 2)))
        {
            return str.substring(2);
            // if the two letters at the beginning of the word and at the end of the word are equal to each other, the string will returned with these two letters
        }
        else
        {
            return str;
            // if the two letters are not equal to each other, then the original string will be returned
        }
    }
    else
    {
        return str;
        //if the word is only two letters or less, it will return the original string 
    }
}
",
8ea0e17b60756ae019215592cbd3e7a8e04b0965,"public int countClumps(int[] nums)
{
    int clumps = 0;
    boolean isClump = false;
    for (int i = 0; i < nums.length - 1; i += 1) {
         if (isClump) {
             if {nums[i] != num[i + 1]) {
                 isClump = false;
             }
             else {
                 isClump = true;
                 clumps += 1;
             }
                }
         }
         return clumps;
}
",
67e32e60ccf94c9e237b1ee60eec88d54337ee46,"public int noTeenSum(int a, int b, int c)
{
	return fixTeen(a) + fixTeen(b) + fixTeen(c);
}

public int fixTeen(int n)
{
    if (( n > 12 && n < 15) ||( n > 16 && n < 20 )) {
     return 0;
   }
   return n;
}
",
62ce70304358abfdd932378fb6cd7769b980fdc9,"public int noTeenSum(int a, int b, int c)
{
	return fixTeen(a) + fixTeen(b) + fixTeen(c);
}

public int fixTeen(int n)
{
    if (13 <= n && n <= 19)
    {
        if (n != 15 || n != 16)
        {
            n = 0;
        }
        return n;
    }
}
",
e22ce5e6a4c5b1b12e61c7366855f779f8ae64f3,"public String atFirst(String str)
{
    if (str.length() >= 2)
    {
        return (str.substring(0, 2));
    }
    else if (str.length() == 1)
    {
        return str + ""@"";
    }
    else
    {
        return ""@@"";
    }
}
",
abf203f02a8e6355f71ebc0195c9c4f08db3dca9,"public int greenTicket(int a, int b, int c)
{ 
    if (a == b && b == c){
        return 20;
    }
    if (a == b || b == c || a == c){
        return 10;
    }
    return 0;
}
",
f1f0a6448bfe3ad005796a40633fc50d6ffa6023,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
c32e8df18759f85c9ca9cc1ff3051aa396bf5a33,"public boolean evenlySpaced(int a, int b, int c)
{
    int[3] arrInOrder;
    arrInOrder[0] = a;
    arrInOrder[1] = b;
    arrInOrder[2] = c;
    
    int small;
    int med, big;
   /**
    if ((a > b) && (a > c)) // if a is the biggest
   {
		if (b > c)
        {
            big = a;
            med = b;
            small = c;
        }
       else
       {
           
       }
       
   }
   */
}
",
6e2e62d18f30974998599ac300549d4eb85fb22c,"public static int[] fizzArray(int n) {

//initializing integer array with size n

int[] result = new int[n];

for (int i = 0; i < n; i++){

result[i] = i;

}

return result;

}
",
de2b521aa2c62ce8dcb54219041aa20489dda3f4,"public int loneSum(int a, int b, int c)
{
    if (a == b && b == c)
        return 0;
    if (a == b)
        return c;
    if (b == c)
        return a;
    if (a == c)
        return b;
    return a + b + c;
}
",
d3bbd5372c67b93d7e4c5f3425ac793bb5763980,"public int sortaSum(int a, int b)
{
    int sum = a + b;
    if (sum >= 10 && sum <= 19)
        return 20;
    return sum;
}
",
3a5b1294ef5b59964830e8cf8f6219db0c34b7d8,"public int blackjack(int a, int b)
{
    double remainA;
    remainA = (a % 21); //NOTE: The '%' yields the remainder!!!!
    double remainB;
    remainB =  (b % 21);
    
    // IF the remainder is large for one number, IT IS FAR AWAY from 21.
    if (a > 21 && b > 21)
    {
        return 0;
    }
    else if (a < 21 || b < 21)
    {
        if (a < 21 && b > 21)
        {
            return a;
        }
        else
        {
            return b;
        }
    }
    else
    {
        if (remainA > remainB)
        {
            return b;
        }
        else
        {
            return a;
        }
    }
}",
eee0eb76d7c982f7cdbbfb86dbf032940b49e38b,"public int luckySum(int a, int b, int c)
{
    if (a == 13) // if a is equal to 13
        return 0;
    if (b == 13) // if b is equal to 13 go to the a value
        return a;
    if (c == 13) //if c is 13, only add  and b
        return (a + b);
    return (a + b + c); //if none of the others,add all the numbers
}
",
dd09babe580586f1680177c5f9004d2f1f2011bf,"public boolean has77(int[] nums)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] == 7 && nums[i + 1] == 7)
            return true;
        if (nums[i] < nums.length - 2 && nums[i] == 7 && nums[i + 2] == 7)
            return true;
    }
    return false;
}
",
e22ce5e6a4c5b1b12e61c7366855f779f8ae64f3,"public String atFirst(String str)
{
    if (str.length() >= 2)
    {
        return (str.substring(0, 2));
    }
    else if (str.length() == 1)
    {
        return str + ""@"";
    }
    else
    {
        return ""@@"";
    }
}
",
9a762998ef3f0abdaeaa9e34d97d58d792cb6be4,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
    if (isAsleep)
        return false;
    if (isMom)
        return true;
    return (!isMorning);
}
",
c4cd9fb76f3a67d4e774521d2a07bd1fe7cd0b11,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
54f16f3c5196c9d23444381409e354f9fae465c0,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
14ced47f38f6da0c3afcc08c0bcb9ed96b5c73fe,"public String getSandwich(String str)
{
    if (str.indexOf(""bread"") > 0) // if there are two peices of bread
    {
         System.out.print(str.indexOf(""bread""));
        return ""no"";
    }
    else
    {
        return """";
    }
}
",
324744e665f46a82492205626535ae0a59adced1,"public int countEvens(int[] nums)
{
    int count = 0;
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] % 2 == 0)
        {
            count++;
        }
    }
    return count;
}
",
1246d82dc38af3da4d77890172a9d1890cc382a1,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
faa6cc44696d72e0fa85cc561584a1de159a4aa5,"public int dateFashion(int you, int date)
{
    if (you <= 2 || date <= 2)
        return 0;
    if (you >= 8 || date >= 8)
        return 2;
    return 1;
}
",
987f265fb4f09a7db40586aa6a321d7c612fa526,"public boolean has77(int[] nums)
{
    int count = 0;
    
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] == 7 && nums[i+1] == 7)
        {
            count = 1;
        }
        else if (nums[i] == 7 && nums[i+2] == 7 && i < nums.length - 3)
        {
            count = 1;
        }
    }
    // okay, another approach is to check if there are two 7's.
    // if there are, store their [] as variables
    // if the difference between them is greater than 2, then false
    
    return (count == 1);
}
",
8a784cb08df86d4814219f2b557c5cfa0f28180c,"public boolean cigarParty(int cigars, boolean isWeekend)
{
    if (isWeekend)
    {
        return (cigars >= 40);
    else
    {
        return (cigars >= 40 && cigars <= 60);
    }
}
",
2ab613317018e535c7c370e1bf3fb0d86c7a9f9b,"public int[] tenRun(int[] nums)
{
    int[] result = new int[nums.length];
    int input;
    int value = -1;
    
    for (int i = 0; i < nums.length; i++)
    {
        input = nums[i];
        
        if (input % 10 == 0 && input > value)
        {
            value = input;
        }
        
        if (value == -1)
        {
            result[i] = input;
        }
        else
        {
            result[i] = value;
        }
    }
    
    return result;
}
",
3da6d13c5e129585a85f09cc153cb57358bb6316,"public String without2(String str) 
{
    if (str.length() >= 2)
    {
        if (str.substring(0,2).equals(str.substring(str.length() - 2)))
        {
            return str.substring(2);
            // if the two letters at the beginning of the word and at the end of the word are equal to each other, the string will returned with these two letters
        }
        else
        {
            return str;
            // if the two letters are not equal to each other, then the original string will be returned
        }
    }
    else
    {
        return str;
        //if the word is only two letters or less, it will return the original string 
    }
}
",
9c1b24f0268b9d5238feaf59114da5d3b827e88f,"public boolean bobThere(String str)
{
    for (int i = 0; i < str.length() - 2; i++) 
    {
    if (str.charAt(i) == 'b' && str.charAt(i + 2) == 'b')
    {
        return true;
    }
    }
    return false;
}
",
f33160f9d8c1a76b2c1ada81ffc8fe471a18ac18,"public int makeChocolate(int small, int big, int goal)
{
    int num = goal % 5; // small needed with enough big
    int num2 = goal / 5; // big needed exculeding small
    int count = 0;
    
    if (num > small || (num2 > big) && ((goal - (big * 5)) - small > 0)) 
    {
        return -1;
    }
    else if (num2 <= big) 
    {
        while (goal > 0 && big > 0)
        {
            goal = goal - 5;
            big --;
        }
        
        while (goal > 0)
        {
            goal --;
            count ++'
        }
    }
    else
    {
       return -2;
    }
}
",
6b538f7d9eac6f8c54cd2c59a699ca73280e0930,"public class FizzArray {

//fizzArray is a method which takes input n and prepares fizzArray

public static int[] fizzArray(int n) {

//initializing integer array with size n

int[] result = new int[n];

for (int i = 0; i < n; i++){

result[i] = i;

}

return result;

}
",
93d04bbaaacbdc2e43e79af8101e3443d99f3216,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
7862665265faf85e50ada49c030c401c79b4301c,"public boolean sameEnds(int[] nums, int n)
{
    for (int i = 0; i < n; i++)
    {
        if (nums[i] != nums[nums.length - (n - i)])
        {
            return false;
        }
    }
    
    return true;
}
",
45bb0c43390b2898deab9a359cdda85e43e43e39,"public int[] shiftLeft(int[] nums)
{
    int[] result = new int[nums.length];
    for (int i = 0; i< nums.length - 1; i++)
    {
		result[i] = nums[i+1];
    }
    result[nums.length - 1] = nums[0];
    
    return result;
}
",
c6e135a8d819808a2e86f6eb184fd9701ef4cea6,"public int[] withoutTen(int[] nums)
{
    //creates new array
    int[] newArray = new int[nums.length];
	int j = 0;
	for(int i = 0; i < nums.length; i++)
	{
		if(nums[i] != 10)
		{
			newArray[j] = nums[i];
			j++;
		}
	}
	// returns the new array
	return newArray;
}
",
4465ac2e7e70f3ac5ddbd490bd262cc0c4f6249d,"public int[] frontPiece(int[] nums)
{
    int [] grid = new int[2];
    
    // establish logi for checking nums.
    // add the proper elements of nums into a new array 
    if (nums.length == 1)
    {
        return grid[0] = nums[0];
    }
    else if (nums.length == 0)
    {
        return grid;
    }
    else
    {
        grid[0] = nums[0];
        grid[1] = nums[1];
        return grid[];
    }
}
",
eee0eb76d7c982f7cdbbfb86dbf032940b49e38b,"public int luckySum(int a, int b, int c)
{
    if (a == 13) // if a is equal to 13
        return 0;
    if (b == 13) // if b is equal to 13 go to the a value
        return a;
    if (c == 13) //if c is 13, only add  and b
        return (a + b);
    return (a + b + c); //if none of the others,add all the numbers
}
",
a730369051672c668c3efc03eb8dcc6956e9beb3,"public int[] withoutTen(int[] nums)
{
    int[] arr = new int[nums.length];
	int p = 0;
	for(int i = 0; i < nums.length; i++)
	{
		if(nums[i] != 10)
		{
			arr[p] = nums[i];
			p++;
		}
	}
	// Java arrays are initialized to 0 so no need to set the last elements to 0
	return arr;
}
",
2eefd35700230f8780f45d01d416afdecdd69994,"public int caughtSpeeding(int speed, boolean isBirthday)
if(isBirthday)
{
	speed -= 5;
}
if(speed <= 60)
{
    return 0;
}
else if (speed <= 80)
{
    return 1;
}
else
{
    return 2;
}
    
",
8a4197cd94d2fc278a10045f02c9323393eb70ad,"public boolean sameEnds(int[] nums, int n)
{
    for (int i = 0; i < n; i++)
    {
        if (nums[i] != nums[nums.length - n + i])
            return false;
    }
    return true;
}
",
b1734b84d9123cc28d3f62e758b480ab26ea8fb9,"public int sortaSum(int a, int b)
{
   int sum = a + b;
   if (sum >= 10 && sum <= 19)
   {
   		return 20; 
   }
   else
   {
   		return sum;
   }
}
",
1ac085374f785c20ca501ac5939ec5977db8a972,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
    if (isAsleep)
    {
        return false;
    }
    
    if (isMorning)
    {
 		return false;   
    }
    
    return true;
}
",
948b5b2528e52a0cd157a7b353521353f3da1fef,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
     return (isMom || (!(isAsleep)));

}
",
4465ac2e7e70f3ac5ddbd490bd262cc0c4f6249d,"public int[] frontPiece(int[] nums)
{
    int [] grid = new int[2];
    
    // establish logi for checking nums.
    // add the proper elements of nums into a new array 
    if (nums.length == 1)
    {
        return grid[0] = nums[0];
    }
    else if (nums.length == 0)
    {
        return grid;
    }
    else
    {
        grid[0] = nums[0];
        grid[1] = nums[1];
        return grid[];
    }
}
",
9e81d1a2a7638c14b721846f5090b36ad07ab308,"public int[] seriesUp(int n)
{
    int[] result = new int[(n * (n + 1)) / 2];
    int count = 1;
    int index = 0;
    for (int i = 0; i < result.length; i++)
    {
        for (int j = 0; j < count; j++)
        {
            result[index] = j;
        	index++;
        }
        count++;
    }
}
",
ec03a0ab16a221fcf9292fec81dde347af81b619,"public String repeatEnd(String str, int n)
{
StringBuffer result = new StringBuffer();
String end = str.substring(str.length() - n);

for(int i = 0; i < n; i++)
result.append(end);

return result.toString(
}
",
f1f0a6448bfe3ad005796a40633fc50d6ffa6023,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
f0c481a9e07c60bea12e78a5079713f14b24c2a9,"public int blackjack(int a, int b)
{
    if(b > 21 && a < 21)
        return a;
    if(a>21 && b < 21)
        return b;
    if(a > b)
        return a;
    if (b > a)
        return a;
    return 0;
}
",
b1ffd079f8c4294a66e06ad7d2fb2a7a8fbe7344,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
8f6dbd26c957f489904930b7ed0aa2950cd254af,"public String repeatEnd(String str, int n)
{
    String repeat = str.substring(str.length() - n);
    for (int i = 1; i < n; i++)
        //starts with the first letter of the string
    {
        repeat = repeat + str.substring(str.length() - n);
        //gets the part of the word that needs to be returned
    }
    return repeat;
    //returns the string made out of the n repetitions
}
",
14ced47f38f6da0c3afcc08c0bcb9ed96b5c73fe,"public String getSandwich(String str)
{
    if (str.indexOf(""bread"") > 0) // if there are two peices of bread
    {
         System.out.print(str.indexOf(""bread""));
        return ""no"";
    }
    else
    {
        return """";
    }
}
",
e22ce5e6a4c5b1b12e61c7366855f779f8ae64f3,"public String atFirst(String str)
{
    if (str.length() >= 2)
    {
        return (str.substring(0, 2));
    }
    else if (str.length() == 1)
    {
        return str + ""@"";
    }
    else
    {
        return ""@@"";
    }
}
",
93d04bbaaacbdc2e43e79af8101e3443d99f3216,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
e782e855c718d5d72eb1c47b31cc0c9050d6b269,"public String without2(String str) 
{
    // Given a string, if a length 2 substring appears at both its beginning and end,
// return a string without the substring at the beginning, so ""HelloHe"" yields ""lloHe"".
// The substring may overlap with itself, so ""Hi"" yields """". Otherwise, return the original string unchanged.
public String without2(String str)
{
	int len = str.length();
	if(len >= 2)
	{
		if(str.substring(0,2).equals(str.substring(len-2, len)))
			return str.substring(2);
		else
			return str;
	}
	else
		return str;
}
}
",
8a4197cd94d2fc278a10045f02c9323393eb70ad,"public boolean sameEnds(int[] nums, int n)
{
    for (int i = 0; i < n; i++)
    {
        if (nums[i] != nums[nums.length - n + i])
            return false;
    }
    return true;
}
",
e782e855c718d5d72eb1c47b31cc0c9050d6b269,"public String without2(String str) 
{
    // Given a string, if a length 2 substring appears at both its beginning and end,
// return a string without the substring at the beginning, so ""HelloHe"" yields ""lloHe"".
// The substring may overlap with itself, so ""Hi"" yields """". Otherwise, return the original string unchanged.
public String without2(String str)
{
	int len = str.length();
	if(len >= 2)
	{
		if(str.substring(0,2).equals(str.substring(len-2, len)))
			return str.substring(2);
		else
			return str;
	}
	else
		return str;
}
}
",
dd09babe580586f1680177c5f9004d2f1f2011bf,"public boolean has77(int[] nums)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] == 7 && nums[i + 1] == 7)
            return true;
        if (nums[i] < nums.length - 2 && nums[i] == 7 && nums[i + 2] == 7)
            return true;
    }
    return false;
}
",
f8a88d04552686ba064b8db06f097f9921d6b1eb,"public boolean in1To10(int n, boolean outsideMode)
{
    if (outsideMode)
		return (n <= 1 || n >= 10);
	else
    return (n >= 1 && n <= 10);
}
",
f7613e1314baffe2be7c9164f5586a14e6e82fd6,"public int countCode(String str)
{
    int count = 0;
    for (int i = 0; i < str.length() - 4; i++) {
        if (str.substring(i, i + 1).equals(""co"") && str.charAt(i + 3) == 'e') {
            count++;
        }
    }
    return count;
}
",
93d04bbaaacbdc2e43e79af8101e3443d99f3216,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
e1377201338b35fe171b9444b54cc7c825b47de7,"public int greenTicket(int a, int b, int c)
{
    if (a == b && b == c) //if two numbers are the same
        return 20;
    if (a == b || a == c || b == c) //if all the numbers are the same
        return 10;
    else //none of the numbers are the same
        return 0;
}
",
3d4c98b74adf52d4ca5fe21febb24b1a8f6a6120,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++) {
        if (nums[i] != val && nums[i + 1] != val) {
            return false;
        }
    }
    return true;
}
",
1ac085374f785c20ca501ac5939ec5977db8a972,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
    if (isAsleep)
    {
        return false;
    }
    
    if (isMorning)
    {
 		return false;   
    }
    
    return true;
}
",
56cccc5e57b71638ae0f36747e6ae090dc81fe2d,"public int sum67(int[] nums)
{
    int count = 0;
    int seven = 0;
    
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] == 6)
        {
           for (int x = i + 1; x < nums.length; x++)
           {
               if (nums[x] != 7)
               {
                   count = count + 0;
               }
               else if (nums[x] == 7)
               {
                   count = count + 0;
                   i = i + x;
               }
           }
        
        }
        else
        {
        count = count + nums[i];
        }
        // i'm stuck on excluding numbers up till 7.
        // okay, i'm trying to say:
        // when you reach a 6, ignore the 6.
        // then, ignore each number until you reach a 7.
        
        // so perhaps the smarter way to state this is:
        // ahhh maybe a separate int to count 7's?
        
        // i'm thinking in the way the problem is laid out for me, where
        // i'm supposed to ""ignore"" sections of numbers
        
        // maybe just fucking count them all and ignore the ones in between 6 and 7
        
       
        
    }
    
    return count;
}

",
6b538f7d9eac6f8c54cd2c59a699ca73280e0930,"public class FizzArray {

//fizzArray is a method which takes input n and prepares fizzArray

public static int[] fizzArray(int n) {

//initializing integer array with size n

int[] result = new int[n];

for (int i = 0; i < n; i++){

result[i] = i;

}

return result;

}
",
1246d82dc38af3da4d77890172a9d1890cc382a1,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
3716e52883778fd89a65151c2b55e28aaab539b2,"public int caughtSpeeding(int speed, boolean isBirthday)
{ if (speed <= 60)
{
    return 0;
}
if (speed >= 61 && speed <= 80)
{
    return 1;
}
if (isBirthday())
{
    return 2;
}
}
",
c4cd9fb76f3a67d4e774521d2a07bd1fe7cd0b11,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
45bb0c43390b2898deab9a359cdda85e43e43e39,"public int[] shiftLeft(int[] nums)
{
    int[] result = new int[nums.length];
    for (int i = 0; i< nums.length - 1; i++)
    {
		result[i] = nums[i+1];
    }
    result[nums.length - 1] = nums[0];
    
    return result;
}
",
6f326caf302bdfdbefc02faf1dc435ba9d9f04d6,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if ((nums[i] != val) && (nums[i + 1] != val))
        {
            return false;
        }          
        
    }
     return true;
}
",
b1ffd079f8c4294a66e06ad7d2fb2a7a8fbe7344,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
4465ac2e7e70f3ac5ddbd490bd262cc0c4f6249d,"public int[] frontPiece(int[] nums)
{
    int [] grid = new int[2];
    
    // establish logi for checking nums.
    // add the proper elements of nums into a new array 
    if (nums.length == 1)
    {
        return grid[0] = nums[0];
    }
    else if (nums.length == 0)
    {
        return grid;
    }
    else
    {
        grid[0] = nums[0];
        grid[1] = nums[1];
        return grid[];
    }
}
",
f1f0a6448bfe3ad005796a40633fc50d6ffa6023,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
b1734b84d9123cc28d3f62e758b480ab26ea8fb9,"public int sortaSum(int a, int b)
{
   int sum = a + b;
   if (sum >= 10 && sum <= 19)
   {
   		return 20; 
   }
   else
   {
   		return sum;
   }
}
",
dbbe2c6beeefd93c68c1cf77a6130ed4323b9aa3,"public int countEvens(int[] nums)
{
    int count = 0;
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] % 2 == 0)
        {
            count++;
        }
    }
    return count;
}
",
afec4a1fda7760651e34095e9ceef8a8483018be,"public boolean sameEnds(int[] nums, int n)
{
    
    for (int i = 0; i <= n; i++)
    {
        if (nums[i] != nums[nums.length - n + i - 1])
        {
            return false;
        }
    }
    return true;
}
",
fe4c33f884bebc96972922f847a797677cecb743,"public int sum67(int[] nums)
{
  //add up the sections between 6 and 7.
    //subtract them from the total
    boolean ignoring = false;
    int deplorables = 0;
    int sum = 0;
    for(int i = 0; i < nums.length; i++)
    {
    	if(nums[i] == 6)
        {ignoring = true;}
        
        if(nums[i]== 7 && ignoring)
        {ignoring = false;}
        
        if(ignoring)
        {deplorables += nums[i];}
        else
        {sum += nums[i];}
    }
  return sum - deplorables;
}
",
6ccaf37a8d9757fc57014287316ecd9409820fe7,"public int sortaSum(int a, int b)
{
    int sum = a + b;
    
    if (sum >= 10 || sum <= 19)
        return 20;
    else
        return sum;
    
}
",
eb3954d897ab04a8ee9649988f3d26e98aae722f,"public String[] fizzBuzz(int start, int end)
{
    String[] result = new String[end - start];
    
    for (int i = 0; i < end - 1; i++)
    {
        if ((i + 1) % 15 == 0 && i > 0)
        {
            result[i] = ""FizzBuzz"";
        }
        else if ((i + 1) % 3 == 0 && i > 0)
        {
            result[i] = ""Fizz"";
        }
        else if ((i + 1) % 5 == 0 && i > 0)
        {
            result[i] = ""Buzz"";
        }
        else {
            result[i] = String.valueOf(i + start);
        }
    }
    
    return result;
}
",
f8a88d04552686ba064b8db06f097f9921d6b1eb,"public boolean in1To10(int n, boolean outsideMode)
{
    if (outsideMode)
		return (n <= 1 || n >= 10);
	else
    return (n >= 1 && n <= 10);
}
",
2b92c031167d3664a0be5ab4cee6d5ad678ce824,"public int sum67(int[] nums)
{
    int count = 0;
    int seven = 0;
    
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] == 6)
        {
           for (int x = i; x < nums.length; x++)
           {
               if (nums[x] != 7)
               {
                   count = count + 0;
               }
               else if (nums[x] == 7)
               {
                   count = count + 0;
                   i = i + x;
               }
           }
        
        }
        
        count = count + nums[i];
        // i'm stuck on excluding numbers up till 7.
        // okay, i'm trying to say:
        // when you reach a 6, ignore the 6.
        // then, ignore each number until you reach a 7.
        
        // so perhaps the smarter way to state this is:
        // ahhh maybe a separate int to count 7's?
        
        // i'm thinking in the way the problem is laid out for me, where
        // i'm supposed to ""ignore"" sections of numbers
        
        // maybe just fucking count them all and ignore the ones in between 6 and 7
        
       
        
    }
    
    return count;
}

",
3a5b1294ef5b59964830e8cf8f6219db0c34b7d8,"public int blackjack(int a, int b)
{
    double remainA;
    remainA = (a % 21); //NOTE: The '%' yields the remainder!!!!
    double remainB;
    remainB =  (b % 21);
    
    // IF the remainder is large for one number, IT IS FAR AWAY from 21.
    if (a > 21 && b > 21)
    {
        return 0;
    }
    else if (a < 21 || b < 21)
    {
        if (a < 21 && b > 21)
        {
            return a;
        }
        else
        {
            return b;
        }
    }
    else
    {
        if (remainA > remainB)
        {
            return b;
        }
        else
        {
            return a;
        }
    }
}",
e1377201338b35fe171b9444b54cc7c825b47de7,"public int greenTicket(int a, int b, int c)
{
    if (a == b && b == c) //if two numbers are the same
        return 20;
    if (a == b || a == c || b == c) //if all the numbers are the same
        return 10;
    else //none of the numbers are the same
        return 0;
}
",
a3cfe4acc0878f7a98ccbc168df9dff28266dbd7,"public int[] frontPiece(int[] nums)
{
    int [] grid = new int[2];
    
    // establish logi for checking nums.
    // add the proper elements of nums into a new array 
    if (nums.length == 1)
    {
        return grid[0] = nums[0];
    }
    else if (nums.length == 0)
    {
        return grid;
    }
    else
    {
        return grid[nums[0], nums[1]];
    }
}
",
da986520180a13a98bb67c061d43bd9c2686e469,"public String alarmClock(int day, boolean vacation)
{
    if (vacation) { 
        if (day == 0 || day == 6) {
            return ""off"";
        } else {
            return ""10:00"";
        }
    } else {
        if (day == 0 || day == 6) {
            return ""10:00"";
        } else {
            return ""7:00"";
        }
    }
}
",
98b41121a7f0c87d5746dc0ae2746596c4a8bb37,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
6f326caf302bdfdbefc02faf1dc435ba9d9f04d6,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if ((nums[i] != val) && (nums[i + 1] != val))
        {
            return false;
        }          
        
    }
     return true;
}
",
9c1b24f0268b9d5238feaf59114da5d3b827e88f,"public boolean bobThere(String str)
{
    for (int i = 0; i < str.length() - 2; i++) 
    {
    if (str.charAt(i) == 'b' && str.charAt(i + 2) == 'b')
    {
        return true;
    }
    }
    return false;
}
",
7862665265faf85e50ada49c030c401c79b4301c,"public boolean sameEnds(int[] nums, int n)
{
    for (int i = 0; i < n; i++)
    {
        if (nums[i] != nums[nums.length - (n - i)])
        {
            return false;
        }
    }
    
    return true;
}
",
f0c481a9e07c60bea12e78a5079713f14b24c2a9,"public int blackjack(int a, int b)
{
    if(b > 21 && a < 21)
        return a;
    if(a>21 && b < 21)
        return b;
    if(a > b)
        return a;
    if (b > a)
        return a;
    return 0;
}
",
0eefe10c954547a7675d5ee81f88d4d112cf44e9,"public boolean bobThere(String str)
{
    for (int i = 0; i < str.length() - 2; i++) {
        if (str.charAt(i) == 'b' && str.charAt(i + 2) == 'b') {
            return true;
        }
    }
    return false;
}
",
fa7e52a8dd82b9e07db5c24a9f6640028d267b37,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] != val && nums[i + 1] != val)
        {
            return false;
        }
    }
    return true;
}
",
33e1684529896667b663d935101657bf9205ef10,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] != val && nums[i + 1] != val)
            return false;
    }
    return true;
}
",
dc1c18a727a472113299aaf5bc76ffcf6180ee19,"public String[] fizzBuzz(int start, int end)
{
    end--;
    String[] result = new String[end - start];
    
    for (int i = 0; i < end; i++)
    {
        if ((i + 1) % 15 == 0 && i > 0)
        {
            result[i] = ""FizzBuzz"";
        }
        else if ((i + 1) % 3 == 0 && i > 0)
        {
            result[i] = ""Fizz"";
        }
        else if ((i + 1) % 5 == 0 && i > 0)
        {
            result[i] = ""Buzz"";
        }
        else {
            result[i] = String.valueOf(i + start);
        }
    }
    
    return result;
}
",
f7613e1314baffe2be7c9164f5586a14e6e82fd6,"public int countCode(String str)
{
    int count = 0;
    for (int i = 0; i < str.length() - 4; i++) {
        if (str.substring(i, i + 1).equals(""co"") && str.charAt(i + 3) == 'e') {
            count++;
        }
    }
    return count;
}
",
eee0eb76d7c982f7cdbbfb86dbf032940b49e38b,"public int luckySum(int a, int b, int c)
{
    if (a == 13) // if a is equal to 13
        return 0;
    if (b == 13) // if b is equal to 13 go to the a value
        return a;
    if (c == 13) //if c is 13, only add  and b
        return (a + b);
    return (a + b + c); //if none of the others,add all the numbers
}
",
b1a0288831ecb0ae603b3c1ba2ee301b5ebd4583,"public boolean twoTwo(int[] nums)
{
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] == 2)
        {
            if (nums[i + 1] != 2 || nums[i - 1] != 2)
            {
                return false;
            }
        }
    }
    return true;
}",
8f6dbd26c957f489904930b7ed0aa2950cd254af,"public String repeatEnd(String str, int n)
{
    String repeat = str.substring(str.length() - n);
    for (int i = 1; i < n; i++)
        //starts with the first letter of the string
    {
        repeat = repeat + str.substring(str.length() - n);
        //gets the part of the word that needs to be returned
    }
    return repeat;
    //returns the string made out of the n repetitions
}
",
8a4197cd94d2fc278a10045f02c9323393eb70ad,"public boolean sameEnds(int[] nums, int n)
{
    for (int i = 0; i < n; i++)
    {
        if (nums[i] != nums[nums.length - n + i])
            return false;
    }
    return true;
}
",
3d4c98b74adf52d4ca5fe21febb24b1a8f6a6120,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++) {
        if (nums[i] != val && nums[i + 1] != val) {
            return false;
        }
    }
    return true;
}
",
ecef8ffff5f622c9ab6799c53c46541bd578254a,"public int sum67(int[] nums)
{
    int sum = 0;
    boolean ifSix = false;
    for (int i = 0; i < nums.length; i++)
    {
        if (ifSix)
        {
            if (nums[i] == 7)
                ifSix = false;
        }
        else if (nums[i] == 6)
        {
            ifSix = true;
        }
        //if ifSix is true, then it goes back into the for loop 
        //and the first if statement becomes true
        else
        {
            sum = sum + nums[i];
        }
        //takes the sum of the numbers when there is no linee of numbers starting
        //with a 6 and ending with a 7
    }
    return sum;
}
",
e1377201338b35fe171b9444b54cc7c825b47de7,"public int greenTicket(int a, int b, int c)
{
    if (a == b && b == c) //if two numbers are the same
        return 20;
    if (a == b || a == c || b == c) //if all the numbers are the same
        return 10;
    else //none of the numbers are the same
        return 0;
}
",
3da6d13c5e129585a85f09cc153cb57358bb6316,"public String without2(String str) 
{
    if (str.length() >= 2)
    {
        if (str.substring(0,2).equals(str.substring(str.length() - 2)))
        {
            return str.substring(2);
            // if the two letters at the beginning of the word and at the end of the word are equal to each other, the string will returned with these two letters
        }
        else
        {
            return str;
            // if the two letters are not equal to each other, then the original string will be returned
        }
    }
    else
    {
        return str;
        //if the word is only two letters or less, it will return the original string 
    }
}
",
3716e52883778fd89a65151c2b55e28aaab539b2,"public int caughtSpeeding(int speed, boolean isBirthday)
{ if (speed <= 60)
{
    return 0;
}
if (speed >= 61 && speed <= 80)
{
    return 1;
}
if (isBirthday())
{
    return 2;
}
}
",
a641c5efbb7e5f53f92580571992aa0a53d6cdf6,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
9a762998ef3f0abdaeaa9e34d97d58d792cb6be4,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
    if (isAsleep)
        return false;
    if (isMom)
        return true;
    return (!isMorning);
}
",
eb9d1e97323f6c0c1410dd8ae35aa261280fc389,"public boolean endOther(String a, String b)
{
    a = a.toLowerCase();
    b = a.toLowerCase();
    return(a.endsWith(b) || b.endsWith(a));
    
    
}
",
37483792e65efa307aab5d74a47b4a1dbe36e195,"public boolean bobThere(String str)
{
    //int firstB = str.indexOf(""b"");
   // int secondB = str.lastIndexOf(""b"");
    //if (secondB == firstB + 2)
    //    return true;
   // return false;
    for (int n == 0; n < str.length(); n++)
    {
        if ((str.charAt(n) == str.indexOf(""b"") && (str.charAt(n + 2) == str.indexOf(""b"", n))
        {
            return true;
        }
                
    }//end for loop
    return false;
}
",
8a4197cd94d2fc278a10045f02c9323393eb70ad,"public boolean sameEnds(int[] nums, int n)
{
    for (int i = 0; i < n; i++)
    {
        if (nums[i] != nums[nums.length - n + i])
            return false;
    }
    return true;
}
",
b1ffd079f8c4294a66e06ad7d2fb2a7a8fbe7344,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
ecef8ffff5f622c9ab6799c53c46541bd578254a,"public int sum67(int[] nums)
{
    int sum = 0;
    boolean ifSix = false;
    for (int i = 0; i < nums.length; i++)
    {
        if (ifSix)
        {
            if (nums[i] == 7)
                ifSix = false;
        }
        else if (nums[i] == 6)
        {
            ifSix = true;
        }
        //if ifSix is true, then it goes back into the for loop 
        //and the first if statement becomes true
        else
        {
            sum = sum + nums[i];
        }
        //takes the sum of the numbers when there is no linee of numbers starting
        //with a 6 and ending with a 7
    }
    return sum;
}
",
67e32e60ccf94c9e237b1ee60eec88d54337ee46,"public int noTeenSum(int a, int b, int c)
{
	return fixTeen(a) + fixTeen(b) + fixTeen(c);
}

public int fixTeen(int n)
{
    if (( n > 12 && n < 15) ||( n > 16 && n < 20 )) {
     return 0;
   }
   return n;
}
",
dea353e4fa8946278ebcfad2f8039a9f72b55b28,"public int sum3(int[] nums)
{
 return nums[0] + nums[1] + nums[2];   
}
",
708073e053068889622d8588b7bec2ceea644404,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
98b41121a7f0c87d5746dc0ae2746596c4a8bb37,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
c32e8df18759f85c9ca9cc1ff3051aa396bf5a33,"public boolean evenlySpaced(int a, int b, int c)
{
    int[3] arrInOrder;
    arrInOrder[0] = a;
    arrInOrder[1] = b;
    arrInOrder[2] = c;
    
    int small;
    int med, big;
   /**
    if ((a > b) && (a > c)) // if a is the biggest
   {
		if (b > c)
        {
            big = a;
            med = b;
            small = c;
        }
       else
       {
           
       }
       
   }
   */
}
",
3da6d13c5e129585a85f09cc153cb57358bb6316,"public String without2(String str) 
{
    if (str.length() >= 2)
    {
        if (str.substring(0,2).equals(str.substring(str.length() - 2)))
        {
            return str.substring(2);
            // if the two letters at the beginning of the word and at the end of the word are equal to each other, the string will returned with these two letters
        }
        else
        {
            return str;
            // if the two letters are not equal to each other, then the original string will be returned
        }
    }
    else
    {
        return str;
        //if the word is only two letters or less, it will return the original string 
    }
}
",
f7613e1314baffe2be7c9164f5586a14e6e82fd6,"public int countCode(String str)
{
    int count = 0;
    for (int i = 0; i < str.length() - 4; i++) {
        if (str.substring(i, i + 1).equals(""co"") && str.charAt(i + 3) == 'e') {
            count++;
        }
    }
    return count;
}
",
f720cc450f616d826f746ce4609c79ab1860b68a,"public int[] fizzArray(int n)
{
    int[] result = new int[n];
        for (int i = 0; i<n.length;i++)
        {
            result[i-1] = i;
        }
    return result;
}
",
eb9d1e97323f6c0c1410dd8ae35aa261280fc389,"public boolean endOther(String a, String b)
{
    a = a.toLowerCase();
    b = a.toLowerCase();
    return(a.endsWith(b) || b.endsWith(a));
    
    
}
",
8f6dbd26c957f489904930b7ed0aa2950cd254af,"public String repeatEnd(String str, int n)
{
    String repeat = str.substring(str.length() - n);
    for (int i = 1; i < n; i++)
        //starts with the first letter of the string
    {
        repeat = repeat + str.substring(str.length() - n);
        //gets the part of the word that needs to be returned
    }
    return repeat;
    //returns the string made out of the n repetitions
}
",
c4cd9fb76f3a67d4e774521d2a07bd1fe7cd0b11,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
8ea0e17b60756ae019215592cbd3e7a8e04b0965,"public int countClumps(int[] nums)
{
    int clumps = 0;
    boolean isClump = false;
    for (int i = 0; i < nums.length - 1; i += 1) {
         if (isClump) {
             if {nums[i] != num[i + 1]) {
                 isClump = false;
             }
             else {
                 isClump = true;
                 clumps += 1;
             }
                }
         }
         return clumps;
}
",
ecef8ffff5f622c9ab6799c53c46541bd578254a,"public int sum67(int[] nums)
{
    int sum = 0;
    boolean ifSix = false;
    for (int i = 0; i < nums.length; i++)
    {
        if (ifSix)
        {
            if (nums[i] == 7)
                ifSix = false;
        }
        else if (nums[i] == 6)
        {
            ifSix = true;
        }
        //if ifSix is true, then it goes back into the for loop 
        //and the first if statement becomes true
        else
        {
            sum = sum + nums[i];
        }
        //takes the sum of the numbers when there is no linee of numbers starting
        //with a 6 and ending with a 7
    }
    return sum;
}
",
a3cfe4acc0878f7a98ccbc168df9dff28266dbd7,"public int[] frontPiece(int[] nums)
{
    int [] grid = new int[2];
    
    // establish logi for checking nums.
    // add the proper elements of nums into a new array 
    if (nums.length == 1)
    {
        return grid[0] = nums[0];
    }
    else if (nums.length == 0)
    {
        return grid;
    }
    else
    {
        return grid[nums[0], nums[1]];
    }
}
",
b7d5d5590bde31e23ee41e67ec8ade069279409e,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    if (isBirthday) speed >= 5;
    if (speed <= 60) return 0;
    return (speed > 60 && speed <= 80) ? 1 : 2;
}
",
2b92c031167d3664a0be5ab4cee6d5ad678ce824,"public int sum67(int[] nums)
{
    int count = 0;
    int seven = 0;
    
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] == 6)
        {
           for (int x = i; x < nums.length; x++)
           {
               if (nums[x] != 7)
               {
                   count = count + 0;
               }
               else if (nums[x] == 7)
               {
                   count = count + 0;
                   i = i + x;
               }
           }
        
        }
        
        count = count + nums[i];
        // i'm stuck on excluding numbers up till 7.
        // okay, i'm trying to say:
        // when you reach a 6, ignore the 6.
        // then, ignore each number until you reach a 7.
        
        // so perhaps the smarter way to state this is:
        // ahhh maybe a separate int to count 7's?
        
        // i'm thinking in the way the problem is laid out for me, where
        // i'm supposed to ""ignore"" sections of numbers
        
        // maybe just fucking count them all and ignore the ones in between 6 and 7
        
       
        
    }
    
    return count;
}

",
987f265fb4f09a7db40586aa6a321d7c612fa526,"public boolean has77(int[] nums)
{
    int count = 0;
    
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] == 7 && nums[i+1] == 7)
        {
            count = 1;
        }
        else if (nums[i] == 7 && nums[i+2] == 7 && i < nums.length - 3)
        {
            count = 1;
        }
    }
    // okay, another approach is to check if there are two 7's.
    // if there are, store their [] as variables
    // if the difference between them is greater than 2, then false
    
    return (count == 1);
}
",
45bb0c43390b2898deab9a359cdda85e43e43e39,"public int[] shiftLeft(int[] nums)
{
    int[] result = new int[nums.length];
    for (int i = 0; i< nums.length - 1; i++)
    {
		result[i] = nums[i+1];
    }
    result[nums.length - 1] = nums[0];
    
    return result;
}
",
f33160f9d8c1a76b2c1ada81ffc8fe471a18ac18,"public int makeChocolate(int small, int big, int goal)
{
    int num = goal % 5; // small needed with enough big
    int num2 = goal / 5; // big needed exculeding small
    int count = 0;
    
    if (num > small || (num2 > big) && ((goal - (big * 5)) - small > 0)) 
    {
        return -1;
    }
    else if (num2 <= big) 
    {
        while (goal > 0 && big > 0)
        {
            goal = goal - 5;
            big --;
        }
        
        while (goal > 0)
        {
            goal --;
            count ++'
        }
    }
    else
    {
       return -2;
    }
}
",
afec4a1fda7760651e34095e9ceef8a8483018be,"public boolean sameEnds(int[] nums, int n)
{
    
    for (int i = 0; i <= n; i++)
    {
        if (nums[i] != nums[nums.length - n + i - 1])
        {
            return false;
        }
    }
    return true;
}
",
98b41121a7f0c87d5746dc0ae2746596c4a8bb37,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
ec03a0ab16a221fcf9292fec81dde347af81b619,"public String repeatEnd(String str, int n)
{
StringBuffer result = new StringBuffer();
String end = str.substring(str.length() - n);

for(int i = 0; i < n; i++)
result.append(end);

return result.toString(
}
",
f720cc450f616d826f746ce4609c79ab1860b68a,"public int[] fizzArray(int n)
{
    int[] result = new int[n];
        for (int i = 0; i<n.length;i++)
        {
            result[i-1] = i;
        }
    return result;
}
",
e782e855c718d5d72eb1c47b31cc0c9050d6b269,"public String without2(String str) 
{
    // Given a string, if a length 2 substring appears at both its beginning and end,
// return a string without the substring at the beginning, so ""HelloHe"" yields ""lloHe"".
// The substring may overlap with itself, so ""Hi"" yields """". Otherwise, return the original string unchanged.
public String without2(String str)
{
	int len = str.length();
	if(len >= 2)
	{
		if(str.substring(0,2).equals(str.substring(len-2, len)))
			return str.substring(2);
		else
			return str;
	}
	else
		return str;
}
}
",
59a0088f887207b9450033d0bec152a0c9e18bab,"public int[] shiftLeft(int[] nums)
{
    int[] result = new int[nums.length]; 
    result[nums.length - 1] = nums[0]; 
    int j = 0; 
    for (int i = 1; i < nums.length - 1; i++)
    {
        result[j] = nums[i];
        j++; 
    }
    
    return result; 
}
",
cfc6cb87b23f11a2f4bbbf92a708643e8012b8fb,"public int countEvens(int[] nums)
{	
    int count = 0;
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] % 2 == 0))
        {
            count++;
        }
    }
    return count;
}
",
ec0734122f4add509acf5c24dba4d8ba253e0c85,"public int roundSum(int a, int b, int c)
{
    a = this.round10(a);
    b = this.round10(b);
    c = this.round10(c);
    
    int sum = a + b + c;
    
    return sum;
}

public int round10(int num)
{
    int remainder = num % 10;
    
    if (remainder >= 5)
    {
        // round up
        num = num + (10 - remainder);
    }
    else
    {
        // round down
        num = num - remainder;
    }
    
    return num;
}
",
9c1b24f0268b9d5238feaf59114da5d3b827e88f,"public boolean bobThere(String str)
{
    for (int i = 0; i < str.length() - 2; i++) 
    {
    if (str.charAt(i) == 'b' && str.charAt(i + 2) == 'b')
    {
        return true;
    }
    }
    return false;
}
",
faa6cc44696d72e0fa85cc561584a1de159a4aa5,"public int dateFashion(int you, int date)
{
    if (you <= 2 || date <= 2)
        return 0;
    if (you >= 8 || date >= 8)
        return 2;
    return 1;
}
",
83a239f0521cd38117ddbaaf228f8523a019cc40,"public boolean endOther(String a, String b)
{
    return a.toLowerCase().endsWith(b.toLowerCase()) || b.toLowerCase().endsWith(a.toLowerCase());
}
",
b1734b84d9123cc28d3f62e758b480ab26ea8fb9,"public int sortaSum(int a, int b)
{
   int sum = a + b;
   if (sum >= 10 && sum <= 19)
   {
   		return 20; 
   }
   else
   {
   		return sum;
   }
}
",
fa7e52a8dd82b9e07db5c24a9f6640028d267b37,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] != val && nums[i + 1] != val)
        {
            return false;
        }
    }
    return true;
}
",
b7d5d5590bde31e23ee41e67ec8ade069279409e,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    if (isBirthday) speed >= 5;
    if (speed <= 60) return 0;
    return (speed > 60 && speed <= 80) ? 1 : 2;
}
",
07e5044ee85fdfbd00a05896e4320766869d1163,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
3d4c98b74adf52d4ca5fe21febb24b1a8f6a6120,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++) {
        if (nums[i] != val && nums[i + 1] != val) {
            return false;
        }
    }
    return true;
}
",
433d8d82491f06595b4a7fd44c977dbfb917d6b7,"public boolean has77(int[] nums)
{
    for (int i = 0; i < nums.length - 1; i ++)
    {
        if (nums[i] != 7 && nums[i+1] != 7)
        {
          return false;
        }
    }
    return true;
    
}
",
cfc6cb87b23f11a2f4bbbf92a708643e8012b8fb,"public int countEvens(int[] nums)
{	
    int count = 0;
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] % 2 == 0))
        {
            count++;
        }
    }
    return count;
}
",
6e2e62d18f30974998599ac300549d4eb85fb22c,"public static int[] fizzArray(int n) {

//initializing integer array with size n

int[] result = new int[n];

for (int i = 0; i < n; i++){

result[i] = i;

}

return result;

}
",
c4cd9fb76f3a67d4e774521d2a07bd1fe7cd0b11,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
6b538f7d9eac6f8c54cd2c59a699ca73280e0930,"public class FizzArray {

//fizzArray is a method which takes input n and prepares fizzArray

public static int[] fizzArray(int n) {

//initializing integer array with size n

int[] result = new int[n];

for (int i = 0; i < n; i++){

result[i] = i;

}

return result;

}
",
1246d82dc38af3da4d77890172a9d1890cc382a1,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
948b5b2528e52a0cd157a7b353521353f3da1fef,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
     return (isMom || (!(isAsleep)));

}
",
21e89b678cc68f8c7a4233261dc10576fa87b0ae,"public int[] seriesUp(int n)
{
    int[] result = new int[n * (n + 1)/2];
    if (n == 0)
    {
        return result;
    }
    for	(int i = 1;i <= n; i++)
    {
        for (int a = 1; a <= i; a++)
        {
            result[i + a - 2] = a;
        }
    }
    return result;
}
",
f0c481a9e07c60bea12e78a5079713f14b24c2a9,"public int blackjack(int a, int b)
{
    if(b > 21 && a < 21)
        return a;
    if(a>21 && b < 21)
        return b;
    if(a > b)
        return a;
    if (b > a)
        return a;
    return 0;
}
",
f1f0a6448bfe3ad005796a40633fc50d6ffa6023,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
83a239f0521cd38117ddbaaf228f8523a019cc40,"public boolean endOther(String a, String b)
{
    return a.toLowerCase().endsWith(b.toLowerCase()) || b.toLowerCase().endsWith(a.toLowerCase());
}
",
100f26d18ee4e0e1619542ed10f1e83b537d6b04,"public int sum3(int[] nums)
{
    sum = sum3[0];
    sum+=sum3[1];
    sum+=sum3[2];
    return sum;
}
",
cdf42d5c2d560cf867cc0f628e892b8731b4a6c5,"public boolean twoTwo(int[] nums)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] == 2 && nums[i+1] == 2)
        {
            return true;
        }
    }
    return false;;
}
",
0e68a96660515e0852bbeffb5ec3b3954d4b1625,"public int[] seriesUp(int n)
{
     int[] result = new int[n * (n + 1) / 2];
 	 int initial = 0;
 	 for (int j = 1; j <= n; j++)
     {
    	for (int k = 1; k <= j; k++)
        {
      		result[initial ++] = k;
        }
     }
  return result;

}
",
da986520180a13a98bb67c061d43bd9c2686e469,"public String alarmClock(int day, boolean vacation)
{
    if (vacation) { 
        if (day == 0 || day == 6) {
            return ""off"";
        } else {
            return ""10:00"";
        }
    } else {
        if (day == 0 || day == 6) {
            return ""10:00"";
        } else {
            return ""7:00"";
        }
    }
}
",
56cccc5e57b71638ae0f36747e6ae090dc81fe2d,"public int sum67(int[] nums)
{
    int count = 0;
    int seven = 0;
    
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] == 6)
        {
           for (int x = i + 1; x < nums.length; x++)
           {
               if (nums[x] != 7)
               {
                   count = count + 0;
               }
               else if (nums[x] == 7)
               {
                   count = count + 0;
                   i = i + x;
               }
           }
        
        }
        else
        {
        count = count + nums[i];
        }
        // i'm stuck on excluding numbers up till 7.
        // okay, i'm trying to say:
        // when you reach a 6, ignore the 6.
        // then, ignore each number until you reach a 7.
        
        // so perhaps the smarter way to state this is:
        // ahhh maybe a separate int to count 7's?
        
        // i'm thinking in the way the problem is laid out for me, where
        // i'm supposed to ""ignore"" sections of numbers
        
        // maybe just fucking count them all and ignore the ones in between 6 and 7
        
       
        
    }
    
    return count;
}

",
4465ac2e7e70f3ac5ddbd490bd262cc0c4f6249d,"public int[] frontPiece(int[] nums)
{
    int [] grid = new int[2];
    
    // establish logi for checking nums.
    // add the proper elements of nums into a new array 
    if (nums.length == 1)
    {
        return grid[0] = nums[0];
    }
    else if (nums.length == 0)
    {
        return grid;
    }
    else
    {
        grid[0] = nums[0];
        grid[1] = nums[1];
        return grid[];
    }
}
",
e73e062870f1d171b59cd904b257c0d67d7c10f8,"public int[] seriesUp(int n)
{
    int[] result = new int[n * (n + 1)/2];
    if (n == 0)
    {
        return result;
    }
    for	(int i = 1;i <= n; i++)
    {
        for (int a = 1; a <= i; a++)
        {
            result[i + a - 1] = a;
        }
    }
    return result;
}
",
98b41121a7f0c87d5746dc0ae2746596c4a8bb37,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
f33160f9d8c1a76b2c1ada81ffc8fe471a18ac18,"public int makeChocolate(int small, int big, int goal)
{
    int num = goal % 5; // small needed with enough big
    int num2 = goal / 5; // big needed exculeding small
    int count = 0;
    
    if (num > small || (num2 > big) && ((goal - (big * 5)) - small > 0)) 
    {
        return -1;
    }
    else if (num2 <= big) 
    {
        while (goal > 0 && big > 0)
        {
            goal = goal - 5;
            big --;
        }
        
        while (goal > 0)
        {
            goal --;
            count ++'
        }
    }
    else
    {
       return -2;
    }
}
",
9df1cbdbe2059e87bcede6e1d1033ffff3e609ed,"public int[] withoutTen(int[] nums)
{
  	int[] result = new int[nums.length];
  	int count = 0;
  	
    for (int i = 0; i < nums.length; i++)
    {
     	if (nums[i] != 10)
        {
         	result[count] = nums[i];
            count++;
        }
    }
    for (int i = 0; i < count; i++)
    {
     	result[result.length - i] = 0;
    }
    
    return result;
}
",
8a4197cd94d2fc278a10045f02c9323393eb70ad,"public boolean sameEnds(int[] nums, int n)
{
    for (int i = 0; i < n; i++)
    {
        if (nums[i] != nums[nums.length - n + i])
            return false;
    }
    return true;
}
",
a3cfe4acc0878f7a98ccbc168df9dff28266dbd7,"public int[] frontPiece(int[] nums)
{
    int [] grid = new int[2];
    
    // establish logi for checking nums.
    // add the proper elements of nums into a new array 
    if (nums.length == 1)
    {
        return grid[0] = nums[0];
    }
    else if (nums.length == 0)
    {
        return grid;
    }
    else
    {
        return grid[nums[0], nums[1]];
    }
}
",
b25bb0be3214d6ebfc03874ccb1735f374a8c287,"public boolean twoTwo(int[] nums)
{
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] == 2)
        {
            if (nums[i + 1] != 2)
            {
                i++;
                return false;
                
            }
        }
    }
    return true;
}
",
dbbe2c6beeefd93c68c1cf77a6130ed4323b9aa3,"public int countEvens(int[] nums)
{
    int count = 0;
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] % 2 == 0)
        {
            count++;
        }
    }
    return count;
}
",
4465ac2e7e70f3ac5ddbd490bd262cc0c4f6249d,"public int[] frontPiece(int[] nums)
{
    int [] grid = new int[2];
    
    // establish logi for checking nums.
    // add the proper elements of nums into a new array 
    if (nums.length == 1)
    {
        return grid[0] = nums[0];
    }
    else if (nums.length == 0)
    {
        return grid;
    }
    else
    {
        grid[0] = nums[0];
        grid[1] = nums[1];
        return grid[];
    }
}
",
a5ef4e9ae777060ed56015c4182bbe5b63e80d69,"public boolean evenlySpaced(int a, int b, int c)
{
    return (a == b && b ==c);
    return ((Math.abs(a-b) == Math.abs(b-c)) || (Math.abs(a-c) == Math.abs(a-b)) || (Math.abs(c-a) == Math.abs(b-c)));    
}
",
ecef8ffff5f622c9ab6799c53c46541bd578254a,"public int sum67(int[] nums)
{
    int sum = 0;
    boolean ifSix = false;
    for (int i = 0; i < nums.length; i++)
    {
        if (ifSix)
        {
            if (nums[i] == 7)
                ifSix = false;
        }
        else if (nums[i] == 6)
        {
            ifSix = true;
        }
        //if ifSix is true, then it goes back into the for loop 
        //and the first if statement becomes true
        else
        {
            sum = sum + nums[i];
        }
        //takes the sum of the numbers when there is no linee of numbers starting
        //with a 6 and ending with a 7
    }
    return sum;
}
",
6f326caf302bdfdbefc02faf1dc435ba9d9f04d6,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if ((nums[i] != val) && (nums[i + 1] != val))
        {
            return false;
        }          
        
    }
     return true;
}
",
6b9f55c88028fdb9f9e0adbb7f59b28fb9564c5a,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] != val)
        {
            if (i < nums.length - 1)
            {
                if (nums[i + 1] != val)
                {
                    return false;
                }
            }
        }
        
    }
    return true;
}
",
ec0734122f4add509acf5c24dba4d8ba253e0c85,"public int roundSum(int a, int b, int c)
{
    a = this.round10(a);
    b = this.round10(b);
    c = this.round10(c);
    
    int sum = a + b + c;
    
    return sum;
}

public int round10(int num)
{
    int remainder = num % 10;
    
    if (remainder >= 5)
    {
        // round up
        num = num + (10 - remainder);
    }
    else
    {
        // round down
        num = num - remainder;
    }
    
    return num;
}
",
fa7e52a8dd82b9e07db5c24a9f6640028d267b37,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] != val && nums[i + 1] != val)
        {
            return false;
        }
    }
    return true;
}
",
948b5b2528e52a0cd157a7b353521353f3da1fef,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
     return (isMom || (!(isAsleep)));

}
",
da986520180a13a98bb67c061d43bd9c2686e469,"public String alarmClock(int day, boolean vacation)
{
    if (vacation) { 
        if (day == 0 || day == 6) {
            return ""off"";
        } else {
            return ""10:00"";
        }
    } else {
        if (day == 0 || day == 6) {
            return ""10:00"";
        } else {
            return ""7:00"";
        }
    }
}
",
54f16f3c5196c9d23444381409e354f9fae465c0,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
2b92c031167d3664a0be5ab4cee6d5ad678ce824,"public int sum67(int[] nums)
{
    int count = 0;
    int seven = 0;
    
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] == 6)
        {
           for (int x = i; x < nums.length; x++)
           {
               if (nums[x] != 7)
               {
                   count = count + 0;
               }
               else if (nums[x] == 7)
               {
                   count = count + 0;
                   i = i + x;
               }
           }
        
        }
        
        count = count + nums[i];
        // i'm stuck on excluding numbers up till 7.
        // okay, i'm trying to say:
        // when you reach a 6, ignore the 6.
        // then, ignore each number until you reach a 7.
        
        // so perhaps the smarter way to state this is:
        // ahhh maybe a separate int to count 7's?
        
        // i'm thinking in the way the problem is laid out for me, where
        // i'm supposed to ""ignore"" sections of numbers
        
        // maybe just fucking count them all and ignore the ones in between 6 and 7
        
       
        
    }
    
    return count;
}

",
c3f23ac2ec5c833dc9221dad8b3933a5ab317603,"public boolean cigarParty(int cigars, boolean isWeekend)
{
    if (isWeekend)
        return (cigars >= 40);
    return (cigars >= 40 && cigars <= 60);
    
          
}
",
83a239f0521cd38117ddbaaf228f8523a019cc40,"public boolean endOther(String a, String b)
{
    return a.toLowerCase().endsWith(b.toLowerCase()) || b.toLowerCase().endsWith(a.toLowerCase());
}
",
8a4197cd94d2fc278a10045f02c9323393eb70ad,"public boolean sameEnds(int[] nums, int n)
{
    for (int i = 0; i < n; i++)
    {
        if (nums[i] != nums[nums.length - n + i])
            return false;
    }
    return true;
}
",
dbbe2c6beeefd93c68c1cf77a6130ed4323b9aa3,"public int countEvens(int[] nums)
{
    int count = 0;
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] % 2 == 0)
        {
            count++;
        }
    }
    return count;
}
",
de2b521aa2c62ce8dcb54219041aa20489dda3f4,"public int loneSum(int a, int b, int c)
{
    if (a == b && b == c)
        return 0;
    if (a == b)
        return c;
    if (b == c)
        return a;
    if (a == c)
        return b;
    return a + b + c;
}
",
93d04bbaaacbdc2e43e79af8101e3443d99f3216,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
CodeStateID,Code,
1ac085374f785c20ca501ac5939ec5977db8a972,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
    if (isAsleep)
    {
        return false;
    }
    
    if (isMorning)
    {
 		return false;   
    }
    
    return true;
}
",
708073e053068889622d8588b7bec2ceea644404,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
45bb0c43390b2898deab9a359cdda85e43e43e39,"public int[] shiftLeft(int[] nums)
{
    int[] result = new int[nums.length];
    for (int i = 0; i< nums.length - 1; i++)
    {
		result[i] = nums[i+1];
    }
    result[nums.length - 1] = nums[0];
    
    return result;
}
",
c4cd9fb76f3a67d4e774521d2a07bd1fe7cd0b11,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
f720cc450f616d826f746ce4609c79ab1860b68a,"public int[] fizzArray(int n)
{
    int[] result = new int[n];
        for (int i = 0; i<n.length;i++)
        {
            result[i-1] = i;
        }
    return result;
}
",
8f6dbd26c957f489904930b7ed0aa2950cd254af,"public String repeatEnd(String str, int n)
{
    String repeat = str.substring(str.length() - n);
    for (int i = 1; i < n; i++)
        //starts with the first letter of the string
    {
        repeat = repeat + str.substring(str.length() - n);
        //gets the part of the word that needs to be returned
    }
    return repeat;
    //returns the string made out of the n repetitions
}
",
afec4a1fda7760651e34095e9ceef8a8483018be,"public boolean sameEnds(int[] nums, int n)
{
    
    for (int i = 0; i <= n; i++)
    {
        if (nums[i] != nums[nums.length - n + i - 1])
        {
            return false;
        }
    }
    return true;
}
",
fa7e52a8dd82b9e07db5c24a9f6640028d267b37,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] != val && nums[i + 1] != val)
        {
            return false;
        }
    }
    return true;
}
",
ec0734122f4add509acf5c24dba4d8ba253e0c85,"public int roundSum(int a, int b, int c)
{
    a = this.round10(a);
    b = this.round10(b);
    c = this.round10(c);
    
    int sum = a + b + c;
    
    return sum;
}

public int round10(int num)
{
    int remainder = num % 10;
    
    if (remainder >= 5)
    {
        // round up
        num = num + (10 - remainder);
    }
    else
    {
        // round down
        num = num - remainder;
    }
    
    return num;
}
",
3d4c98b74adf52d4ca5fe21febb24b1a8f6a6120,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++) {
        if (nums[i] != val && nums[i + 1] != val) {
            return false;
        }
    }
    return true;
}
",
98b41121a7f0c87d5746dc0ae2746596c4a8bb37,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
e782e855c718d5d72eb1c47b31cc0c9050d6b269,"public String without2(String str) 
{
    // Given a string, if a length 2 substring appears at both its beginning and end,
// return a string without the substring at the beginning, so ""HelloHe"" yields ""lloHe"".
// The substring may overlap with itself, so ""Hi"" yields """". Otherwise, return the original string unchanged.
public String without2(String str)
{
	int len = str.length();
	if(len >= 2)
	{
		if(str.substring(0,2).equals(str.substring(len-2, len)))
			return str.substring(2);
		else
			return str;
	}
	else
		return str;
}
}
",
33e1684529896667b663d935101657bf9205ef10,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] != val && nums[i + 1] != val)
            return false;
    }
    return true;
}
",
f33160f9d8c1a76b2c1ada81ffc8fe471a18ac18,"public int makeChocolate(int small, int big, int goal)
{
    int num = goal % 5; // small needed with enough big
    int num2 = goal / 5; // big needed exculeding small
    int count = 0;
    
    if (num > small || (num2 > big) && ((goal - (big * 5)) - small > 0)) 
    {
        return -1;
    }
    else if (num2 <= big) 
    {
        while (goal > 0 && big > 0)
        {
            goal = goal - 5;
            big --;
        }
        
        while (goal > 0)
        {
            goal --;
            count ++'
        }
    }
    else
    {
       return -2;
    }
}
",
dbbe2c6beeefd93c68c1cf77a6130ed4323b9aa3,"public int countEvens(int[] nums)
{
    int count = 0;
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] % 2 == 0)
        {
            count++;
        }
    }
    return count;
}
",
4969ff57664d96172e1d837e2441b526164e9da1,"public int greenTicket(int a, int b, int c)
{
    if (a != b && b != c && a != c)
    {
        return 0;
    }
    else if (a == b && b == c)
    {
        return 20;
    }
    else
    {
        return 10;
    }
}
",
c32e8df18759f85c9ca9cc1ff3051aa396bf5a33,"public boolean evenlySpaced(int a, int b, int c)
{
    int[3] arrInOrder;
    arrInOrder[0] = a;
    arrInOrder[1] = b;
    arrInOrder[2] = c;
    
    int small;
    int med, big;
   /**
    if ((a > b) && (a > c)) // if a is the biggest
   {
		if (b > c)
        {
            big = a;
            med = b;
            small = c;
        }
       else
       {
           
       }
       
   }
   */
}
",
f7613e1314baffe2be7c9164f5586a14e6e82fd6,"public int countCode(String str)
{
    int count = 0;
    for (int i = 0; i < str.length() - 4; i++) {
        if (str.substring(i, i + 1).equals(""co"") && str.charAt(i + 3) == 'e') {
            count++;
        }
    }
    return count;
}
",
931bdaaf31f894404e5b5a484f746f1c9d3bd27d,"public int greenTicket(int a, int b, int c)
{
    if (a != b && b != c && a != c)
    {
        return 0;
    }
    else if (a == b && b == c)
    {
        return 20;
    }
    else
    {
        return 10;
    }
}
",
c1fdbe3e9fca73de72f1831d00c35304cb29463e,"public int[] fizzArray(int n)
{
    int[] result = new int[n];
    for (int i = 0; i < n; i++)
    {
        result[i] = i;
    }
    return result;
}
",
f8a88d04552686ba064b8db06f097f9921d6b1eb,"public boolean in1To10(int n, boolean outsideMode)
{
    if (outsideMode)
		return (n <= 1 || n >= 10);
	else
    return (n >= 1 && n <= 10);
}
",
a3cfe4acc0878f7a98ccbc168df9dff28266dbd7,"public int[] frontPiece(int[] nums)
{
    int [] grid = new int[2];
    
    // establish logi for checking nums.
    // add the proper elements of nums into a new array 
    if (nums.length == 1)
    {
        return grid[0] = nums[0];
    }
    else if (nums.length == 0)
    {
        return grid;
    }
    else
    {
        return grid[nums[0], nums[1]];
    }
}
",
96649403e3463cc1c05171bea6b6b5e9d2710fe4,"public boolean isEverywhere(int[] nums, int val)
{
//    for (int i = 0; i < nums.length; i++)
//    {
  //   	if (nums[i] != val || nums[i++] != val)
    //    {
      //      return false;
        //}
    //}
    //return true;
    
    for (int i = 0; i <=nums.length-2;i++)

{

if ( nums[i] != val && nums[i+1] != val)

result = false;

}

  return result;

}
",
4ba46181a66bb2f3cf45d38876db8736b1ebda46,"public boolean in1To10(int n, boolean outsideMode)
{
    return ((n >= 1 && n<=10 && !outsideMode) || (n > 10 || n < 1 && outsideMode));
}
",
4465ac2e7e70f3ac5ddbd490bd262cc0c4f6249d,"public int[] frontPiece(int[] nums)
{
    int [] grid = new int[2];
    
    // establish logi for checking nums.
    // add the proper elements of nums into a new array 
    if (nums.length == 1)
    {
        return grid[0] = nums[0];
    }
    else if (nums.length == 0)
    {
        return grid;
    }
    else
    {
        grid[0] = nums[0];
        grid[1] = nums[1];
        return grid[];
    }
}
",
45bb0c43390b2898deab9a359cdda85e43e43e39,"public int[] shiftLeft(int[] nums)
{
    int[] result = new int[nums.length];
    for (int i = 0; i< nums.length - 1; i++)
    {
		result[i] = nums[i+1];
    }
    result[nums.length - 1] = nums[0];
    
    return result;
}
",
14ced47f38f6da0c3afcc08c0bcb9ed96b5c73fe,"public String getSandwich(String str)
{
    if (str.indexOf(""bread"") > 0) // if there are two peices of bread
    {
         System.out.print(str.indexOf(""bread""));
        return ""no"";
    }
    else
    {
        return """";
    }
}
",
b1734b84d9123cc28d3f62e758b480ab26ea8fb9,"public int sortaSum(int a, int b)
{
   int sum = a + b;
   if (sum >= 10 && sum <= 19)
   {
   		return 20; 
   }
   else
   {
   		return sum;
   }
}
",
e05151e763b22c6322f72dd9558578b0970a10d6,"public boolean canBalance(int[] nums)
{
    double sum = 0;
    for (int n : nums) {
        sum += n;
    }
    
    double target = sum / 2;
    sum = 0;
    
    for (int i : nums) {
        sum += i;
        if (sum == target) {
            return true;
        }
    }
    return false;
}
",
b1ffd079f8c4294a66e06ad7d2fb2a7a8fbe7344,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
8a4197cd94d2fc278a10045f02c9323393eb70ad,"public boolean sameEnds(int[] nums, int n)
{
    for (int i = 0; i < n; i++)
    {
        if (nums[i] != nums[nums.length - n + i])
            return false;
    }
    return true;
}
",
abf203f02a8e6355f71ebc0195c9c4f08db3dca9,"public int greenTicket(int a, int b, int c)
{ 
    if (a == b && b == c){
        return 20;
    }
    if (a == b || b == c || a == c){
        return 10;
    }
    return 0;
}
",
e1377201338b35fe171b9444b54cc7c825b47de7,"public int greenTicket(int a, int b, int c)
{
    if (a == b && b == c) //if two numbers are the same
        return 20;
    if (a == b || a == c || b == c) //if all the numbers are the same
        return 10;
    else //none of the numbers are the same
        return 0;
}
",
6f326caf302bdfdbefc02faf1dc435ba9d9f04d6,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if ((nums[i] != val) && (nums[i + 1] != val))
        {
            return false;
        }          
        
    }
     return true;
}
",
3d4c98b74adf52d4ca5fe21febb24b1a8f6a6120,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++) {
        if (nums[i] != val && nums[i + 1] != val) {
            return false;
        }
    }
    return true;
}
",
dbbe2c6beeefd93c68c1cf77a6130ed4323b9aa3,"public int countEvens(int[] nums)
{
    int count = 0;
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] % 2 == 0)
        {
            count++;
        }
    }
    return count;
}
",
0eefe10c954547a7675d5ee81f88d4d112cf44e9,"public boolean bobThere(String str)
{
    for (int i = 0; i < str.length() - 2; i++) {
        if (str.charAt(i) == 'b' && str.charAt(i + 2) == 'b') {
            return true;
        }
    }
    return false;
}
",
54f16f3c5196c9d23444381409e354f9fae465c0,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
59a0088f887207b9450033d0bec152a0c9e18bab,"public int[] shiftLeft(int[] nums)
{
    int[] result = new int[nums.length]; 
    result[nums.length - 1] = nums[0]; 
    int j = 0; 
    for (int i = 1; i < nums.length - 1; i++)
    {
        result[j] = nums[i];
        j++; 
    }
    
    return result; 
}
",
c1fdbe3e9fca73de72f1831d00c35304cb29463e,"public int[] fizzArray(int n)
{
    int[] result = new int[n];
    for (int i = 0; i < n; i++)
    {
        result[i] = i;
    }
    return result;
}
",
2b92c031167d3664a0be5ab4cee6d5ad678ce824,"public int sum67(int[] nums)
{
    int count = 0;
    int seven = 0;
    
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] == 6)
        {
           for (int x = i; x < nums.length; x++)
           {
               if (nums[x] != 7)
               {
                   count = count + 0;
               }
               else if (nums[x] == 7)
               {
                   count = count + 0;
                   i = i + x;
               }
           }
        
        }
        
        count = count + nums[i];
        // i'm stuck on excluding numbers up till 7.
        // okay, i'm trying to say:
        // when you reach a 6, ignore the 6.
        // then, ignore each number until you reach a 7.
        
        // so perhaps the smarter way to state this is:
        // ahhh maybe a separate int to count 7's?
        
        // i'm thinking in the way the problem is laid out for me, where
        // i'm supposed to ""ignore"" sections of numbers
        
        // maybe just fucking count them all and ignore the ones in between 6 and 7
        
       
        
    }
    
    return count;
}

",
faa6cc44696d72e0fa85cc561584a1de159a4aa5,"public int dateFashion(int you, int date)
{
    if (you <= 2 || date <= 2)
        return 0;
    if (you >= 8 || date >= 8)
        return 2;
    return 1;
}
",
b05268e4079f92fa8c479a385b128576976d16c9,"public String atFirst(String str)
{
    String result = str.substring(0, 2);
    
    String value = '@';
    
    if (result.length() == 0)
    {
        result.charAt(0) = '@';
        result(1) = '@';
    }
    else if (result.length() == 1)
    {
        result(1) = '@';
    }
    else
    {
        result = result;
    }
    
    return result;
}
",
9c1b24f0268b9d5238feaf59114da5d3b827e88f,"public boolean bobThere(String str)
{
    for (int i = 0; i < str.length() - 2; i++) 
    {
    if (str.charAt(i) == 'b' && str.charAt(i + 2) == 'b')
    {
        return true;
    }
    }
    return false;
}
",
9df1cbdbe2059e87bcede6e1d1033ffff3e609ed,"public int[] withoutTen(int[] nums)
{
  	int[] result = new int[nums.length];
  	int count = 0;
  	
    for (int i = 0; i < nums.length; i++)
    {
     	if (nums[i] != 10)
        {
         	result[count] = nums[i];
            count++;
        }
    }
    for (int i = 0; i < count; i++)
    {
     	result[result.length - i] = 0;
    }
    
    return result;
}
",
e782e855c718d5d72eb1c47b31cc0c9050d6b269,"public String without2(String str) 
{
    // Given a string, if a length 2 substring appears at both its beginning and end,
// return a string without the substring at the beginning, so ""HelloHe"" yields ""lloHe"".
// The substring may overlap with itself, so ""Hi"" yields """". Otherwise, return the original string unchanged.
public String without2(String str)
{
	int len = str.length();
	if(len >= 2)
	{
		if(str.substring(0,2).equals(str.substring(len-2, len)))
			return str.substring(2);
		else
			return str;
	}
	else
		return str;
}
}
",
f8a88d04552686ba064b8db06f097f9921d6b1eb,"public boolean in1To10(int n, boolean outsideMode)
{
    if (outsideMode)
		return (n <= 1 || n >= 10);
	else
    return (n >= 1 && n <= 10);
}
",
a641c5efbb7e5f53f92580571992aa0a53d6cdf6,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
6b9f55c88028fdb9f9e0adbb7f59b28fb9564c5a,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] != val)
        {
            if (i < nums.length - 1)
            {
                if (nums[i + 1] != val)
                {
                    return false;
                }
            }
        }
        
    }
    return true;
}
",
e782e855c718d5d72eb1c47b31cc0c9050d6b269,"public String without2(String str) 
{
    // Given a string, if a length 2 substring appears at both its beginning and end,
// return a string without the substring at the beginning, so ""HelloHe"" yields ""lloHe"".
// The substring may overlap with itself, so ""Hi"" yields """". Otherwise, return the original string unchanged.
public String without2(String str)
{
	int len = str.length();
	if(len >= 2)
	{
		if(str.substring(0,2).equals(str.substring(len-2, len)))
			return str.substring(2);
		else
			return str;
	}
	else
		return str;
}
}
",
8a4197cd94d2fc278a10045f02c9323393eb70ad,"public boolean sameEnds(int[] nums, int n)
{
    for (int i = 0; i < n; i++)
    {
        if (nums[i] != nums[nums.length - n + i])
            return false;
    }
    return true;
}
",
eb9d1e97323f6c0c1410dd8ae35aa261280fc389,"public boolean endOther(String a, String b)
{
    a = a.toLowerCase();
    b = a.toLowerCase();
    return(a.endsWith(b) || b.endsWith(a));
    
    
}
",
708073e053068889622d8588b7bec2ceea644404,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
62ce70304358abfdd932378fb6cd7769b980fdc9,"public int noTeenSum(int a, int b, int c)
{
	return fixTeen(a) + fixTeen(b) + fixTeen(c);
}

public int fixTeen(int n)
{
    if (13 <= n && n <= 19)
    {
        if (n != 15 || n != 16)
        {
            n = 0;
        }
        return n;
    }
}
",
1ac085374f785c20ca501ac5939ec5977db8a972,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
    if (isAsleep)
    {
        return false;
    }
    
    if (isMorning)
    {
 		return false;   
    }
    
    return true;
}
",
db19ea5f1cabdb8d39c12a6acfc593bd85bf4f95,"public int[] tenRun(int[] nums)
{
    for (int i = 0; i < nums.length; i++)
    {
    	if (nums[i] % 10 == 0)
    	{
     	   for (int j = i + 1; j < nums.length && nums[j] % 10 != 0; j++)
           {
            	nums[j] = nums[i];   
           }
    	}
    }
    return nums;
}
",
eee0eb76d7c982f7cdbbfb86dbf032940b49e38b,"public int luckySum(int a, int b, int c)
{
    if (a == 13) // if a is equal to 13
        return 0;
    if (b == 13) // if b is equal to 13 go to the a value
        return a;
    if (c == 13) //if c is 13, only add  and b
        return (a + b);
    return (a + b + c); //if none of the others,add all the numbers
}
",
c32e8df18759f85c9ca9cc1ff3051aa396bf5a33,"public boolean evenlySpaced(int a, int b, int c)
{
    int[3] arrInOrder;
    arrInOrder[0] = a;
    arrInOrder[1] = b;
    arrInOrder[2] = c;
    
    int small;
    int med, big;
   /**
    if ((a > b) && (a > c)) // if a is the biggest
   {
		if (b > c)
        {
            big = a;
            med = b;
            small = c;
        }
       else
       {
           
       }
       
   }
   */
}
",
0eefe10c954547a7675d5ee81f88d4d112cf44e9,"public boolean bobThere(String str)
{
    for (int i = 0; i < str.length() - 2; i++) {
        if (str.charAt(i) == 'b' && str.charAt(i + 2) == 'b') {
            return true;
        }
    }
    return false;
}
",
b1734b84d9123cc28d3f62e758b480ab26ea8fb9,"public int sortaSum(int a, int b)
{
   int sum = a + b;
   if (sum >= 10 && sum <= 19)
   {
   		return 20; 
   }
   else
   {
   		return sum;
   }
}
",
fa7e52a8dd82b9e07db5c24a9f6640028d267b37,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] != val && nums[i + 1] != val)
        {
            return false;
        }
    }
    return true;
}
",
a641c5efbb7e5f53f92580571992aa0a53d6cdf6,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
ecd2767c2649044a0da26903ef340674e89f1009,"public int[] fix45(int[] nums) {
  int[] result = nums;
  for(int i = 0; i < result.length; i++) {
      if(result[i] == 4 && i != result.length) {
          int index = findIndexOfValidFive(result);
           
          if(index != -1) {
              int temp = result[i + 1];
              result[i + 1] = result[index];
              result[index] = temp;
          }
      }
  }  
   
  return result;
}
 
public int findIndexOfValidFive(int[] nums) {
    for(int i = 0; i < nums.length; i++) {
        if((i == 0 && nums[i] == 5) || (nums[i] == 5 && nums[i - 1] != 4)) {
            return i;
        }
    }
     
    return -1;",
ecef8ffff5f622c9ab6799c53c46541bd578254a,"public int sum67(int[] nums)
{
    int sum = 0;
    boolean ifSix = false;
    for (int i = 0; i < nums.length; i++)
    {
        if (ifSix)
        {
            if (nums[i] == 7)
                ifSix = false;
        }
        else if (nums[i] == 6)
        {
            ifSix = true;
        }
        //if ifSix is true, then it goes back into the for loop 
        //and the first if statement becomes true
        else
        {
            sum = sum + nums[i];
        }
        //takes the sum of the numbers when there is no linee of numbers starting
        //with a 6 and ending with a 7
    }
    return sum;
}
",
2ab613317018e535c7c370e1bf3fb0d86c7a9f9b,"public int[] tenRun(int[] nums)
{
    int[] result = new int[nums.length];
    int input;
    int value = -1;
    
    for (int i = 0; i < nums.length; i++)
    {
        input = nums[i];
        
        if (input % 10 == 0 && input > value)
        {
            value = input;
        }
        
        if (value == -1)
        {
            result[i] = input;
        }
        else
        {
            result[i] = value;
        }
    }
    
    return result;
}
",
c3f23ac2ec5c833dc9221dad8b3933a5ab317603,"public boolean cigarParty(int cigars, boolean isWeekend)
{
    if (isWeekend)
        return (cigars >= 40);
    return (cigars >= 40 && cigars <= 60);
    
          
}
",
c6e135a8d819808a2e86f6eb184fd9701ef4cea6,"public int[] withoutTen(int[] nums)
{
    //creates new array
    int[] newArray = new int[nums.length];
	int j = 0;
	for(int i = 0; i < nums.length; i++)
	{
		if(nums[i] != 10)
		{
			newArray[j] = nums[i];
			j++;
		}
	}
	// returns the new array
	return newArray;
}
",
f7613e1314baffe2be7c9164f5586a14e6e82fd6,"public int countCode(String str)
{
    int count = 0;
    for (int i = 0; i < str.length() - 4; i++) {
        if (str.substring(i, i + 1).equals(""co"") && str.charAt(i + 3) == 'e') {
            count++;
        }
    }
    return count;
}
",
7862665265faf85e50ada49c030c401c79b4301c,"public boolean sameEnds(int[] nums, int n)
{
    for (int i = 0; i < n; i++)
    {
        if (nums[i] != nums[nums.length - (n - i)])
        {
            return false;
        }
    }
    
    return true;
}
",
a641c5efbb7e5f53f92580571992aa0a53d6cdf6,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
83a239f0521cd38117ddbaaf228f8523a019cc40,"public boolean endOther(String a, String b)
{
    return a.toLowerCase().endsWith(b.toLowerCase()) || b.toLowerCase().endsWith(a.toLowerCase());
}
",
b7d5d5590bde31e23ee41e67ec8ade069279409e,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    if (isBirthday) speed >= 5;
    if (speed <= 60) return 0;
    return (speed > 60 && speed <= 80) ? 1 : 2;
}
",
dd09babe580586f1680177c5f9004d2f1f2011bf,"public boolean has77(int[] nums)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] == 7 && nums[i + 1] == 7)
            return true;
        if (nums[i] < nums.length - 2 && nums[i] == 7 && nums[i + 2] == 7)
            return true;
    }
    return false;
}
",
b18357d08d239c3169eb42bdabc04d80a3bba5bf,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
    if (isAsleep) 
    {
        return false;
    }
    if (isMorning && !isMom) 
    {
        return false;
    }
    return true;
}
",
1246d82dc38af3da4d77890172a9d1890cc382a1,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
eee0eb76d7c982f7cdbbfb86dbf032940b49e38b,"public int luckySum(int a, int b, int c)
{
    if (a == 13) // if a is equal to 13
        return 0;
    if (b == 13) // if b is equal to 13 go to the a value
        return a;
    if (c == 13) //if c is 13, only add  and b
        return (a + b);
    return (a + b + c); //if none of the others,add all the numbers
}
",
b1ffd079f8c4294a66e06ad7d2fb2a7a8fbe7344,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
8f6dbd26c957f489904930b7ed0aa2950cd254af,"public String repeatEnd(String str, int n)
{
    String repeat = str.substring(str.length() - n);
    for (int i = 1; i < n; i++)
        //starts with the first letter of the string
    {
        repeat = repeat + str.substring(str.length() - n);
        //gets the part of the word that needs to be returned
    }
    return repeat;
    //returns the string made out of the n repetitions
}
",
e22ce5e6a4c5b1b12e61c7366855f779f8ae64f3,"public String atFirst(String str)
{
    if (str.length() >= 2)
    {
        return (str.substring(0, 2));
    }
    else if (str.length() == 1)
    {
        return str + ""@"";
    }
    else
    {
        return ""@@"";
    }
}
",
93d04bbaaacbdc2e43e79af8101e3443d99f3216,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
1202d346fcf0db46d6a29cff9b13366969ee2df1,"public String atFirst(String str)
{
    if (str.length() >= 2)
    {
        return (str.substring(0,2));
    }
    else if (str.length() == 1)
    {
        return (str + ""@"");
    }
    else
    {
        return (""@@"");
    }
}
",
07e5044ee85fdfbd00a05896e4320766869d1163,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
83a239f0521cd38117ddbaaf228f8523a019cc40,"public boolean endOther(String a, String b)
{
    return a.toLowerCase().endsWith(b.toLowerCase()) || b.toLowerCase().endsWith(a.toLowerCase());
}
",
fa7e52a8dd82b9e07db5c24a9f6640028d267b37,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] != val && nums[i + 1] != val)
        {
            return false;
        }
    }
    return true;
}
",
3d4c98b74adf52d4ca5fe21febb24b1a8f6a6120,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++) {
        if (nums[i] != val && nums[i + 1] != val) {
            return false;
        }
    }
    return true;
}
",
56cccc5e57b71638ae0f36747e6ae090dc81fe2d,"public int sum67(int[] nums)
{
    int count = 0;
    int seven = 0;
    
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] == 6)
        {
           for (int x = i + 1; x < nums.length; x++)
           {
               if (nums[x] != 7)
               {
                   count = count + 0;
               }
               else if (nums[x] == 7)
               {
                   count = count + 0;
                   i = i + x;
               }
           }
        
        }
        else
        {
        count = count + nums[i];
        }
        // i'm stuck on excluding numbers up till 7.
        // okay, i'm trying to say:
        // when you reach a 6, ignore the 6.
        // then, ignore each number until you reach a 7.
        
        // so perhaps the smarter way to state this is:
        // ahhh maybe a separate int to count 7's?
        
        // i'm thinking in the way the problem is laid out for me, where
        // i'm supposed to ""ignore"" sections of numbers
        
        // maybe just fucking count them all and ignore the ones in between 6 and 7
        
       
        
    }
    
    return count;
}

",
98b41121a7f0c87d5746dc0ae2746596c4a8bb37,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
6ccaf37a8d9757fc57014287316ecd9409820fe7,"public int sortaSum(int a, int b)
{
    int sum = a + b;
    
    if (sum >= 10 || sum <= 19)
        return 20;
    else
        return sum;
    
}
",
faa6cc44696d72e0fa85cc561584a1de159a4aa5,"public int dateFashion(int you, int date)
{
    if (you <= 2 || date <= 2)
        return 0;
    if (you >= 8 || date >= 8)
        return 2;
    return 1;
}
",
6b538f7d9eac6f8c54cd2c59a699ca73280e0930,"public class FizzArray {

//fizzArray is a method which takes input n and prepares fizzArray

public static int[] fizzArray(int n) {

//initializing integer array with size n

int[] result = new int[n];

for (int i = 0; i < n; i++){

result[i] = i;

}

return result;

}
",
8a784cb08df86d4814219f2b557c5cfa0f28180c,"public boolean cigarParty(int cigars, boolean isWeekend)
{
    if (isWeekend)
    {
        return (cigars >= 40);
    else
    {
        return (cigars >= 40 && cigars <= 60);
    }
}
",
abf203f02a8e6355f71ebc0195c9c4f08db3dca9,"public int greenTicket(int a, int b, int c)
{ 
    if (a == b && b == c){
        return 20;
    }
    if (a == b || b == c || a == c){
        return 10;
    }
    return 0;
}
",
14ced47f38f6da0c3afcc08c0bcb9ed96b5c73fe,"public String getSandwich(String str)
{
    if (str.indexOf(""bread"") > 0) // if there are two peices of bread
    {
         System.out.print(str.indexOf(""bread""));
        return ""no"";
    }
    else
    {
        return """";
    }
}
",
3a5b1294ef5b59964830e8cf8f6219db0c34b7d8,"public int blackjack(int a, int b)
{
    double remainA;
    remainA = (a % 21); //NOTE: The '%' yields the remainder!!!!
    double remainB;
    remainB =  (b % 21);
    
    // IF the remainder is large for one number, IT IS FAR AWAY from 21.
    if (a > 21 && b > 21)
    {
        return 0;
    }
    else if (a < 21 || b < 21)
    {
        if (a < 21 && b > 21)
        {
            return a;
        }
        else
        {
            return b;
        }
    }
    else
    {
        if (remainA > remainB)
        {
            return b;
        }
        else
        {
            return a;
        }
    }
}",
bbf414c607917bae018f323952576cc4855d0403,"public int[] fix45(int[] nums)
{
    int[] fours = new int [3];
    int[] fives = new int[3];
    int index4=0;
    int index5 = 0;
    for (int i=0; i<nums.length;i++)
    {
        if (nums[i] == 4)
        {
            fours[index4] = i;
            index4++;
        }
        else if (nums[i] == 5)
        {
            fives[index5] = i;
            index5++;
        }
    }
    for (int i = index5-1; i>=0;i--)
    {
        if (nums[fours[i]+1]!=5)
        {
        	nums[fives[i]] = nums[fours[i]+1];
        	nums[fours[i]+1] = 5;
        }
    }
    
    
    
    
    //int start = 0;
    //int skip = -1;
    //for (int i=0; i<nums.length;i++)
    //{
    //    if (nums[i] == 4)
    //    {
    //        for (int j=start; j<nums.length;j++)
   	//		{
    //            if (j!=skip && nums[j]==5)
    //            {
    //                nums[j]=nums[i+1];
    //                nums[i+1]=5;
    //                skip = i+1;
    //                break;
    //            }
    //        }
    //    }
    //}
    return nums;
}
",
2ab613317018e535c7c370e1bf3fb0d86c7a9f9b,"public int[] tenRun(int[] nums)
{
    int[] result = new int[nums.length];
    int input;
    int value = -1;
    
    for (int i = 0; i < nums.length; i++)
    {
        input = nums[i];
        
        if (input % 10 == 0 && input > value)
        {
            value = input;
        }
        
        if (value == -1)
        {
            result[i] = input;
        }
        else
        {
            result[i] = value;
        }
    }
    
    return result;
}
",
f8a88d04552686ba064b8db06f097f9921d6b1eb,"public boolean in1To10(int n, boolean outsideMode)
{
    if (outsideMode)
		return (n <= 1 || n >= 10);
	else
    return (n >= 1 && n <= 10);
}
",
3d4c98b74adf52d4ca5fe21febb24b1a8f6a6120,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++) {
        if (nums[i] != val && nums[i + 1] != val) {
            return false;
        }
    }
    return true;
}
",
9df1cbdbe2059e87bcede6e1d1033ffff3e609ed,"public int[] withoutTen(int[] nums)
{
  	int[] result = new int[nums.length];
  	int count = 0;
  	
    for (int i = 0; i < nums.length; i++)
    {
     	if (nums[i] != 10)
        {
         	result[count] = nums[i];
            count++;
        }
    }
    for (int i = 0; i < count; i++)
    {
     	result[result.length - i] = 0;
    }
    
    return result;
}
",
6ccaf37a8d9757fc57014287316ecd9409820fe7,"public int sortaSum(int a, int b)
{
    int sum = a + b;
    
    if (sum >= 10 || sum <= 19)
        return 20;
    else
        return sum;
    
}
",
d3bbd5372c67b93d7e4c5f3425ac793bb5763980,"public int sortaSum(int a, int b)
{
    int sum = a + b;
    if (sum >= 10 && sum <= 19)
        return 20;
    return sum;
}
",
f720cc450f616d826f746ce4609c79ab1860b68a,"public int[] fizzArray(int n)
{
    int[] result = new int[n];
        for (int i = 0; i<n.length;i++)
        {
            result[i-1] = i;
        }
    return result;
}
",
b1734b84d9123cc28d3f62e758b480ab26ea8fb9,"public int sortaSum(int a, int b)
{
   int sum = a + b;
   if (sum >= 10 && sum <= 19)
   {
   		return 20; 
   }
   else
   {
   		return sum;
   }
}
",
c32e8df18759f85c9ca9cc1ff3051aa396bf5a33,"public boolean evenlySpaced(int a, int b, int c)
{
    int[3] arrInOrder;
    arrInOrder[0] = a;
    arrInOrder[1] = b;
    arrInOrder[2] = c;
    
    int small;
    int med, big;
   /**
    if ((a > b) && (a > c)) // if a is the biggest
   {
		if (b > c)
        {
            big = a;
            med = b;
            small = c;
        }
       else
       {
           
       }
       
   }
   */
}
",
b1ffd079f8c4294a66e06ad7d2fb2a7a8fbe7344,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
54f16f3c5196c9d23444381409e354f9fae465c0,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
07e5044ee85fdfbd00a05896e4320766869d1163,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
db19ea5f1cabdb8d39c12a6acfc593bd85bf4f95,"public int[] tenRun(int[] nums)
{
    for (int i = 0; i < nums.length; i++)
    {
    	if (nums[i] % 10 == 0)
    	{
     	   for (int j = i + 1; j < nums.length && nums[j] % 10 != 0; j++)
           {
            	nums[j] = nums[i];   
           }
    	}
    }
    return nums;
}
",
1ac085374f785c20ca501ac5939ec5977db8a972,"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{
    if (isAsleep)
    {
        return false;
    }
    
    if (isMorning)
    {
 		return false;   
    }
    
    return true;
}
",
33e1684529896667b663d935101657bf9205ef10,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] != val && nums[i + 1] != val)
            return false;
    }
    return true;
}
",
37483792e65efa307aab5d74a47b4a1dbe36e195,"public boolean bobThere(String str)
{
    //int firstB = str.indexOf(""b"");
   // int secondB = str.lastIndexOf(""b"");
    //if (secondB == firstB + 2)
    //    return true;
   // return false;
    for (int n == 0; n < str.length(); n++)
    {
        if ((str.charAt(n) == str.indexOf(""b"") && (str.charAt(n + 2) == str.indexOf(""b"", n))
        {
            return true;
        }
                
    }//end for loop
    return false;
}
",
59a0088f887207b9450033d0bec152a0c9e18bab,"public int[] shiftLeft(int[] nums)
{
    int[] result = new int[nums.length]; 
    result[nums.length - 1] = nums[0]; 
    int j = 0; 
    for (int i = 1; i < nums.length - 1; i++)
    {
        result[j] = nums[i];
        j++; 
    }
    
    return result; 
}
",
98b41121a7f0c87d5746dc0ae2746596c4a8bb37,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
dbbe2c6beeefd93c68c1cf77a6130ed4323b9aa3,"public int countEvens(int[] nums)
{
    int count = 0;
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] % 2 == 0)
        {
            count++;
        }
    }
    return count;
}
",
67e32e60ccf94c9e237b1ee60eec88d54337ee46,"public int noTeenSum(int a, int b, int c)
{
	return fixTeen(a) + fixTeen(b) + fixTeen(c);
}

public int fixTeen(int n)
{
    if (( n > 12 && n < 15) ||( n > 16 && n < 20 )) {
     return 0;
   }
   return n;
}
",
6e2e62d18f30974998599ac300549d4eb85fb22c,"public static int[] fizzArray(int n) {

//initializing integer array with size n

int[] result = new int[n];

for (int i = 0; i < n; i++){

result[i] = i;

}

return result;

}
",
9df1cbdbe2059e87bcede6e1d1033ffff3e609ed,"public int[] withoutTen(int[] nums)
{
  	int[] result = new int[nums.length];
  	int count = 0;
  	
    for (int i = 0; i < nums.length; i++)
    {
     	if (nums[i] != 10)
        {
         	result[count] = nums[i];
            count++;
        }
    }
    for (int i = 0; i < count; i++)
    {
     	result[result.length - i] = 0;
    }
    
    return result;
}
",
93d04bbaaacbdc2e43e79af8101e3443d99f3216,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
3d4c98b74adf52d4ca5fe21febb24b1a8f6a6120,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++) {
        if (nums[i] != val && nums[i + 1] != val) {
            return false;
        }
    }
    return true;
}
",
8ea0e17b60756ae019215592cbd3e7a8e04b0965,"public int countClumps(int[] nums)
{
    int clumps = 0;
    boolean isClump = false;
    for (int i = 0; i < nums.length - 1; i += 1) {
         if (isClump) {
             if {nums[i] != num[i + 1]) {
                 isClump = false;
             }
             else {
                 isClump = true;
                 clumps += 1;
             }
                }
         }
         return clumps;
}
",
cfc6cb87b23f11a2f4bbbf92a708643e8012b8fb,"public int countEvens(int[] nums)
{	
    int count = 0;
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] % 2 == 0))
        {
            count++;
        }
    }
    return count;
}
",
62ce70304358abfdd932378fb6cd7769b980fdc9,"public int noTeenSum(int a, int b, int c)
{
	return fixTeen(a) + fixTeen(b) + fixTeen(c);
}

public int fixTeen(int n)
{
    if (13 <= n && n <= 19)
    {
        if (n != 15 || n != 16)
        {
            n = 0;
        }
        return n;
    }
}
",
5774f2b700d8dfc9f30cd922b782e6b4d38d8924,"public boolean in1To10(int n, boolean outsideMode)
{
    if (outsideMode)
    {
        return (n <= 1 || n >= 10);
    }
    
    return (n >= 1 && n <= 10);
}
",
33e1684529896667b663d935101657bf9205ef10,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] != val && nums[i + 1] != val)
            return false;
    }
    return true;
}
",
9e81d1a2a7638c14b721846f5090b36ad07ab308,"public int[] seriesUp(int n)
{
    int[] result = new int[(n * (n + 1)) / 2];
    int count = 1;
    int index = 0;
    for (int i = 0; i < result.length; i++)
    {
        for (int j = 0; j < count; j++)
        {
            result[index] = j;
        	index++;
        }
        count++;
    }
}
",
324744e665f46a82492205626535ae0a59adced1,"public int countEvens(int[] nums)
{
    int count = 0;
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] % 2 == 0)
        {
            count++;
        }
    }
    return count;
}
",
cdf42d5c2d560cf867cc0f628e892b8731b4a6c5,"public boolean twoTwo(int[] nums)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] == 2 && nums[i+1] == 2)
        {
            return true;
        }
    }
    return false;;
}
",
0eefe10c954547a7675d5ee81f88d4d112cf44e9,"public boolean bobThere(String str)
{
    for (int i = 0; i < str.length() - 2; i++) {
        if (str.charAt(i) == 'b' && str.charAt(i + 2) == 'b') {
            return true;
        }
    }
    return false;
}
",
8f6dbd26c957f489904930b7ed0aa2950cd254af,"public String repeatEnd(String str, int n)
{
    String repeat = str.substring(str.length() - n);
    for (int i = 1; i < n; i++)
        //starts with the first letter of the string
    {
        repeat = repeat + str.substring(str.length() - n);
        //gets the part of the word that needs to be returned
    }
    return repeat;
    //returns the string made out of the n repetitions
}
",
afec4a1fda7760651e34095e9ceef8a8483018be,"public boolean sameEnds(int[] nums, int n)
{
    
    for (int i = 0; i <= n; i++)
    {
        if (nums[i] != nums[nums.length - n + i - 1])
        {
            return false;
        }
    }
    return true;
}
",
c32e8df18759f85c9ca9cc1ff3051aa396bf5a33,"public boolean evenlySpaced(int a, int b, int c)
{
    int[3] arrInOrder;
    arrInOrder[0] = a;
    arrInOrder[1] = b;
    arrInOrder[2] = c;
    
    int small;
    int med, big;
   /**
    if ((a > b) && (a > c)) // if a is the biggest
   {
		if (b > c)
        {
            big = a;
            med = b;
            small = c;
        }
       else
       {
           
       }
       
   }
   */
}
",
dbbe2c6beeefd93c68c1cf77a6130ed4323b9aa3,"public int countEvens(int[] nums)
{
    int count = 0;
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] % 2 == 0)
        {
            count++;
        }
    }
    return count;
}
",
f7613e1314baffe2be7c9164f5586a14e6e82fd6,"public int countCode(String str)
{
    int count = 0;
    for (int i = 0; i < str.length() - 4; i++) {
        if (str.substring(i, i + 1).equals(""co"") && str.charAt(i + 3) == 'e') {
            count++;
        }
    }
    return count;
}
",
e1377201338b35fe171b9444b54cc7c825b47de7,"public int greenTicket(int a, int b, int c)
{
    if (a == b && b == c) //if two numbers are the same
        return 20;
    if (a == b || a == c || b == c) //if all the numbers are the same
        return 10;
    else //none of the numbers are the same
        return 0;
}
",
cfc6cb87b23f11a2f4bbbf92a708643e8012b8fb,"public int countEvens(int[] nums)
{	
    int count = 0;
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] % 2 == 0))
        {
            count++;
        }
    }
    return count;
}
",
987f265fb4f09a7db40586aa6a321d7c612fa526,"public boolean has77(int[] nums)
{
    int count = 0;
    
    for (int i = 0; i < nums.length - 1; i++)
    {
        if (nums[i] == 7 && nums[i+1] == 7)
        {
            count = 1;
        }
        else if (nums[i] == 7 && nums[i+2] == 7 && i < nums.length - 3)
        {
            count = 1;
        }
    }
    // okay, another approach is to check if there are two 7's.
    // if there are, store their [] as variables
    // if the difference between them is greater than 2, then false
    
    return (count == 1);
}
",
6f326caf302bdfdbefc02faf1dc435ba9d9f04d6,"public boolean isEverywhere(int[] nums, int val)
{
    for (int i = 0; i < nums.length - 1; i++)
    {
        if ((nums[i] != val) && (nums[i + 1] != val))
        {
            return false;
        }          
        
    }
     return true;
}
",
4465ac2e7e70f3ac5ddbd490bd262cc0c4f6249d,"public int[] frontPiece(int[] nums)
{
    int [] grid = new int[2];
    
    // establish logi for checking nums.
    // add the proper elements of nums into a new array 
    if (nums.length == 1)
    {
        return grid[0] = nums[0];
    }
    else if (nums.length == 0)
    {
        return grid;
    }
    else
    {
        grid[0] = nums[0];
        grid[1] = nums[1];
        return grid[];
    }
}
",
ecef8ffff5f622c9ab6799c53c46541bd578254a,"public int sum67(int[] nums)
{
    int sum = 0;
    boolean ifSix = false;
    for (int i = 0; i < nums.length; i++)
    {
        if (ifSix)
        {
            if (nums[i] == 7)
                ifSix = false;
        }
        else if (nums[i] == 6)
        {
            ifSix = true;
        }
        //if ifSix is true, then it goes back into the for loop 
        //and the first if statement becomes true
        else
        {
            sum = sum + nums[i];
        }
        //takes the sum of the numbers when there is no linee of numbers starting
        //with a 6 and ending with a 7
    }
    return sum;
}
",
eee0eb76d7c982f7cdbbfb86dbf032940b49e38b,"public int luckySum(int a, int b, int c)
{
    if (a == 13) // if a is equal to 13
        return 0;
    if (b == 13) // if b is equal to 13 go to the a value
        return a;
    if (c == 13) //if c is 13, only add  and b
        return (a + b);
    return (a + b + c); //if none of the others,add all the numbers
}
",
98b41121a7f0c87d5746dc0ae2746596c4a8bb37,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
98b41121a7f0c87d5746dc0ae2746596c4a8bb37,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
a641c5efbb7e5f53f92580571992aa0a53d6cdf6,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
f7613e1314baffe2be7c9164f5586a14e6e82fd6,"public int countCode(String str)
{
    int count = 0;
    for (int i = 0; i < str.length() - 4; i++) {
        if (str.substring(i, i + 1).equals(""co"") && str.charAt(i + 3) == 'e') {
            count++;
        }
    }
    return count;
}
",
c4fa96f9af07e09df6d1f3cc7c42be1e2029eb72,"public boolean sameEnds(int[] nums, int n)
{
        for(int i = 0; i < n; i++) {
        if(nums[i] != nums[nums.length - n + i])
            return false;
    }
                
    return true;
}
",
54f16f3c5196c9d23444381409e354f9fae465c0,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
e05151e763b22c6322f72dd9558578b0970a10d6,"public boolean canBalance(int[] nums)
{
    double sum = 0;
    for (int n : nums) {
        sum += n;
    }
    
    double target = sum / 2;
    sum = 0;
    
    for (int i : nums) {
        sum += i;
        if (sum == target) {
            return true;
        }
    }
    return false;
}
",
bbf414c607917bae018f323952576cc4855d0403,"public int[] fix45(int[] nums)
{
    int[] fours = new int [3];
    int[] fives = new int[3];
    int index4=0;
    int index5 = 0;
    for (int i=0; i<nums.length;i++)
    {
        if (nums[i] == 4)
        {
            fours[index4] = i;
            index4++;
        }
        else if (nums[i] == 5)
        {
            fives[index5] = i;
            index5++;
        }
    }
    for (int i = index5-1; i>=0;i--)
    {
        if (nums[fours[i]+1]!=5)
        {
        	nums[fives[i]] = nums[fours[i]+1];
        	nums[fours[i]+1] = 5;
        }
    }
    
    
    
    
    //int start = 0;
    //int skip = -1;
    //for (int i=0; i<nums.length;i++)
    //{
    //    if (nums[i] == 4)
    //    {
    //        for (int j=start; j<nums.length;j++)
   	//		{
    //            if (j!=skip && nums[j]==5)
    //            {
    //                nums[j]=nums[i+1];
    //                nums[i+1]=5;
    //                skip = i+1;
    //                break;
    //            }
    //        }
    //    }
    //}
    return nums;
}
",
45bb0c43390b2898deab9a359cdda85e43e43e39,"public int[] shiftLeft(int[] nums)
{
    int[] result = new int[nums.length];
    for (int i = 0; i< nums.length - 1; i++)
    {
		result[i] = nums[i+1];
    }
    result[nums.length - 1] = nums[0];
    
    return result;
}
",
c1fdbe3e9fca73de72f1831d00c35304cb29463e,"public int[] fizzArray(int n)
{
    int[] result = new int[n];
    for (int i = 0; i < n; i++)
    {
        result[i] = i;
    }
    return result;
}
",
8a4197cd94d2fc278a10045f02c9323393eb70ad,"public boolean sameEnds(int[] nums, int n)
{
    for (int i = 0; i < n; i++)
    {
        if (nums[i] != nums[nums.length - n + i])
            return false;
    }
    return true;
}
",
6e2e62d18f30974998599ac300549d4eb85fb22c,"public static int[] fizzArray(int n) {

//initializing integer array with size n

int[] result = new int[n];

for (int i = 0; i < n; i++){

result[i] = i;

}

return result;

}
",
b05268e4079f92fa8c479a385b128576976d16c9,"public String atFirst(String str)
{
    String result = str.substring(0, 2);
    
    String value = '@';
    
    if (result.length() == 0)
    {
        result.charAt(0) = '@';
        result(1) = '@';
    }
    else if (result.length() == 1)
    {
        result(1) = '@';
    }
    else
    {
        result = result;
    }
    
    return result;
}
",
f0c481a9e07c60bea12e78a5079713f14b24c2a9,"public int blackjack(int a, int b)
{
    if(b > 21 && a < 21)
        return a;
    if(a>21 && b < 21)
        return b;
    if(a > b)
        return a;
    if (b > a)
        return a;
    return 0;
}
",
d3bbd5372c67b93d7e4c5f3425ac793bb5763980,"public int sortaSum(int a, int b)
{
    int sum = a + b;
    if (sum >= 10 && sum <= 19)
        return 20;
    return sum;
}
",
9e81d1a2a7638c14b721846f5090b36ad07ab308,"public int[] seriesUp(int n)
{
    int[] result = new int[(n * (n + 1)) / 2];
    int count = 1;
    int index = 0;
    for (int i = 0; i < result.length; i++)
    {
        for (int j = 0; j < count; j++)
        {
            result[index] = j;
        	index++;
        }
        count++;
    }
}
",
e05151e763b22c6322f72dd9558578b0970a10d6,"public boolean canBalance(int[] nums)
{
    double sum = 0;
    for (int n : nums) {
        sum += n;
    }
    
    double target = sum / 2;
    sum = 0;
    
    for (int i : nums) {
        sum += i;
        if (sum == target) {
            return true;
        }
    }
    return false;
}
",
708073e053068889622d8588b7bec2ceea644404,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
f7613e1314baffe2be7c9164f5586a14e6e82fd6,"public int countCode(String str)
{
    int count = 0;
    for (int i = 0; i < str.length() - 4; i++) {
        if (str.substring(i, i + 1).equals(""co"") && str.charAt(i + 3) == 'e') {
            count++;
        }
    }
    return count;
}
",
db19ea5f1cabdb8d39c12a6acfc593bd85bf4f95,"public int[] tenRun(int[] nums)
{
    for (int i = 0; i < nums.length; i++)
    {
    	if (nums[i] % 10 == 0)
    	{
     	   for (int j = i + 1; j < nums.length && nums[j] % 10 != 0; j++)
           {
            	nums[j] = nums[i];   
           }
    	}
    }
    return nums;
}
",
a3cfe4acc0878f7a98ccbc168df9dff28266dbd7,"public int[] frontPiece(int[] nums)
{
    int [] grid = new int[2];
    
    // establish logi for checking nums.
    // add the proper elements of nums into a new array 
    if (nums.length == 1)
    {
        return grid[0] = nums[0];
    }
    else if (nums.length == 0)
    {
        return grid;
    }
    else
    {
        return grid[nums[0], nums[1]];
    }
}
",
b7d5d5590bde31e23ee41e67ec8ade069279409e,"public int caughtSpeeding(int speed, boolean isBirthday)
{
    if (isBirthday) speed >= 5;
    if (speed <= 60) return 0;
    return (speed > 60 && speed <= 80) ? 1 : 2;
}
",
4ba46181a66bb2f3cf45d38876db8736b1ebda46,"public boolean in1To10(int n, boolean outsideMode)
{
    return ((n >= 1 && n<=10 && !outsideMode) || (n > 10 || n < 1 && outsideMode));
}
",
37483792e65efa307aab5d74a47b4a1dbe36e195,"public boolean bobThere(String str)
{
    //int firstB = str.indexOf(""b"");
   // int secondB = str.lastIndexOf(""b"");
    //if (secondB == firstB + 2)
    //    return true;
   // return false;
    for (int n == 0; n < str.length(); n++)
    {
        if ((str.charAt(n) == str.indexOf(""b"") && (str.charAt(n + 2) == str.indexOf(""b"", n))
        {
            return true;
        }
                
    }//end for loop
    return false;
}
",
324744e665f46a82492205626535ae0a59adced1,"public int countEvens(int[] nums)
{
    int count = 0;
    for (int i = 0; i < nums.length; i++)
    {
        if (nums[i] % 2 == 0)
        {
            count++;
        }
    }
    return count;
}
",
a641c5efbb7e5f53f92580571992aa0a53d6cdf6,"public int sum3(int[] nums)
{
    return nums[0] + nums[1] + nums[2];
}
",
8ea0e17b60756ae019215592cbd3e7a8e04b0965,"public int countClumps(int[] nums)
{
    int clumps = 0;
    boolean isClump = false;
    for (int i = 0; i < nums.length - 1; i += 1) {
         if (isClump) {
             if {nums[i] != num[i + 1]) {
                 isClump = false;
             }
             else {
                 isClump = true;
                 clumps += 1;
             }
                }
         }
         return clumps;
}
",
